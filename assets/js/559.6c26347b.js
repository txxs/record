(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{948:function(a,t,e){"use strict";e.r(t);var n=e(13),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[a._v("#")]),a._v(" 目录")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java%E8%AF%AD%E8%A8%80%E6%96%B0%E7%89%B9%E6%80%A7"}},[a._v("Java语言新特性")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[a._v("Lambda表达式")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3"}},[a._v("函数式接口")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8"}},[a._v("方法引用")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95"}},[a._v("接口的默认方法")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3"}},[a._v("重复注解")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#java%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7"}},[a._v("Java编译器的新特性")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%90%8D%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96"}},[a._v("方法参数名字可以反射获取")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#java-%E7%B1%BB%E5%BA%93%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7"}},[a._v("Java 类库的新特性")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#optional"}},[a._v("Optional")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#stream"}},[a._v("Stream")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#datetime-api-jsr-310"}},[a._v("Date/Time API (JSR 310)")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B9%B6%E8%A1%8C%EF%BC%88parallel%EF%BC%89%E6%95%B0%E7%BB%84"}},[a._v("并行（parallel）数组")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#completablefuture"}},[a._v("CompletableFuture")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88jvm%EF%BC%89%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7"}},[a._v("Java虚拟机（JVM）的新特性")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[a._v("总结")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"title-夯实java基础系列21-java8新特性终极指南date-2019-9-21-15-56-26-文章生成时间-一般不改categories-java技术江湖-java基础tags-java8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#title-夯实java基础系列21-java8新特性终极指南date-2019-9-21-15-56-26-文章生成时间-一般不改categories-java技术江湖-java基础tags-java8"}},[a._v("#")]),a._v(" title: 夯实Java基础系列21：Java8新特性终极指南\ndate: 2019-9-21 15:56:26 # 文章生成时间，一般不改\ncategories:\n- Java技术江湖\n- Java基础\ntags:\n- Java8")]),a._v(" "),e("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),e("blockquote",[e("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),e("p",[a._v("喜欢的话麻烦点下Star哈")]),a._v(" "),e("p",[a._v("文章首发于我的个人博客：")]),a._v(" "),e("blockquote",[e("p",[a._v("www.how2playlife.com")])]),a._v(" "),e("p",[a._v("本文是微信公众号【Java技术江湖】的《夯实Java基础系列博文》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。\n该系列博文会告诉你如何从入门到进阶，一步步地学习Java基础知识，并上手进行实战，接着了解每个Java知识点背后的实现原理，更完整地了解整个Java技术体系，形成自己的知识框架。为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),a._v(" "),e("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),e("p",[a._v("这是一个Java8新增特性的总结图。接下来让我们一次实践一下这些新特性吧")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/493447/201906/493447-20190604133048748-2090946599.png",alt:"image"}})]),a._v(" "),e("h2",{attrs:{id:"java语言新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java语言新特性"}},[a._v("#")]),a._v(" Java语言新特性")]),a._v(" "),e("h3",{attrs:{id:"lambda表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式"}},[a._v("#")]),a._v(" Lambda表达式")]),a._v(" "),e("p",[a._v("Lambda表达式（也称为闭包）是整个Java 8发行版中最受期待的在Java语言层面上的改变，Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中），或者把代码看成数据：函数式程序员对这一概念非常熟悉。在JVM平台上的很多语言（Groovy，Scala，……）从一开始就有Lambda，但是Java程序员不得不使用毫无新意的匿名类来代替lambda。")]),a._v(" "),e("p",[a._v("关于Lambda设计的讨论占用了大量的时间与社区的努力。可喜的是，最终找到了一个平衡点，使得可以使用一种即简洁又紧凑的新方式来构造Lambdas。在最简单的形式中，一个lambda可以由用逗号分隔的参数列表、–>符号与函数体三部分表示。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Arrays.asList( "a", "b", "d" ).forEach( e -> System.out.println( e ) );\n')])])]),e("p",[a._v("请注意参数e的类型是由编译器推测出来的。同时，你也可以通过把参数类型与参数包括在括号中的形式直接给出参数的类型：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Arrays.asList( "a", "b", "d" ).forEach( ( String e ) -> System.out.println( e ) );\n')])])]),e("p",[a._v("在某些情况下lambda的函数体会更加复杂，这时可以把函数体放到在一对花括号中，就像在Java中定义普通函数一样。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Arrays.asList( "a", "b", "d" ).forEach( e -> {\n    System.out.print( e );\n    System.out.print( e );\n} );\n')])])]),e("p",[a._v("Lambda可以引用类的成员变量与局部变量（如果这些变量不是final的话，它们会被隐含的转为final，这样效率更高）。例如，下面两个代码片段是等价的：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('String separator = ",";\nArrays.asList( "a", "b", "d" ).forEach( \n    ( String e ) -> System.out.print( e + separator ) );\n')])])]),e("p",[a._v("和：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('final String separator = ",";\nArrays.asList( "a", "b", "d" ).forEach( \n    ( String e ) -> System.out.print( e + separator ) );\n')])])]),e("p",[a._v("Lambda可能会返回一个值。返回值的类型也是由编译器推测出来的。如果lambda的函数体只有一行的话，那么没有必要显式使用return语句。下面两个代码片段是等价的：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Arrays.asList( "a", "b", "d" ).sort( ( e1, e2 ) -> e1.compareTo( e2 ) );\n')])])]),e("p",[a._v("和：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Arrays.asList( "a", "b", "d" ).sort( ( e1, e2 ) -> {\n    int result = e1.compareTo( e2 );\n    return result;\n} );\n')])])]),e("p",[a._v("语言设计者投入了大量精力来思考如何使现有的函数友好地支持lambda。")]),a._v(" "),e("p",[a._v("最终采取的方法是：增加函数式接口的概念。函数式接口就是一个具有一个方法的普通接口。像这样的接口，可以被隐式转换为lambda表达式。")]),a._v(" "),e("p",[a._v("java.lang.Runnable与java.util.concurrent.Callable是函数式接口最典型的两个例子。")]),a._v(" "),e("p",[a._v("在实际使用过程中，函数式接口是容易出错的：如有某个人在接口定义中增加了另一个方法，这时，这个接口就不再是函数式的了，并且编译过程也会失败。")]),a._v(" "),e("p",[a._v("为了克服函数式接口的这种脆弱性并且能够明确声明接口作为函数式接口的意图，Java8增加了一种特殊的注解@FunctionalInterface（Java8中所有类库的已有接口都添加了@FunctionalInterface注解）。让我们看一下这种函数式接口的定义：")]),a._v(" "),e("p",[a._v("@FunctionalInterface\npublic interface Functional {\nvoid method();\n}\n需要记住的一件事是：默认方法与静态方法并不影响函数式接口的契约，可以任意使用：")]),a._v(" "),e("p",[a._v("@FunctionalInterface\npublic interface FunctionalDefaultMethods {\nvoid method();")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("default void defaultMethod() {            \n}        \n")])])]),e("p",[a._v("}\nLambda是Java 8最大的卖点。它具有吸引越来越多程序员到Java平台上的潜力，并且能够在纯Java语言环境中提供一种优雅的方式来支持函数式编程。更多详情可以参考官方文档。")]),a._v(" "),e("p",[a._v("下面看一个例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class lambda和函数式编程 {\n    @Test\n    public void test1() {\n        List names = Arrays.asList("peter", "anna", "mike", "xenia");\n\n        Collections.sort(names, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                return b.compareTo(a);\n            }\n        });\n        System.out.println(Arrays.toString(names.toArray()));\n    }\n\n    @Test\n    public void test2() {\n        List<String> names = Arrays.asList("peter", "anna", "mike", "xenia");\n\n        Collections.sort(names, (String a, String b) -> {\n            return b.compareTo(a);\n        });\n\n        Collections.sort(names, (String a, String b) -> b.compareTo(a));\n\n        Collections.sort(names, (a, b) -> b.compareTo(a));\n        System.out.println(Arrays.toString(names.toArray()));\n    }\n\n}\n\n    static void add(double a,String b) {\n        System.out.println(a + b);\n    }\n    @Test\n    public void test5() {\n        D d = (a,b) -> add(a,b);\n//        interface D {\n//            void get(int i,String j);\n//        }\n        //这里要求，add的两个参数和get的两个参数吻合并且返回类型也要相等，否则报错\n//        static void add(double a,String b) {\n//            System.out.println(a + b);\n//        }\n    }\n\n    @FunctionalInterface\n    interface D {\n        void get(int i,String j);\n    }\n')])])]),e("p",[a._v("接下来看看Lambda和匿名内部类的区别")]),a._v(" "),e("p",[a._v("匿名内部类仍然是一个类，只是不需要我们显式指定类名，编译器会自动为该类取名。比如有如下形式的代码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class LambdaTest {\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println("Hello World");\n            }\n        }).start();\n    }\n}\n')])])]),e("p",[a._v("编译之后将会产生两个 class 文件：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("LambdaTest.class\nLambdaTest$1.class\n")])])]),e("p",[a._v("使用 javap -c LambdaTest.class 进一步分析 LambdaTest.class 的字节码，部分结果如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public static void main(java.lang.String[]);\nCode:\n    0: new           #2                  // class java/lang/Thread\n    3: dup\n    4: new           #3                  // class com/example/myapplication/lambda/LambdaTest$1\n    7: dup\n    8: invokespecial #4                  // Method com/example/myapplication/lambda/LambdaTest$1."<init>":()V\n    11: invokespecial #5                  // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V\n    14: invokevirtual #6                  // Method java/lang/Thread.start:()V\n    17: return\n')])])]),e("p",[a._v("可以发现在 4: new #3 这一行创建了匿名内部类的对象。")]),a._v(" "),e("p",[a._v("而对于 Lambda表达式的实现， 接下来我们将上面的示例代码使用 Lambda 表达式实现，代码如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class LambdaTest {\n    public static void main(String[] args) {\n        new Thread(() -> System.out.println("Hello World")).start();\n    }\n}\n')])])]),e("p",[a._v("此时编译后只会产生一个文件 LambdaTest.class，再来看看通过 javap 对该文件反编译后的结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public static void main(java.lang.String[]);\nCode:\n    0: new           #2                  // class java/lang/Thread\n    3: dup\n    4: invokedynamic #3,  0              // InvokeDynamic #0:run:()Ljava/lang/Runnable;\n    9: invokespecial #4                  // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V\n    12: invokevirtual #5                  // Method java/lang/Thread.start:()V\n    15: return\n')])])]),e("p",[a._v("从上面的结果我们发现 Lambda 表达式被封装成了主类的一个私有方法，并通过 invokedynamic 指令进行调用。")]),a._v(" "),e("p",[a._v("因此，我们可以得出结论：Lambda 表达式是通过 invokedynamic 指令实现的，并且书写 Lambda 表达式不会产生新的类。")]),a._v(" "),e("p",[a._v("既然 Lambda 表达式不会创建匿名内部类，那么在 Lambda 表达式中使用 this 关键字时，其指向的是外部类的引用。")]),a._v(" "),e("h3",{attrs:{id:"函数式接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口"}},[a._v("#")]),a._v(" 函数式接口")]),a._v(" "),e("p",[a._v("所谓的函数式接口就是只有一个抽象方法的接口，注意这里说的是抽象方法，因为Java8中加入了默认方法的特性，但是函数式接口是不关心接口中有没有默认方法的。 一般函数式接口可以使用@FunctionalInterface注解的形式来标注表示这是一个函数式接口，该注解标注与否对函数式接口没有实际的影响， 不过一般还是推荐使用该注解，就像使用@Override注解一样。")]),a._v(" "),e("p",[a._v("lambda表达式是如何符合 Java 类型系统的？每个lambda对应于一个给定的类型，用一个接口来说明。而这个被称为函数式接口（functional interface）的接口必须仅仅包含一个抽象方法声明。每个那个类型的lambda表达式都将会被匹配到这个抽象方法上。因此默认的方法并不是抽象的，你可以给你的函数式接口自由地增加默认的方法。")]),a._v(" "),e("p",[a._v("我们可以使用任意的接口作为lambda表达式，只要这个接口只包含一个抽象方法。为了保证你的接口满足需求，你需要增加@FunctionalInterface注解。编译器知道这个注解，一旦你试图给这个接口增加第二个抽象方法声明时，它将抛出一个编译器错误。")]),a._v(" "),e("p",[a._v("下面举几个例子")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class 函数式接口使用 {\n    @FunctionalInterface\n    interface A {\n        void say();\n        default void talk() {\n\n        }\n    }\n    @Test\n    public void test1() {\n        A a = () -> System.out.println("hello");\n        a.say();\n    }\n\n    @FunctionalInterface\n    interface B {\n        void say(String i);\n    }\n    public void test2() {\n        //下面两个是等价的，都是通过B接口来引用一个方法，而方法可以直接使用::来作为方法引用\n        B b = System.out::println;\n        B b1 = a -> Integer.parseInt("s");//这里的a其实换成别的也行，只是将方法传给接口作为其方法实现\n        B b2 = Integer::valueOf;//i与方法传入参数的变量类型一直时，可以直接替换\n        B b3 = String::valueOf;\n        //B b4 = Integer::parseInt;类型不符，无法使用\n\n    }\n    @FunctionalInterface\n    interface C {\n        int say(String i);\n    }\n    public void test3() {\n        C c = Integer::parseInt;//方法参数和接口方法的参数一样，可以替换。\n        int i = c.say("1");\n        //当我把C接口的int替换为void时就会报错，因为返回类型不一致。\n        System.out.println(i);\n        //综上所述，lambda表达式提供了一种简便的表达方式，可以将一个方法传到接口中。\n        //函数式接口是只提供一个抽象方法的接口，其方法由lambda表达式注入，不需要写实现类，\n        //也不需要写匿名内部类，可以省去很多代码，比如实现runnable接口。\n        //函数式编程就是指把方法当做一个参数或引用来进行操作。除了普通方法以外，静态方法，构造方法也是可以这样操作的。\n    }\n}\n')])])]),e("p",[a._v("请记住如果@FunctionalInterface 这个注解被遗漏，此代码依然有效。")]),a._v(" "),e("h3",{attrs:{id:"方法引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[a._v("#")]),a._v(" 方法引用")]),a._v(" "),e("p",[a._v("Lambda表达式和方法引用")]),a._v(" "),e("p",[a._v("有了函数式接口之后，就可以使用Lambda表达式和方法引用了。其实函数式接口的表中的函数描述符就是Lambda表达式，在函数式接口中Lambda表达式相当于匿名内部类的效果。 举个简单的例子：")]),a._v(" "),e("p",[a._v("public class TestLambda {")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public static void execute(Runnable runnable) {\n    runnable.run();\n}\n \npublic static void main(String[] args) {\n    //Java8之前\n    execute(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println("run");\n        }\n    });\n \n    //使用Lambda表达式\n    execute(() -> System.out.println("run"));\n}\n')])])]),e("p",[a._v("}")]),a._v(" "),e("p",[a._v("可以看到，相比于使用匿名内部类的方式，Lambda表达式可以使用更少的代码但是有更清晰的表述。注意，Lambda表达式也不是完全等价于匿名内部类的， 两者的不同点在于this的指向和本地变量的屏蔽上。")]),a._v(" "),e("p",[a._v("方法引用可以看作Lambda表达式的更简洁的一种表达形式，使用::操作符，方法引用主要有三类：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("指向静态方法的方法引用(例如Integer的parseInt方法，写作Integer::parseInt)；\n\n指向任意类型实例方法的方法引用(例如String的length方法，写作String::length)；\n\n指向现有对象的实例方法的方法引用(例如假设你有一个本地变量localVariable用于存放Variable类型的对象，它支持实例方法getValue，那么可以写成localVariable::getValue)。\n")])])]),e("p",[a._v("举个方法引用的简单的例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Function<String, Integer> stringToInteger = (String s) -> Integer.parseInt(s);\n")])])]),e("p",[a._v("//使用方法引用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Function<String, Integer> stringToInteger = Integer::parseInt;\n")])])]),e("p",[a._v("方法引用中还有一种特殊的形式，构造函数引用，假设一个类有一个默认的构造函数，那么使用方法引用的形式为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Supplier<SomeClass> c1 = SomeClass::new;\nSomeClass s1 = c1.get();\n")])])]),e("p",[a._v("//等价于")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Supplier<SomeClass> c1 = () -> new SomeClass();\nSomeClass s1 = c1.get();\n")])])]),e("p",[a._v("如果是构造函数有一个参数的情况：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Function<Integer, SomeClass> c1 = SomeClass::new;\nSomeClass s1 = c1.apply(100);\n")])])]),e("p",[a._v("//等价于")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Function<Integer, SomeClass> c1 = i -> new SomeClass(i);\nSomeClass s1 = c1.apply(100);\n")])])]),e("h3",{attrs:{id:"接口的默认方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口的默认方法"}},[a._v("#")]),a._v(" 接口的默认方法")]),a._v(" "),e("p",[a._v("Java 8 使我们能够使用default 关键字给接口增加非抽象的方法实现。这个特性也被叫做 扩展方法（Extension Methods）。如下例所示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class 接口的默认方法 {\n    class B implements A {\n//        void a(){}实现类方法不能重名\n    }\n    interface A {\n        //可以有多个默认方法\n        public default void a(){\n            System.out.println("a");\n        }\n        public default void b(){\n            System.out.println("b");\n        }\n        //报错static和default不能同时使用\n//        public static default void c(){\n//            System.out.println("c");\n//        }\n    }\n    public void test() {\n        B b = new B();\n        b.a();\n\n    }\n}\n')])])]),e("p",[a._v("默认方法出现的原因是为了对原有接口的扩展，有了默认方法之后就不怕因改动原有的接口而对已经使用这些接口的程序造成的代码不兼容的影响。 在Java8中也对一些接口增加了一些默认方法，比如Map接口等等。一般来说，使用默认方法的场景有两个：可选方法和行为的多继承。")]),a._v(" "),e("p",[a._v("默认方法的使用相对来说比较简单，唯一要注意的点是如何处理默认方法的冲突。关于如何处理默认方法的冲突可以参考以下三条规则：")]),a._v(" "),e("p",[a._v("类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。")]),a._v(" "),e("p",[a._v("如果无法依据第一条规则进行判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口。即如果B继承了A，那么B就比A更具体。")]),a._v(" "),e("p",[a._v("最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现。那么如何显式地指定呢:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class C implements B, A {\n \n    public void hello() {\n        B.super().hello();    \n    }\n \n}\n")])])]),e("p",[a._v("使用X.super.m(..)显式地调用希望调用的方法。")]),a._v(" "),e("p",[a._v("Java 8用默认方法与静态方法这两个新概念来扩展接口的声明。默认方法使接口有点像Traits（Scala中特征(trait)类似于Java中的Interface，但它可以包含实现代码，也就是目前Java8新增的功能），但与传统的接口又有些不一样，它允许在已有的接口中添加新方法，而同时又保持了与旧版本代码的兼容性。")]),a._v(" "),e("p",[a._v("默认方法与抽象方法不同之处在于抽象方法必须要求实现，但是默认方法则没有这个要求。相反，每个接口都必须提供一个所谓的默认实现，这样所有的接口实现者将会默认继承它（如果有必要的话，可以覆盖这个默认实现）。让我们看看下面的例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('private interface Defaulable {\n    // Interfaces now allow default methods, the implementer may or \n    // may not implement (override) them.\n    default String notRequired() { \n        return "Default implementation"; \n    }        \n}\n         \nprivate static class DefaultableImpl implements Defaulable {\n}\n     \nprivate static class OverridableImpl implements Defaulable {\n    @Override\n    public String notRequired() {\n        return "Overridden implementation";\n    }\n}\n')])])]),e("p",[a._v("Defaulable接口用关键字default声明了一个默认方法notRequired()，Defaulable接口的实现者之一DefaultableImpl实现了这个接口，并且让默认方法保持原样。Defaulable接口的另一个实现者OverridableImpl用自己的方法覆盖了默认方法。")]),a._v(" "),e("p",[a._v("Java 8带来的另一个有趣的特性是接口可以声明（并且可以提供实现）静态方法。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private interface DefaulableFactory {\n    // Interfaces now allow static methods\n    static Defaulable create( Supplier< Defaulable > supplier ) {\n        return supplier.get();\n    }\n}\n")])])]),e("p",[a._v("下面的一小段代码片段把上面的默认方法与静态方法黏合到一起。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public static void main( String[] args ) {\n    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new );\n    System.out.println( defaulable.notRequired() );\n         \n    defaulable = DefaulableFactory.create( OverridableImpl::new );\n    System.out.println( defaulable.notRequired() );\n}\n")])])]),e("p",[a._v("这个程序的控制台输出如下：")]),a._v(" "),e("p",[a._v("Default implementation\nOverridden implementation\n在JVM中，默认方法的实现是非常高效的，并且通过字节码指令为方法调用提供了支持。默认方法允许继续使用现有的Java接口，而同时能够保障正常的编译过程。这方面好的例子是大量的方法被添加到java.util.Collection接口中去：stream()，parallelStream()，forEach()，removeIf()，……")]),a._v(" "),e("p",[a._v("尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误。更多详情请参考官方文档")]),a._v(" "),e("h3",{attrs:{id:"重复注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重复注解"}},[a._v("#")]),a._v(" 重复注解")]),a._v(" "),e("p",[a._v("自从Java 5引入了注解机制，这一特性就变得非常流行并且广为使用。然而，使用注解的一个限制是相同的注解在同一位置只能声明一次，不能声明多次。Java 8打破了这条规则，引入了重复注解机制，这样相同的注解可以在同一地方声明多次。")]),a._v(" "),e("p",[a._v("重复注解机制本身必须用@Repeatable注解。事实上，这并不是语言层面上的改变，更多的是编译器的技巧，底层的原理保持不变。让我们看一个快速入门的例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('package com.javacodegeeks.java8.repeatable.annotations;\n \nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n \npublic class RepeatingAnnotations {\n    @Target( ElementType.TYPE )\n    @Retention( RetentionPolicy.RUNTIME )\n    public @interface Filters {\n        Filter[] value();\n    }\n     \n    @Target( ElementType.TYPE )\n    @Retention( RetentionPolicy.RUNTIME )\n    @Repeatable( Filters.class )\n    public @interface Filter {\n        String value();\n    };\n     \n    @Filter( "filter1" )\n    @Filter( "filter2" )\n    public interface Filterable {        \n    }\n     \n    public static void main(String[] args) {\n        for( Filter filter: Filterable.class.getAnnotationsByType( Filter.class ) ) {\n            System.out.println( filter.value() );\n        }\n    }\n}\n')])])]),e("p",[a._v("正如我们看到的，这里有个使用@Repeatable( Filters.class )注解的注解类Filter，Filters仅仅是Filter注解的数组，但Java编译器并不想让程序员意识到Filters的存在。这样，接口Filterable就拥有了两次Filter（并没有提到Filter）注解。")]),a._v(" "),e("p",[a._v("同时，反射相关的API提供了新的函数getAnnotationsByType()来返回重复注解的类型（请注意Filterable.class.getAnnotation( Filters.class )经编译器处理后将会返回Filters的实例）。")]),a._v(" "),e("p",[a._v("程序输出结果如下：")]),a._v(" "),e("p",[a._v("filter1\nfilter2\n更多详情请参考官方文档")]),a._v(" "),e("h2",{attrs:{id:"java编译器的新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java编译器的新特性"}},[a._v("#")]),a._v(" Java编译器的新特性")]),a._v(" "),e("h3",{attrs:{id:"方法参数名字可以反射获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法参数名字可以反射获取"}},[a._v("#")]),a._v(" 方法参数名字可以反射获取")]),a._v(" "),e("p",[a._v("很长一段时间里，Java程序员一直在发明不同的方式使得方法参数的名字能保留在Java字节码中，并且能够在运行时获取它们（比如，Paranamer类库）。最终，在Java 8中把这个强烈要求的功能添加到语言层面（通过反射API与Parameter.getName()方法）与字节码文件（通过新版的javac的–parameters选项）中。")]),a._v(" "),e("p",[a._v("package com.javacodegeeks.java8.parameter.names;")]),a._v(" "),e("p",[a._v("import java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;")]),a._v(" "),e("p",[a._v('public class ParameterNames {\npublic static void main(String[] args) throws Exception {\nMethod method = ParameterNames.class.getMethod( "main", String[].class );\nfor( final Parameter parameter: method.getParameters() ) {\nSystem.out.println( "Parameter: " + parameter.getName() );\n}\n}\n}\n如果不使用–parameters参数来编译这个类，然后运行这个类，会得到下面的输出：')]),a._v(" "),e("p",[a._v("Parameter: arg0\n如果使用–parameters参数来编译这个类，程序的结构会有所不同（参数的真实名字将会显示出来）：")]),a._v(" "),e("p",[a._v("Parameter: args")]),a._v(" "),e("h2",{attrs:{id:"java-类库的新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-类库的新特性"}},[a._v("#")]),a._v(" Java 类库的新特性")]),a._v(" "),e("p",[a._v("Java 8 通过增加大量新类，扩展已有类的功能的方式来改善对并发编程、函数式编程、日期/时间相关操作以及其他更多方面的支持。")]),a._v(" "),e("h3",{attrs:{id:"optional"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optional"}},[a._v("#")]),a._v(" Optional")]),a._v(" "),e("p",[a._v("到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。")]),a._v(" "),e("p",[a._v("Optional实际上是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。更多详情请参考官方文档。")]),a._v(" "),e("p",[a._v("我们下面用两个小例子来演示如何使用Optional类：一个允许为空值，一个不允许为空值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class 空指针Optional {\n    public static void main(String[] args) {\n\n        //使用of方法，仍然会报空指针异常\n//        Optional optional = Optional.of(null);\n//        System.out.println(optional.get());\n\n        //抛出没有该元素的异常\n        //Exception in thread "main" java.util.NoSuchElementException: No value present\n//        at java.util.Optional.get(Optional.java:135)\n//        at com.javase.Java8.空指针Optional.main(空指针Optional.java:14)\n//        Optional optional1 = Optional.ofNullable(null);\n//        System.out.println(optional1.get());\n        Optional optional = Optional.ofNullable(null);\n        System.out.println(optional.isPresent());\n        System.out.println(optional.orElse(0));//当值为空时给与初始值\n        System.out.println(optional.orElseGet(() -> new String[]{"a"}));//使用回调函数设置默认值\n        //即使传入Optional容器的元素为空，使用optional.isPresent()方法也不会报空指针异常\n        //所以通过optional.orElse这种方式就可以写出避免空指针异常的代码了\n        //输出Optional.empty。\n    }\n}\n')])])]),e("p",[a._v("如果Optional类的实例为非空值的话，isPresent()返回true，否从返回false。为了防止Optional为空值，orElseGet()方法通过回调函数来产生一个默认值。map()函数对当前Optional的值进行转化，然后返回一个新的Optional实例。orElse()方法和orElseGet()方法类似，但是orElse接受一个默认值而不是一个回调函数。下面是这个程序的输出：")]),a._v(" "),e("p",[a._v("Full Name is set? false\nFull Name: [none]\nHey Stranger!\n让我们来看看另一个例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('Optional< String > firstName = Optional.of( "Tom" );\nSystem.out.println( "First Name is set? " + firstName.isPresent() );        \nSystem.out.println( "First Name: " + firstName.orElseGet( () -> "[none]" ) ); \nSystem.out.println( firstName.map( s -> "Hey " + s + "!" ).orElse( "Hey Stranger!" ) );\nSystem.out.println();\n')])])]),e("p",[a._v("下面是程序的输出：")]),a._v(" "),e("p",[a._v("First Name is set? true\nFirst Name: Tom\nHey Tom!")]),a._v(" "),e("h3",{attrs:{id:"stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[a._v("#")]),a._v(" Stream")]),a._v(" "),e("p",[a._v("最新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。")]),a._v(" "),e("p",[a._v("Stream API极大简化了集合框架的处理（但它的处理的范围不仅仅限于集合框架的处理，这点后面我们会看到）。让我们以一个简单的Task类为例进行介绍：")]),a._v(" "),e("p",[a._v("Task类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态.让我们引入一个Task的小集合作为演示例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("final Collection< Task > tasks = Arrays.asList(\n    new Task( Status.OPEN, 5 ),\n    new Task( Status.OPEN, 13 ),\n    new Task( Status.CLOSED, 8 ) \n);\n")])])]),e("p",[a._v("我们下面要讨论的第一个问题是所有状态为OPEN的任务一共有多少分数？在Java 8以前，一般的解决方式用foreach循环，但是在Java 8里面我们可以使用stream：一串支持连续、并行聚集操作的元素。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('// Calculate total points of all active tasks using sum()\nfinal long totalPointsOfOpenTasks = tasks\n    .stream()\n    .filter( task -> task.getStatus() == Status.OPEN )\n    .mapToInt( Task::getPoints )\n    .sum();\n         \nSystem.out.println( "Total points: " + totalPointsOfOpenTasks );\n')])])]),e("p",[a._v("程序在控制台上的输出如下：")]),a._v(" "),e("p",[a._v("Total points: 18")]),a._v(" "),e("p",[a._v("这里有几个注意事项。")]),a._v(" "),e("p",[a._v("第一，task集合被转换化为其相应的stream表示。然后，filter操作过滤掉状态为CLOSED的task。")]),a._v(" "),e("p",[a._v("下一步，mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream。最后，用sum函数把所有的分数加起来，得到最终的结果。")]),a._v(" "),e("p",[a._v("在继续讲解下面的例子之前，关于stream有一些需要注意的地方（详情在这里）.stream操作被分成了中间操作与最终操作这两种。")]),a._v(" "),e("p",[a._v("中间操作返回一个新的stream对象。中间操作总是采用惰性求值方式，运行一个像filter这样的中间操作实际上没有进行任何过滤，相反它在遍历元素时会产生了一个新的stream对象，这个新的stream对象包含原始stream\n中符合给定谓词的所有元素。")]),a._v(" "),e("p",[a._v("像forEach、sum这样的最终操作可能直接遍历stream，产生一个结果或副作用。当最终操作执行结束之后，stream管道被认为已经被消耗了，没有可能再被使用了。在大多数情况下，最终操作都是采用及早求值方式，及早完成底层数据源的遍历。")]),a._v(" "),e("p",[a._v("stream另一个有价值的地方是能够原生支持并行处理。让我们来看看这个算task分数和的例子。")]),a._v(" "),e("p",[a._v("stream另一个有价值的地方是能够原生支持并行处理。让我们来看看这个算task分数和的例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('// Calculate total points of all tasks\nfinal double totalPoints = tasks\n   .stream()\n   .parallel()\n   .map( task -> task.getPoints() ) // or map( Task::getPoints ) \n   .reduce( 0, Integer::sum );\n     \nSystem.out.println( "Total points (all tasks): " + totalPoints );\n')])])]),e("p",[a._v("这个例子和第一个例子很相似，但这个例子的不同之处在于这个程序是并行运行的，其次使用reduce方法来算最终的结果。\n下面是这个例子在控制台的输出：")]),a._v(" "),e("p",[a._v("Total points (all tasks): 26.0\n经常会有这个一个需求：我们需要按照某种准则来对集合中的元素进行分组。Stream也可以处理这样的需求，下面是一个例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("// Group tasks by their status\nfinal Map< Status, List< Task > > map = tasks\n    .stream()\n    .collect( Collectors.groupingBy( Task::getStatus ) );\nSystem.out.println( map );\n")])])]),e("p",[a._v("这个例子的控制台输出如下：")]),a._v(" "),e("p",[a._v("{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}\n让我们来计算整个集合中每个task分数（或权重）的平均值来结束task的例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('// Calculate the weight of each tasks (as percent of total points) \nfinal Collection< String > result = tasks\n    .stream()                                        // Stream< String >\n    .mapToInt( Task::getPoints )                     // IntStream\n    .asLongStream()                                  // LongStream\n    .mapToDouble( points -> points / totalPoints )   // DoubleStream\n    .boxed()                                         // Stream< Double >\n    .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n    .mapToObj( percentage -> percentage + "%" )      // Stream< String> \n    .collect( Collectors.toList() );                 // List< String > \n         \nSystem.out.println( result );\n')])])]),e("p",[a._v("下面是这个例子的控制台输出：")]),a._v(" "),e("p",[a._v("[19%, 50%, 30%]\n最后，就像前面提到的，Stream API不仅仅处理Java集合框架。像从文本文件中逐行读取数据这样典型的I/O操作也很适合用Stream API来处理。下面用一个例子来应证这一点。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('final Path path = new File( filename ).toPath();\ntry( Stream< String > lines = Files.lines( path, StandardCharsets.UTF_8 ) ) {\n    lines.onClose( () -> System.out.println("Done!") ).forEach( System.out::println );\n}\n')])])]),e("p",[a._v("对一个stream对象调用onClose方法会返回一个在原有功能基础上新增了关闭功能的stream对象，当对stream对象调用close()方法时，与关闭相关的处理器就会执行。")]),a._v(" "),e("p",[a._v("Stream API、Lambda表达式与方法引用在接口默认方法与静态方法的配合下是Java 8对现代软件开发范式的回应。更多详情请参考官方文档。")]),a._v(" "),e("h3",{attrs:{id:"date-time-api-jsr-310"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date-time-api-jsr-310"}},[a._v("#")]),a._v(" Date/Time API (JSR 310)")]),a._v(" "),e("p",[a._v("Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。对日期与时间的操作一直是Java程序员最痛苦的地方之一。标准的 java.util.Date以及后来的java.util.Calendar一点没有改善这种情况（可以这么说，它们一定程度上更加复杂）。")]),a._v(" "),e("p",[a._v("这种情况直接导致了Joda-Time——一个可替换标准日期/时间处理且功能非常强大的Java API的诞生。Java 8新的Date-Time API (JSR 310)在很大程度上受到Joda-Time的影响，并且吸取了其精髓。新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。在设计新版API时，十分注重与旧版API的兼容性：不允许有任何的改变（从java.util.Calendar中得到的深刻教训）。如果需要修改，会返回这个类的一个新实例。")]),a._v(" "),e("p",[a._v("让我们用例子来看一下新版API主要类的使用方法。第一个是Clock类，它通过指定一个时区，然后就可以获取到当前的时刻，日期与时间。Clock可以替换System.currentTimeMillis()与TimeZone.getDefault()。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("// Get the system clock as UTC offset \nfinal Clock clock = Clock.systemUTC();\nSystem.out.println( clock.instant() );\nSystem.out.println( clock.millis() );\n")])])]),e("p",[a._v("下面是程序在控制台上的输出：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("2014-04-12T15:19:29.282Z\n1397315969360\n")])])]),e("p",[a._v("我们需要关注的其他类是LocaleDate与LocalTime。LocaleDate只持有ISO-8601格式且无时区信息的日期部分。相应的，LocaleTime只持有ISO-8601格式且无时区信息的时间部分。LocaleDate与LocalTime都可以从Clock中得到。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("// Get the local date and local time\nfinal LocalDate date = LocalDate.now();\nfinal LocalDate dateFromClock = LocalDate.now( clock );\n         \nSystem.out.println( date );\nSystem.out.println( dateFromClock );\n         \n// Get the local date and local time\nfinal LocalTime time = LocalTime.now();\nfinal LocalTime timeFromClock = LocalTime.now( clock );\n     \nSystem.out.println( time );\nSystem.out.println( timeFromClock );\n")])])]),e("p",[a._v("下面是程序在控制台上的输出：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("2014-04-12\n2014-04-12\n11:25:54.568\n15:25:54.568\n")])])]),e("p",[a._v("下面是程序在控制台上的输出：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("2014-04-12T11:47:01.017-04:00[America/New_York]\n2014-04-12T15:47:01.017Z\n2014-04-12T08:47:01.017-07:00[America/Los_Angeles]\n")])])]),e("p",[a._v("最后，让我们看一下Duration类：在秒与纳秒级别上的一段时间。Duration使计算两个日期间的不同变的十分简单。下面让我们看一个这方面的例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('// Get duration between two dates\nfinal LocalDateTime from = LocalDateTime.of( 2014, Month.APRIL, 16, 0, 0, 0 );\nfinal LocalDateTime to = LocalDateTime.of( 2015, Month.APRIL, 16, 23, 59, 59 );\n \nfinal Duration duration = Duration.between( from, to );\nSystem.out.println( "Duration in days: " + duration.toDays() );\nSystem.out.println( "Duration in hours: " + duration.toHours() );\n')])])]),e("p",[a._v("上面的例子计算了两个日期2014年4月16号与2014年4月16号之间的过程。下面是程序在控制台上的输出：")]),a._v(" "),e("p",[a._v("Duration in days: 365\nDuration in hours: 8783\n对Java 8在日期/时间API的改进整体印象是非常非常好的。一部分原因是因为它建立在“久战杀场”的Joda-Time基础上，另一方面是因为用来大量的时间来设计它，并且这次程序员的声音得到了认可。更多详情请参考官方文档。")]),a._v(" "),e("h3",{attrs:{id:"并行-parallel-数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并行-parallel-数组"}},[a._v("#")]),a._v(" 并行（parallel）数组")]),a._v(" "),e("p",[a._v("Java 8增加了大量的新方法来对数组进行并行处理。可以说，最重要的是parallelSort()方法，因为它可以在多核机器上极大提高数组排序的速度。下面的例子展示了新方法（parallelXxx）的使用。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('package com.javacodegeeks.java8.parallel.arrays;\n \nimport java.util.Arrays;\nimport java.util.concurrent.ThreadLocalRandom;\n \npublic class ParallelArrays {\n    public static void main( String[] args ) {\n        long[] arrayOfLong = new long [ 20000 ];        \n         \n        Arrays.parallelSetAll( arrayOfLong, \n            index -> ThreadLocalRandom.current().nextInt( 1000000 ) );\n        Arrays.stream( arrayOfLong ).limit( 10 ).forEach( \n            i -> System.out.print( i + " " ) );\n        System.out.println();\n         \n        Arrays.parallelSort( arrayOfLong );     \n        Arrays.stream( arrayOfLong ).limit( 10 ).forEach( \n            i -> System.out.print( i + " " ) );\n        System.out.println();\n    }\n}\n')])])]),e("p",[a._v("上面的代码片段使用了parallelSetAll()方法来对一个有20000个元素的数组进行随机赋值。然后，调用parallelSort方法。这个程序首先打印出前10个元素的值，之后对整个数组排序。这个程序在控制台上的输出如下（请注意数组元素是随机生产的）：")]),a._v(" "),e("p",[a._v("Unsorted: 591217 891976 443951 424479 766825 351964 242997 642839 119108 552378\nSorted: 39 220 263 268 325 607 655 678 723 793")]),a._v(" "),e("h3",{attrs:{id:"completablefuture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture"}},[a._v("#")]),a._v(" CompletableFuture")]),a._v(" "),e("p",[a._v("在Java8之前，我们会使用JDK提供的Future接口来进行一些异步的操作，其实CompletableFuture也是实现了Future接口， 并且基于ForkJoinPool来执行任务，因此本质上来讲，CompletableFuture只是对原有API的封装， 而使用CompletableFuture与原来的Future的不同之处在于可以将两个Future组合起来，或者如果两个Future是有依赖关系的，可以等第一个执行完毕后再实行第二个等特性。")]),a._v(" "),e("p",[e("strong",[a._v("先来看看基本的使用方式：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public Future<Double> getPriceAsync(final String product) {\n    final CompletableFuture<Double> futurePrice = new CompletableFuture<>();\n    new Thread(() -> {\n        double price = calculatePrice(product);\n        futurePrice.complete(price);  //完成后使用complete方法，设置future的返回值\n    }).start();\n    return futurePrice;\n}\n")])])]),e("p",[a._v("得到Future之后就可以使用get方法来获取结果，CompletableFuture提供了一些工厂方法来简化这些API，并且使用函数式编程的方式来使用这些API，例如：")]),a._v(" "),e("p",[a._v("Fufure"),e("Double",[a._v(" price = CompletableFuture.supplyAsync(() -> calculatePrice(product));"),e("br"),a._v("\n代码是不是一下子简洁了许多呢。之前说了，CompletableFuture可以组合多个Future，不管是Future之间有依赖的，还是没有依赖的。")])],1),a._v(" "),e("p",[e("strong",[a._v("如果第二个请求依赖于第一个请求的结果，那么可以使用thenCompose方法来组合两个Future")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public List<String> findPriceAsync(String product) {\n    List<CompletableFutute<String>> priceFutures = tasks.stream()\n    .map(task -> CompletableFuture.supplyAsync(() -> task.getPrice(product),executor))\n    .map(future -> future.thenApply(Work::parse))\n    .map(future -> future.thenCompose(work -> CompletableFuture.supplyAsync(() -> Count.applyCount(work), executor)))\n    .collect(Collectors.toList());\n\n    return priceFutures.stream().map(CompletableFuture::join).collect(Collectors.toList());\n}\n")])])]),e("p",[a._v("上面这段代码使用了thenCompose来组合两个CompletableFuture。supplyAsync方法第二个参数接受一个自定义的Executor。 首先使用CompletableFuture执行一个任务，调用getPrice方法，得到一个Future，之后使用thenApply方法，将Future的结果应用parse方法， 之后再使用执行完parse之后的结果作为参数再执行一个applyCount方法，然后收集成一个CompletableFuture"),e("String",[a._v("的List， 最后再使用一个流，调用CompletableFuture的join方法，这是为了等待所有的异步任务执行完毕，获得最后的结果。")])],1),a._v(" "),e("p",[a._v("注意，这里必须使用两个流，如果在一个流里调用join方法，那么由于Stream的延迟特性，所有的操作还是会串行的执行，并不是异步的。")]),a._v(" "),e("p",[e("strong",[a._v("再来看一个两个Future之间没有依赖关系的例子：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Future<String> futurePriceInUsd = CompletableFuture.supplyAsync(() -> shop.getPrice(“price1”))\n                                    .thenCombine(CompletableFuture.supplyAsync(() -> shop.getPrice(“price2”)), (s1, s2) -> s1 + s2);\n")])])]),e("p",[a._v("这里有两个异步的任务，使用thenCombine方法来组合两个Future，thenCombine方法的第二个参数就是用来合并两个Future方法返回值的操作函数。")]),a._v(" "),e("p",[a._v("有时候，我们并不需要等待所有的异步任务结束，只需要其中的一个完成就可以了，CompletableFuture也提供了这样的方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("//假设getStream方法返回一个Stream<CompletableFuture<String>>\nCompletableFuture[] futures = getStream(“listen”).map(f -> f.thenAccept(System.out::println)).toArray(CompletableFuture[]::new);\n//等待其中的一个执行完毕\nCompletableFuture.anyOf(futures).join();\n使用anyOf方法来响应CompletableFuture的completion事件。\n")])])]),e("h2",{attrs:{id:"java虚拟机-jvm-的新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机-jvm-的新特性"}},[a._v("#")]),a._v(" Java虚拟机（JVM）的新特性")]),a._v(" "),e("p",[a._v("PermGen空间被移除了，取而代之的是Metaspace（JEP 122）。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("更多展望：Java 8通过发布一些可以增加程序员生产力的特性来推进这个伟大的平台的进步。现在把生产环境迁移到Java 8还为时尚早，但是在接下来的几个月里，它会被大众慢慢的接受。毫无疑问，现在是时候让你的代码与Java 8兼容，并且在Java 8足够安全稳定的时候迁移到Java 8。")]),a._v(" "),e("h2",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),e("p",[a._v("https://blog.csdn.net/shuaicihai/article/details/72615495\nhttps://blog.csdn.net/qq_34908167/article/details/79286697\nhttps://www.jianshu.com/p/4df02599aeb2\nhttps://www.cnblogs.com/yangzhilong/p/10973006.html\nhttps://www.cnblogs.com/JackpotHan/p/9701147.html")]),a._v(" "),e("h2",{attrs:{id:"微信公众号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),e("h3",{attrs:{id:"java技术江湖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),e("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),e("p",[e("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),e("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),e("h3",{attrs:{id:"个人公众号-黄小斜"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),e("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),e("p",[e("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),e("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);