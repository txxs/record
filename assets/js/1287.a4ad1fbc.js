(window.webpackJsonp=window.webpackJsonp||[]).push([[1287],{1682:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("(PS：扫描"),a("RouterLink",{attrs:{to:"/middleware/redis/"}},[s._v("首页里面的二维码")]),s._v("进群，分享我自己在看的技术资料给大家，希望和大家一起学习进步！)")],1),s._v(" "),a("p",[s._v("下面是主要是自己看完《Redis设计与实现》，《Redis深度历险：核心原理与应用实践》后，为了更好得掌握Redis，网上找了一些面试题，查阅书籍和资料后，写的解答。")]),s._v(" "),a("h4",{attrs:{id:"_1-redis是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis是什么"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#Redis%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[s._v("1.Redis是什么？")])]),s._v(" "),a("h4",{attrs:{id:"_2-redis过期key是怎么样清理的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis过期key是怎么样清理的"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#Redis%E8%BF%87%E6%9C%9Fkey%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E6%B8%85%E7%90%86%E7%9A%84%EF%BC%9F"}},[s._v("2.Redis过期key是怎么样清理的？")])]),s._v(" "),a("h4",{attrs:{id:"_3-redis为什么是单线程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis为什么是单线程的"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84%EF%BC%9F"}},[s._v("3.Redis为什么是单线程的？")])]),s._v(" "),a("h4",{attrs:{id:"_4-redis的性能为什么这么高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis的性能为什么这么高"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#Redis%E7%9A%84%E6%80%A7%E8%83%BD%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E9%AB%98%EF%BC%9F"}},[s._v("4.Redis的性能为什么这么高？")])]),s._v(" "),a("h4",{attrs:{id:"_5-linux中io模型一共有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-linux中io模型一共有哪些"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#Linux%E4%B8%ADIO%E6%A8%A1%E5%9E%8B%E4%B8%80%E5%85%B1%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"}},[s._v("5.Linux中IO模型一共有哪些？")])]),s._v(" "),a("h4",{attrs:{id:"_6-同步与异步的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-同步与异步的区别是什么"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[s._v("6.同步与异步的区别是什么？")])]),s._v(" "),a("h4",{attrs:{id:"_7-阻塞与非阻塞的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-阻塞与非阻塞的区别是什么"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[s._v("7.阻塞与非阻塞的区别是什么？")])]),s._v(" "),a("h4",{attrs:{id:"_8-如何解决redis缓存穿透问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-如何解决redis缓存穿透问题"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98%EF%BC%9F"}},[s._v("8.如何解决Redis缓存穿透问题？")])]),s._v(" "),a("h4",{attrs:{id:"_9-如何解决redis缓存击穿问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何解决redis缓存击穿问题"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E9%97%AE%E9%A2%98%EF%BC%9F"}},[s._v("9.如何解决Redis缓存击穿问题？")])]),s._v(" "),a("h4",{attrs:{id:"_10-如何解决redis缓存雪崩问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何解决redis缓存雪崩问题"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E9%97%AE%E9%A2%98%EF%BC%9F"}},[s._v("10.如何解决Redis缓存雪崩问题？")])]),s._v(" "),a("h4",{attrs:{id:"_11-如何解决缓存与数据库的数据一致性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-如何解决缓存与数据库的数据一致性问题"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%9F"}},[s._v("11.如何解决缓存与数据库的数据一致性问题？")])]),s._v(" "),a("h3",{attrs:{id:"redis是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[s._v("#")]),s._v(" Redis是什么？")]),s._v(" "),a("p",[s._v("Redis是一个开源的，基于内存的，也可进行持久化的，使用C语言编写的键值对存储数据库。")]),s._v(" "),a("h3",{attrs:{id:"redis过期key是怎么样清理的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis过期key是怎么样清理的"}},[s._v("#")]),s._v(" Redis过期key是怎么样清理的？")]),s._v(" "),a("h5",{attrs:{id:"_1-惰性清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-惰性清除"}},[s._v("#")]),s._v(" (1)惰性清除")]),s._v(" "),a("p",[s._v("在访问key时，如果发现key已经过期，那么会将key删除。")]),s._v(" "),a("h5",{attrs:{id:"_2-定时清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-定时清理"}},[s._v("#")]),s._v(" (2)定时清理")]),s._v(" "),a("p",[s._v("Redis配置项hz定义了serverCron任务的执行周期，默认每次清理时间为25ms，每次清理会依次遍历所有DB，从db的expires字典(里面保存了设置了过期时间的键值对，key就是指向键对象，value是过期时间)中随机取出20个key，如果过期就删除，如果其中有5个key过期，说明过期率超过了25%，那么就继续对这个db进行清理，否则开始清理下一个db。")]),s._v(" "),a("h5",{attrs:{id:"_3-内存不够时清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存不够时清理"}},[s._v("#")]),s._v(" (3)内存不够时清理")]),s._v(" "),a("p",[s._v("当执行写入命令时，如果发现内存不够，那么就会按照配置的淘汰策略清理内存，淘汰策略一般有6种，Redis4.0版本后又增加了2种，主要由分为三类")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("第一类 不处理，等报错(默认的配置)")]),s._v(" "),a("ul",[a("li",[s._v("noeviction，发现内存不够时，不删除key，执行写入命令时发现内存不够直接返回错误信息。（Redis默认的配置就是noeviction）")])])]),s._v(" "),a("li",[a("p",[s._v("第二类  从所有结果集中的key中挑选，进行淘汰(随机，lru，lfu三种)")]),s._v(" "),a("ul",[a("li",[s._v("allkeys-random 就是从所有的key中随机挑选key，进行淘汰")]),s._v(" "),a("li",[s._v("allkeys-lru 就是从所有的key中挑选最近使用时间距离现在最远的key，进行淘汰")]),s._v(" "),a("li",[s._v("allkeys-lfu 就是从所有的key中挑选使用频率最低的key，进行淘汰。（这是Redis 4.0版本后新增的策略）")])])]),s._v(" "),a("li",[a("p",[s._v("第三类 从设置了过期时间的key中挑选，进行淘汰(随机，lru，ttl，lfu)")]),s._v(" "),a("p",[s._v("这种就是从设置了expires过期时间的结果集中选出一部分key淘汰，挑选的算法有：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("volatile-random 从设置了过期时间的结果集中随机挑选key删除。")])]),s._v(" "),a("li",[a("p",[s._v("volatile-lru 从设置了过期时间的结果集中挑选上次使用时间距离现在最久的key开始删除")])]),s._v(" "),a("li",[a("p",[s._v("volatile-ttl 从设置了过期时间的结果集中挑选可存活时间最短的key开始删除(也就是从哪些快要过期的key中先删除)")])]),s._v(" "),a("li",[a("p",[s._v("volatile-lfu 从过期时间的结果集中选择使用频率最低的key开始删除（这是Redis 4.0版本后新增的策略）")])])])])]),s._v(" "),a("h5",{attrs:{id:"lru算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lru算法"}},[s._v("#")]),s._v(" LRU算法")]),s._v(" "),a("p",[s._v("LRU算法的设计原则是如果一个数据近期没有被访问到，那么之后一段时间都不会被访问到。所以当元素个数达到限制的值时，优先移除距离上次使用时间最久的元素。")]),s._v(" "),a("p",[s._v("可以使用双向链表Node+HashMap<String, Node>来实现，每次访问元素后，将元素移动到链表头部，当元素满了时，将链表尾部的元素移除，HashMap主要用于根据key获得Node以及添加时判断节点是否已存在和删除时快速找到节点。")]),s._v(" "),a("p",[s._v("PS:使用单向链表能不能实现呢，也可以，单向链表的节点虽然获取不到pre节点的信息，但是可以将下一个节点的key和value设置在当前节点上，然后把当前节点的next指针指向下下个节点，这样相当于把下一个节点删除了")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//双向链表")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里存储key便于元素满时，删除尾节点时可以快速从HashMap删除键值对")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" limit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" hashMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" existNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("existNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//从链表中删除这个元素")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新尾节点")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("last"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//移动到最前面")]),s._v("\n            head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新值")]),s._v("\n            existNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//达到限制，先删除尾节点")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" deleteNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//正是因为需要删除，所以才需要每个ListNode保存key")]),s._v("\n                last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//插入头结点")]),s._v("\n                node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" deleteNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" preNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" nextNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("preNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            preNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nextNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            nextNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" preNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" deleteNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" preNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        hashMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br")])]),a("h5",{attrs:{id:"lfu算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lfu算法"}},[s._v("#")]),s._v(" LFU算法")]),s._v(" "),a("p",[s._v("LFU算法的设计原则时，如果一个数据在最近一段时间被访问的时次数越多，那么之后被访问的概率会越大，实现是每个数据都有一个引用计数，每次数据被访问后，引用计数加1，需要淘汰数据时，淘汰引用计数最小的数据。在Redis的实现中，每次key被访问后，引用计数是加一个介于0到1之间的数p，并且访问越频繁p值越大，而且在一定的时间间隔内，如果key没有被访问，引用计数会减少。")]),s._v(" "),a("h3",{attrs:{id:"redis为什么是单线程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis为什么是单线程的"}},[s._v("#")]),s._v(" Redis为什么是单线程的？")]),s._v(" "),a("p",[s._v("Redis官方FAQ回答:")]),s._v(" "),a("p",[s._v("Redis是基于内存的操作，读取数据很快，不需要在某个线程读取数据时，切换到另一个线程来执行来提高CPU利用率，所以CPU不会成为瓶颈所在，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。\n（这里的单线程指的是处理客户端发送的请求命令的文件处理器模块是单线程，其他模块不一定是单线程的。从Redis 4.0版本后，Redis又逐渐引入了多线程。）")]),s._v(" "),a("h5",{attrs:{id:"redis采用单线程的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis采用单线程的优势"}},[s._v("#")]),s._v(" Redis采用单线程的优势:")]),s._v(" "),a("p",[s._v("1.Redis项目的代码会更加清晰，处理逻辑会更加简单。")]),s._v(" "),a("p",[s._v("2.不用考虑多个线程修改数据的情况，修改数据时不用加锁，解锁，也不会出现死锁的问题，导致性能消耗。")]),s._v(" "),a("p",[s._v("3.不存在多进程或者多线程导致的切换而造成的一些性能消耗。")]),s._v(" "),a("h5",{attrs:{id:"redis采用单线程的劣势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis采用单线程的劣势"}},[s._v("#")]),s._v(" Redis采用单线程的劣势:")]),s._v(" "),a("p",[s._v("1.无法充分发挥多核机器的优势，不过可以通过在机器上启动多个Redis实例来利用资源。（但是启动多个Redis实例可能会导致在进行AOF重写时，竞争IO资源，导致磁盘写入压力过大，所以可以使用脚本来触发实例的AOF重写，让所有实例的 AOF 串行执行。）")]),s._v(" "),a("h3",{attrs:{id:"redis的性能为什么这么高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的性能为什么这么高"}},[s._v("#")]),s._v(" Redis的性能为什么这么高？")]),s._v(" "),a("p",[s._v("根据官网的介绍，Redis单机可以到到10W的QPS(每秒处理请求数)，Redis这么快的原因主要有以下几点：")]),s._v(" "),a("p",[s._v("1.完全基于内存，数据全部存储在内存中，内存读取时没有磁盘IO，所以速度非常快。")]),s._v(" "),a("p",[s._v("2.Redis采用单线程的模型，没有上下文切换的开销，也没有竞态条件，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗。")]),s._v(" "),a("p",[s._v("3.Redis项目中使用的数据结构都是专门设计的，例如SDS(简单动态字符串)是对C语言中的字符串频繁修改时，会频繁地进行内存分配，十分消耗性能，而SDS会使用空间预分配和惰性空间释放来避免这些问题的出现。\n空间预分配技术: 对SDS进行修改时，如果修改后SDS实际使用长度为len，")]),s._v(" "),a("p",[s._v("当len<1M时,分配的空间会是2*len+1，也就是会预留len长度的未使用空间，其中1存储空字符")]),s._v(" "),a("p",[s._v("当len>1M时,分配的空间会是len+1+1M，也就是会预留1M长度的未使用空间，其中1存储空字符")]),s._v(" "),a("p",[s._v("4.采用多路复用IO模型，可以同时监测多个流的IO事件能力，在空闲时，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态唤醒，轮询那些真正发出了事件的流，并只依次顺序的处理就绪的流。可以让单个线程高效的处理多个连接请求（尽量减少网络 I/O 的时间消耗)。")]),s._v(" "),a("h3",{attrs:{id:"linux中io模型一共有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux中io模型一共有哪些"}},[s._v("#")]),s._v(" Linux中IO模型一共有哪些？")]),s._v(" "),a("p",[s._v("IO模型主要由阻塞式I/O模型，非阻塞式I/O模型，I/O复用模型，信息驱动式I/O模型，异步I/O模型。")]),s._v(" "),a("h5",{attrs:{id:"阻塞式i-o模型-也就是bio-blocking-io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞式i-o模型-也就是bio-blocking-io"}},[s._v("#")]),s._v(" 阻塞式I/O模型(也就是BIO，Blocking IO)")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/ABUIABAEGAAg0MKrwAUosJqimgYwgAU4xQI.png",alt:"img"}})]),s._v(" "),a("p",[s._v("用户态进程发出一个IO请求时，会调用recvfrom系统调用去获取数据，如果当前内核中数据没有准备好，那么会让出CPU时间片，一直阻塞等待，不会进行其他操作。直到内核中的数据准备好，将数据拷贝到用户空间内存，然后recvfrom返回成功的信号，此时用户态进行才解除阻塞的状态，处理收到的数据。")]),s._v(" "),a("h5",{attrs:{id:"非阻塞时i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞时i-o模型"}},[s._v("#")]),s._v(" 非阻塞时I/O模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/ABUIABAEGAAg7MKrwAUogfiO-QUwgAU48gI.png",alt:"img"}})]),s._v(" "),a("p",[s._v("在非阻塞式I/O模型中，当进程等待内核的数据，而当该数据未到达的时候，进程会不断询问内核，直到内核准备好数据。\n用户态进程调用recvfrom接收数据，当前并没有数据报文产生，此时recvfrom返回EWOULDBLOCK，用户态进程会一直调用recvfrom询问内核，待内核准备好数据的时候，之后用户态进程不再询问内核，待数据从内核复制到用户空间，recvfrom成功返回，用户态进程开始处理数据。")]),s._v(" "),a("h5",{attrs:{id:"i-o多路复用模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o多路复用模型"}},[s._v("#")]),s._v(" I/O多路复用模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/ABUIABAEGAAg_sKrwAUojMPt1gIwgAU4mgM.png",alt:"img"}})]),s._v(" "),a("p",[s._v("I/O复用指的是多个I/O连接复用一个进程。")]),s._v(" "),a("p",[a("strong",[s._v("基础版的I/O复用模型")])]),s._v(" "),a("p",[s._v("最初级的I/O复用，就是"),a("strong",[s._v("一个进程")]),s._v("对应"),a("strong",[s._v("多个Socket")]),s._v("连接，每次从头至尾进行遍历，判断是否有I/O事件准备好了，需要处理，有的话就进行处理，缺点是效率比较低，如果一直没有事件进来，会导致CPU空转。")]),s._v(" "),a("p",[a("strong",[s._v("升级版的I/O复用模型：")])]),s._v(" "),a("p",[a("strong",[s._v("select和poll")])]),s._v(" "),a("p",[s._v("当没有I/O事件时，进程处于阻塞状态，当有I/O事件时，就会有一个代理去唤醒进程，对所有的文件描述符进行轮询(一个文件描述符对应一个Socket连接)，来处理I/O事件。（这里的代理也就是select和poll，select只能观察1024个连接，poll可以观察无限个连接，因为poll是基于链表来实现的）")]),s._v(" "),a("p",[a("strong",[s._v("epoll")])]),s._v(" "),a("p",[s._v("epoll是对select和poll的升级版，解决了很多问题，是线程安全的，而且可以通知进程是哪个Socket连接有I/O事件,不需要进行全部连接进行遍历，提高了查找效率。")]),s._v(" "),a("p",[s._v("epoll和select/poll最大区别是")]),s._v(" "),a("p",[s._v("(1)epoll内部使用了mmap共享了用户和内核的部分空间，避免了数据的来回拷贝。\n(2)epoll基于事件驱动，epoll_wait只返回发生的事件避免了像select和poll对事件的整个轮寻操作（时间复杂度为O(N)），epoll时间复杂度为O（1）。")]),s._v(" "),a("h5",{attrs:{id:"信息驱动式i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信息驱动式i-o模型"}},[s._v("#")]),s._v(" 信息驱动式I/O模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/ABUIABAEGAAglcOrwAUoqPiNiQYwgAU4lgM.png",alt:"img"}})]),s._v(" "),a("p",[s._v("是非阻塞的，当需要等待数据时，用户态进程会给内核发送一个信号，告知自己需要的数据，然后就去执行其他任务了，内核准备好数据后，会给用户态发送一个信号，用户态进程收到之后，会立马调用recvfrom，等待数据从从内核空间复制到用户空间，待完成之后recvfrom返回成功指示，用户态进程才处理数据。")]),s._v(" "),a("h5",{attrs:{id:"异步i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步i-o模型"}},[s._v("#")]),s._v(" 异步I/O模型")]),s._v(" "),a("p",[s._v("与信息驱动式I/O模型区别在于，是在数据从内核态拷贝到用户空间之后，内核才通知用户态进程来处理数据。在复制数据到用户空间这个时间段内，用户态进程也是不阻塞的。")]),s._v(" "),a("p",[s._v("参考链接：")]),s._v(" "),a("p",[s._v("http://blog.csdn.net/lzb348110175/article/details/98941378")]),s._v(" "),a("p",[s._v("https://xie.infoq.cn/article/b3816e9fe3ac77684b4f29348")]),s._v(" "),a("h3",{attrs:{id:"epoll水平触发和边缘触发的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#epoll水平触发和边缘触发的区别"}},[s._v("#")]),s._v(" epoll水平触发和边缘触发的区别？")]),s._v(" "),a("p",[a("strong",[s._v("水平触发")]),s._v("和"),a("strong",[s._v("边缘触发")]),s._v("两种：")]),s._v(" "),a("ul",[a("li",[s._v("LT，默认的模式（水平触发） 只要该fd还有数据可读，每次 "),a("code",[s._v("epoll_wait")]),s._v(" 都会返回它的事件，提醒用户程序去操作，")]),s._v(" "),a("li",[s._v("ET是“高速”模式（边缘触发）")])]),s._v(" "),a("p",[s._v("只会提示一次，直到下次再有数据流入之前都不会再提示，无论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读完，即读到read返回值小于请求值或遇到EAGAIN错误")]),s._v(" "),a("p",[s._v("epoll使用“事件”的就绪通知方式，通过"),a("code",[s._v("epoll_ctl")]),s._v("注册fd，一旦该fd就绪，内核就会采用类似回调机制激活该fd，"),a("code",[s._v("epoll_wait")]),s._v("便可收到通知。")]),s._v(" "),a("h3",{attrs:{id:"同步与异步的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步与异步的区别是什么"}},[s._v("#")]),s._v(" 同步与异步的区别是什么？")]),s._v(" "),a("p",[s._v("同步与异步的区别在于调用结果的通知方式上。\n同步执行一个方法后，需要等待结果返回轮询调用结果才能继续执行，然后继续执行下去。\n异步执行一个方法后，不会等待结果的返回，被调用方在执行完成后通过回调来通知调用方继续执行。")]),s._v(" "),a("h3",{attrs:{id:"阻塞与非阻塞的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞的区别是什么"}},[s._v("#")]),s._v(" 阻塞与非阻塞的区别是什么？")]),s._v(" "),a("p",[s._v("阻塞与非阻塞的区别在于进程/线程在等待消息时，进程/线程是否是挂起状态。")]),s._v(" "),a("h5",{attrs:{id:"阻塞调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞调用"}},[s._v("#")]),s._v(" 阻塞调用")]),s._v(" "),a("p",[s._v("在消息发出去后，消息返回之前，当前进程/线程会被挂起，直到有消息返回，当前进/线程才会被激活。")]),s._v(" "),a("h5",{attrs:{id:"非阻塞调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞调用"}},[s._v("#")]),s._v(" 非阻塞调用")]),s._v(" "),a("p",[s._v("在消息发出去后，不会阻塞当前进/线程，而会立即返回，可以去执行其他任务。")]),s._v(" "),a("h3",{attrs:{id:"bio-nio-aio有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bio-nio-aio有什么区别"}},[s._v("#")]),s._v(" BIO，NIO，AIO有什么区别？")]),s._v(" "),a("p",[s._v("一次IO的读操作分为等待就绪和IO操作两个阶段，等待就绪就是等待TCP RecvBuffer里面的数据就绪好，也就是发送方的数据全部发送到网卡里面来，操作就是CPU将数据从网卡拷贝到用户空间。")]),s._v(" "),a("p",[a("strong",[s._v("BIO(同步阻塞型)")])]),s._v(" "),a("p",[s._v("以Java中的IO方式为例，BIO就是同步阻塞型的IO，当一个Socket连接发送数据过来以后，需要为这个Socket连接创建一个线程，由线程调用Socket的read()方法读取数据，需要先把数据从网卡拷贝到内核空间，再拷贝到用户态的内存空间，在数据读取完成前，线程都是阻塞的。这种IO方式就是比较消耗资源，假设有1000个活跃的Socket连接，需要创建出1000个线程来读取数据，读取时都是阻塞的，每个线程有自己独有的线程栈，默认大小是1M。")]),s._v(" "),a("p",[a("strong",[s._v("NIO(同步非阻塞型)")])]),s._v(" "),a("p",[s._v("nio就是多路io复用，就是一个线程来处理多个Socket连接，节省线程资源。以select为例，就是有一个长度为1024的数组，每个元素对应一个Socket连接，线程轮询这个数据，判断哪个Socket连接的数据是出于就绪状态，此时就将数据拷贝到用户空间然后进行处理。由于IO操作阶段是需要等待数据拷贝到用户空间完成才能返回，所以是同步的。由于每次判断内核中Socket缓冲区的数据是否就绪的函数是直接返回的，如果就绪就返回有数据，不是就绪就返回0，线程不需要阻塞等待，所以是非阻塞的。")]),s._v(" "),a("p",[a("strong",[s._v("AIO(异步非阻塞型)")])]),s._v(" "),a("p",[s._v("AIO就是NIO的升级版，在数据处于就绪状态时，也是异步将Socket缓冲区中的数据拷贝到用户空间，然后执行异步回调函数，所以在IO操作阶段也是异步的。")]),s._v(" "),a("p",[s._v('BIO里用户最关心“我要读”，NIO里用户最关心"我什么时候可以读了"，在AIO模型里用户更需要关注的是“什么时候读完了，我可以直接进行处理了”。')]),s._v(" "),a("p",[s._v("https://zhuanlan.zhihu.com/p/23488863")]),s._v(" "),a("p",[s._v("https://www.cnblogs.com/sxkgeek/p/9488703.html")]),s._v(" "),a("p",[s._v("https://blog.csdn.net/weixin_34378045/article/details/91930797")]),s._v(" "),a("h3",{attrs:{id:"如何解决redis缓存穿透问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决redis缓存穿透问题"}},[s._v("#")]),s._v(" 如何解决Redis缓存穿透问题？")]),s._v(" "),a("p",[s._v("Redis 缓存穿透指的是攻击者故意大量请求一些Redis缓存中不存在key的数据，导致请\n求打到数据库上，导致数据库压力过大。")]),s._v(" "),a("h5",{attrs:{id:"解决方案如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案如下"}},[s._v("#")]),s._v(" 解决方案如下：")]),s._v(" "),a("p",[s._v("1.做好参数校验，无效的请求直接返回，只能避免一部分情况，攻击者总是可以找到一些没有覆盖的情况。")]),s._v(" "),a("p",[s._v("2.对缓存中找不到的key，需要去数据库查找的key，缓存到Redis中，但是可能会导致Redis中缓存大量无效的key，可以设置一个很短的过期时间，例如1分钟。")]),s._v(" "),a("p",[s._v("3.也可以使用布隆过滤器，将所有可能的存在的数据通过去hash值的方式存入到一个足够大的bitmap中去，处理请求时，通过在bitmap中查找，可以将不存在的数据拦截掉。")]),s._v(" "),a("h3",{attrs:{id:"如何解决redis缓存击穿问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决redis缓存击穿问题"}},[s._v("#")]),s._v(" 如何解决Redis缓存击穿问题？")]),s._v(" "),a("p",[s._v("缓存击穿主要指的是某个热点key失效，导致大量请求全部转向数据库，导致数据库压力过大。")]),s._v(" "),a("h5",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案：")]),s._v(" "),a("p",[s._v("1.对热点key设置永不过期。")]),s._v(" "),a("p",[s._v("2.加互斥锁，缓存中没有热点key对应的数据时，等待100ms，由获得锁的线程去读取数据库然后设置缓存。")]),s._v(" "),a("h3",{attrs:{id:"如何解决redis缓存雪崩问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决redis缓存雪崩问题"}},[s._v("#")]),s._v(" 如何解决Redis缓存雪崩问题？")]),s._v(" "),a("p",[s._v("缓存雪崩主要指的是短时间内大量key失效，导致所有请求全部转向数据库，导致数据库压力过大。")]),s._v(" "),a("h5",{attrs:{id:"解决方案-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[s._v("#")]),s._v(" 解决方案：")]),s._v(" "),a("p",[s._v("1.在给缓存设置失效时间时加一个随机值，避免集体失效。")]),s._v(" "),a("p",[s._v("2.双缓存机制，缓存A的失效时间为20分钟，缓存B的失效时间会比A长一些，从缓存A读取数据，缓存A中没有时，去缓存B中读取数据，并且启动一个异步线程来更新缓存A(如果已经有异步线程正在更新了，就不用重复更新了)。以及更新缓存B，以便延迟B的过期时间。")]),s._v(" "),a("h3",{attrs:{id:"如何解决缓存与数据库的数据一致性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决缓存与数据库的数据一致性问题"}},[s._v("#")]),s._v(" 如何解决缓存与数据库的数据一致性问题？")]),s._v(" "),a("p",[s._v("首先需要明白会导致缓存与数据库的数据不一致的几个诱因：\n多个写请求的执行顺序不同导致脏数据。\n更新时正好有读请求，读请求取到旧数据然后更新上。或者数据库是读写分离的，在主库更新完之后，需要一定的时间，从库才能更新。")]),s._v(" "),a("h5",{attrs:{id:"_1-先更新数据库-后更新缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-先更新数据库-后更新缓存"}},[s._v("#")]),s._v(" 1.先更新数据库，后更新缓存")]),s._v(" "),a("p",[s._v("1.两个写请求，写请求A，写请求B，A先更新数据库，B后更新数据库，但是可能B会先更新缓存，A后更新缓存，这样就会导致缓存里面的是旧数据。\n2.更新缓存时失败也有可能导致缓存是旧数据。")]),s._v(" "),a("h5",{attrs:{id:"_2-先删除缓存-在更新数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-先删除缓存-在更新数据库"}},[s._v("#")]),s._v(" 2.先删除缓存，在更新数据库")]),s._v(" "),a("p",[s._v("1.删除缓存后，更新数据库之前假如正好有读请求，读请求把旧数据设置到缓存了。")]),s._v(" "),a("h5",{attrs:{id:"_3-先更新数据库-再删除缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-先更新数据库-再删除缓存"}},[s._v("#")]),s._v(" 3.先更新数据库，再删除缓存")]),s._v(" "),a("p",[s._v("1.更新后删除缓存时，网络不好，删除失败也有可能导致缓存是旧数据。")]),s._v(" "),a("p",[s._v("2.写请求A更新数据库然后删除缓存，读请求B读数据时发现缓存中没有数据，就从数据库拿到旧数据准备设置到缓存上去时，如果整个架构是读写分离的，写请求更新数据是在主库上更新，读请求B是去从库上读数据，如果此时主库上的新数据还没有同步到从库，这样读请求B在从库读到旧数据，设置到缓存上，导致缓存里面是旧数据。")]),s._v(" "),a("h4",{attrs:{id:"正确的方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确的方案"}},[s._v("#")]),s._v(" 正确的方案")]),s._v(" "),a("h5",{attrs:{id:"_1-写请求串行化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-写请求串行化"}},[s._v("#")]),s._v(" 1.写请求串行化")]),s._v(" "),a("p",[s._v("将写请求更新之前先获取分布式锁，获得之后才能更新，这样实现写请求的串行化，但是会导致效率变低。")]),s._v(" "),a("h5",{attrs:{id:"_2-先更新数据库-异步删除缓存-删除失败后重试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-先更新数据库-异步删除缓存-删除失败后重试"}},[s._v("#")]),s._v(" 2.先更新数据库，异步删除缓存，删除失败后重试")]),s._v(" "),a("p",[s._v("先更新数据库，异步删除缓存，删除缓存失败时，继续异步重试，或者将操作放到消息队列中，再进行删除操作。（如果数据库是读写分离的，那么删除缓存时需要延迟删除，否则可能会在删除缓存时，从库还没有收到更新后的数据，其他读请求就去从库读到旧数据然后设置到缓存中。）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/o_update1.png",alt:"image"}})]),s._v(" "),a("h5",{attrs:{id:"_3-业务项目更新数据库-其他项目订阅binlog更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-业务项目更新数据库-其他项目订阅binlog更新"}},[s._v("#")]),s._v(" 3.业务项目更新数据库，其他项目订阅binlog更新")]),s._v(" "),a("p",[s._v("业务项目直接更新数据库，然后其他项目订阅binlog，接收到更新数据库操作的消息后，更新缓存，更新缓存失败时，新建异步线程去重试或者将操作发到消息队列，然后后续进行处理。但是这种方案更新mysql后还是有一定延迟，缓冲中才是新值。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://txxs.github.io/pic/interviewGuide-storage/o_update2-20200419221055438.png",alt:"image"}})]),s._v(" "),a("p",[s._v("参考资料：https://www.cnblogs.com/rjzheng/p/9041659.html")])])}),[],!1,null,null,null);t.default=e.exports}}]);