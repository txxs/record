(window.webpackJsonp=window.webpackJsonp||[]).push([[550],{941:function(e,n,t){"use strict";t.r(n);var a=t(13),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[e._v("#")]),e._v(" 目录")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%A6%82%E8%BF%B0"}},[e._v("泛型概述")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%B8%80%E4%B8%AA%E6%A0%97%E5%AD%90"}},[e._v("一个栗子")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E7%89%B9%E6%80%A7"}},[e._v("特性")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F"}},[e._v("泛型的使用方式")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E7%B1%BB"}},[e._v("泛型类")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3"}},[e._v("泛型接口")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6"}},[e._v("泛型通配符")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95"}},[e._v("泛型方法")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95"}},[e._v("泛型方法的基本用法")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95"}},[e._v("类中的泛型方法")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E4%B8%8E%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0"}},[e._v("泛型方法与可变参数")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E6%B3%9B%E5%9E%8B"}},[e._v("静态方法与泛型")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93"}},[e._v("泛型方法总结")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E4%B8%8A%E4%B8%8B%E8%BE%B9%E7%95%8C"}},[e._v("泛型上下边界")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98"}},[e._v("泛型常见面试题")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[e._v("参考文章")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[e._v("微信公众号")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[e._v("Java技术江湖")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[e._v("个人公众号：黄小斜")])])])])]),e._v(" "),t("p",[e._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),t("blockquote",[t("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),t("p",[e._v("喜欢的话麻烦点下Star哈")]),e._v(" "),t("p",[e._v("文章首发于我的个人博客：")]),e._v(" "),t("blockquote",[t("p",[e._v("www.how2playlife.com")])]),e._v(" "),t("p",[e._v("本文是微信公众号【Java技术江湖】的《夯实Java基础系列博文》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。\n该系列博文会告诉你如何从入门到进阶，一步步地学习Java基础知识，并上手进行实战，接着了解每个Java知识点背后的实现原理，更完整地了解整个Java技术体系，形成自己的知识框架。为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),e._v(" "),t("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),t("h2",{attrs:{id:"泛型概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型概述"}},[e._v("#")]),e._v(" 泛型概述")]),e._v(" "),t("p",[e._v("泛型在java中有很重要的地位，在面向对象编程及各种设计模式中有非常广泛的应用。")]),e._v(" "),t("p",[e._v("什么是泛型？为什么要使用泛型？")]),e._v(" "),t("blockquote",[t("p",[e._v("泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。")]),e._v(" "),t("p",[e._v("泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。")])]),e._v(" "),t("h3",{attrs:{id:"一个栗子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个栗子"}},[e._v("#")]),e._v(" 一个栗子")]),e._v(" "),t("p",[e._v("一个被举了无数次的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('List arrayList = new ArrayList();\narrayList.add("aaaa");\narrayList.add(100);\n\nfor(int i = 0; i< arrayList.size();i++){\n    String item = (String)arrayList.get(i);\n    Log.d("泛型测试","item = " + item);\n}\n')])])]),t("p",[e._v("毫无疑问，程序的运行结果会以崩溃结束：")]),e._v(" "),t("p",[e._v("java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String")]),e._v(" "),t("p",[e._v("ArrayList可以存放任意类型，例子中添加了一个String类型，添加了一个Integer类型，再使用时都以String的方式使用，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。")]),e._v(" "),t("p",[e._v("我们将第一行声明初始化list的代码更改一下，编译器会在编译阶段就能够帮我们发现类似这样的问题。")]),e._v(" "),t("p",[e._v("List"),t("String",[e._v(" arrayList = new ArrayList"),t("String",[e._v("();\n...\n//arrayList.add(100); 在编译阶段，编译器就会报错")])],1)],1),e._v(" "),t("h3",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" 特性")]),e._v(" "),t("p",[e._v("泛型只在编译阶段有效。看下面的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('List<String> stringArrayList = new ArrayList<String>();\nList<Integer> integerArrayList = new ArrayList<Integer>();\n\nClass classStringArrayList = stringArrayList.getClass();\nClass classIntegerArrayList = integerArrayList.getClass();\n\nif(classStringArrayList.equals(classIntegerArrayList)){\n    Log.d("泛型测试","类型相同");\n}\n')])])]),t("blockquote",[t("p",[e._v("通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。")])]),e._v(" "),t("p",[e._v("对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。")]),e._v(" "),t("h2",{attrs:{id:"泛型的使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型的使用方式"}},[e._v("#")]),e._v(" 泛型的使用方式")]),e._v(" "),t("p",[e._v("泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法")]),e._v(" "),t("h3",{attrs:{id:"泛型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[e._v("#")]),e._v(" 泛型类")]),e._v(" "),t("blockquote",[t("p",[e._v("泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。")]),e._v(" "),t("p",[e._v("泛型类的最基本写法（这么看可能会有点晕，会在下面的例子中详解）：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("class 类名称 <泛型标识：可以随便写任意标识号，标识指定的泛型的类型>{\n  private 泛型标识 /*（成员变量类型）*/ var; \n  .....\n\n  }\n")])])]),t("p",[e._v("一个最普通的泛型类：")]),e._v(" "),t("p",[e._v("//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("//在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{\n    //在类中声明的泛型整个类里面都可以用，除了静态部分，因为泛型是实例化时声明的。\n    //静态区域的代码在编译时就已经确定，只与类相关\n    class A <E>{\n        T t;\n    }\n    //类里面的方法或类中再次声明同名泛型是允许的，并且该泛型会覆盖掉父类的同名泛型T\n    class B <T>{\n        T t;\n    }\n    //静态内部类也可以使用泛型，实例化时赋予泛型实际类型\n    static class C <T> {\n        T t;\n    }\n    public static void main(String[] args) {\n        //报错，不能使用T泛型，因为泛型T属于实例不属于类\n//        T t = null;\n    }\n\n    //key这个成员变量的类型为T,T的类型由外部指定\n    private T key;\n\n    public Generic(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定\n        this.key = key;\n    }\n\n    public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定\n        return key;\n    }\n}\n")])])]),t("blockquote",[t("p",[e._v("12-27 09:20:04.432 13063-13063/? D/泛型测试: key is 123456")])]),e._v(" "),t("blockquote",[t("p",[e._v("12-27 09:20:04.432 13063-13063/? D/泛型测试: key is key_vlaue")])]),e._v(" "),t("blockquote",[t("p",[e._v("定义的泛型类，就一定要传入泛型类型实参么？并不是这样，在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。")])]),e._v(" "),t("p",[e._v("看一个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('Generic generic = new Generic("111111");\nGeneric generic1 = new Generic(4444);\nGeneric generic2 = new Generic(55.55);\nGeneric generic3 = new Generic(false);\n\nLog.d("泛型测试","key is " + generic.getKey());\nLog.d("泛型测试","key is " + generic1.getKey());\nLog.d("泛型测试","key is " + generic2.getKey());\nLog.d("泛型测试","key is " + generic3.getKey());\n\nD/泛型测试: key is 111111\nD/泛型测试: key is 4444\nD/泛型测试: key is 55.55\nD/泛型测试: key is false\n')])])]),t("p",[e._v("注意：\n泛型的类型参数只能是类类型，不能是简单类型。\n不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。\nif(ex_num instanceof Generic"),t("Number",[e._v("){"),t("br"),e._v("\n}")])],1),e._v(" "),t("h3",{attrs:{id:"泛型接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[e._v("#")]),e._v(" 泛型接口")]),e._v(" "),t("p",[e._v("泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中，可以看一个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("//定义一个泛型接口\npublic interface Generator<T> {\n    public T next();\n}\n")])])]),t("p",[e._v("当实现泛型接口的类，未传入泛型实参时：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('/**\n * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中\n * 即：class FruitGenerator<T> implements Generator<T>{\n * 如果不声明泛型，如：class FruitGenerator implements Generator<T>，编译器会报错："Unknown class"\n */\nclass FruitGenerator<T> implements Generator<T>{\n    @Override\n    public T next() {\n        return null;\n    }\n}\n')])])]),t("p",[e._v("当实现泛型接口的类，传入泛型实参时：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('/**\n * 传入泛型实参时：\n * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator<T>\n * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。\n * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型\n * 即：Generator<T>，public T next();中的的T都要替换成传入的String类型。\n */\npublic class FruitGenerator implements Generator<String> {\n\n    private String[] fruits = new String[]{"Apple", "Banana", "Pear"};\n\n    @Override\n    public String next() {\n        Random rand = new Random();\n        return fruits[rand.nextInt(3)];\n    }\n}\n')])])]),t("h3",{attrs:{id:"泛型通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型通配符"}},[e._v("#")]),e._v(" 泛型通配符")]),e._v(" "),t("p",[e._v("我们知道Ingeter是Number的一个子类，同时在特性章节中我们也验证过Generic"),t("Ingeter",[e._v("与Generic"),t("Number",[e._v("实际上是相同的一种基本类型。那么问题来了，在使用Generic"),t("Number",[e._v("作为形参的方法中，能否使用Generic"),t("Ingeter",[e._v("的实例传入呢？在逻辑上类似于Generic"),t("Number",[e._v("和Generic"),t("Ingeter",[e._v("是否可以看成具有父子关系的泛型类型呢？")])],1)],1)],1)],1)],1)],1),e._v(" "),t("p",[e._v("为了弄清楚这个问题，我们使用Generic"),t("T",[e._v("这个泛型类继续看下面的例子：")])],1),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public void showKeyValue1(Generic<Number> obj){\n    Log.d("泛型测试","key value is " + obj.getKey());\n}\n\nGeneric<Integer> gInteger = new Generic<Integer>(123);\nGeneric<Number> gNumber = new Generic<Number>(456);\n\nshowKeyValue(gNumber);\n\n// showKeyValue这个方法编译器会为我们报错：Generic<java.lang.Integer> \n// cannot be applied to Generic<java.lang.Number>\n// showKeyValue(gInteger);\n')])])]),t("p",[e._v("通过提示信息我们可以看到Generic"),t("Integer",[e._v("不能被看作为`Generic"),t("Number",[e._v("的子类。由此可以看出:同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。")])],1)],1),e._v(" "),t("p",[e._v("回到上面的例子，如何解决上面的问题？总不能为了定义一个新的方法来处理Generic"),t("Integer",[e._v("类型的类，这显然与java中的多台理念相违背。因此我们需要一个在逻辑上可以表示同时是Generic"),t("Integer",[e._v("和Generic"),t("Number",[e._v("父类的引用类型。由此类型通配符应运而生。")])],1)],1)],1),e._v(" "),t("p",[e._v("我们可以将上面的方法改一下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public void showKeyValue1(Generic<?> obj){\n    Log.d("泛型测试","key value is " + obj.getKey());\n')])])]),t("p",[e._v("类型通配符一般是使用？代替具体的类型实参，注意， 此处的？和Number、String、Integer一样都是一种实际的类型，可以把？看成所有类型的父类。是一种真实的类型。")]),e._v(" "),t("p",[e._v("可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型")]),e._v(" "),t("p",[e._v("public void showKeyValue(Generic"),t("Number",[e._v(" obj){\nSystem.out.println(obj);\n}")])],1),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("Generic<Integer> gInteger = new Generic<Integer>(123);\nGeneric<Number> gNumber = new Generic<Number>(456);\n\npublic void test () {\n//        showKeyValue(gInteger);该方法会报错\n    showKeyValue1(gInteger);\n}\n\npublic void showKeyValue1(Generic<?> obj) {\n    System.out.println(obj);\n}\n// showKeyValue这个方法编译器会为我们报错：Generic<java.lang.Integer>\n// cannot be applied to Generic<java.lang.Number>\n// showKeyValue(gInteger);\n")])])]),t("p",[e._v("。")]),e._v(" "),t("h3",{attrs:{id:"泛型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法"}},[e._v("#")]),e._v(" 泛型方法")]),e._v(" "),t("p",[e._v("在java中,泛型类的定义非常简单，但是泛型方法就比较复杂了。")]),e._v(" "),t("p",[e._v("尤其是我们见到的大多数泛型类中的成员方法也都使用了泛型，有的甚至泛型类中也包含着泛型方法，这样在初学者中非常容易将泛型方法理解错了。\n泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('/**\n * 泛型方法的基本介绍\n * @param tClass 传入的泛型实参\n * @return T 返回值为T类型\n * 说明：\n *     1）public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。\n *     2）只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。\n *     3）<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。\n *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。\n */\n    public <T> T genericMethod(Class<T> tClass)throws InstantiationException ,\n      IllegalAccessException{\n            T instance = tClass.newInstance();\n            return instance;\n    }\n\nObject obj = genericMethod(Class.forName("com.test.test"));\n')])])]),t("h3",{attrs:{id:"泛型方法的基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法的基本用法"}},[e._v("#")]),e._v(" 泛型方法的基本用法")]),e._v(" "),t("p",[e._v("光看上面的例子有的同学可能依然会非常迷糊，我们再通过一个例子，把我泛型方法再总结一下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/** \n * 这才是一个真正的泛型方法。\n * 首先在public与返回值之间的<T>必不可少，这表明这是一个泛型方法，并且声明了一个泛型T\n * 这个T可以出现在这个泛型方法的任意位置.\n * 泛型的数量也可以为任意多个 \n *    如：public <T,K> K showKeyName(Generic<T> container){\n *        ...\n *        }\n */\n\n    public class 泛型方法 {\n    @Test\n    public void test() {\n        test1();\n        test2(new Integer(2));\n        test3(new int[3],new Object());\n\n        //打印结果\n//        null\n//        2\n//        [I@3d8c7aca\n//        java.lang.Object@5ebec15\n    }\n    //该方法使用泛型T\n    public <T> void test1() {\n        T t = null;\n        System.out.println(t);\n    }\n    //该方法使用泛型T\n    //并且参数和返回值都是T类型\n    public <T> T test2(T t) {\n        System.out.println(t);\n        return t;\n    }\n\n    //该方法使用泛型T,E\n    //参数包括T,E\n    public <T, E> void test3(T t, E e) {\n        System.out.println(t);\n        System.out.println(e);\n    }\n}\n")])])]),t("p",[e._v("​")]),e._v(" "),t("h3",{attrs:{id:"类中的泛型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类中的泛型方法"}},[e._v("#")]),e._v(" 类中的泛型方法")]),e._v(" "),t("p",[e._v("当然这并不是泛型方法的全部，泛型方法可以出现杂任何地方和任何场景中使用。但是有一种情况是非常特殊的，当泛型方法出现在泛型类中时，我们再通过一个例子看一下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('//注意泛型类先写类名再写泛型，泛型方法先写泛型再写方法名\n//类中声明的泛型在成员和方法中可用\nclass A <T, E>{\n    {\n        T t1 ;\n    }\n    A (T t){\n        this.t = t;\n    }\n    T t;\n\n    public void test1() {\n        System.out.println(this.t);\n    }\n\n    public void test2(T t,E e) {\n        System.out.println(t);\n        System.out.println(e);\n    }\n}\n@Test\npublic void run () {\n    A <Integer,String > a = new A<>(1);\n    a.test1();\n    a.test2(2,"ds");\n//        1\n//        2\n//        ds\n}\n\nstatic class B <T>{\n    T t;\n    public void go () {\n        System.out.println(t);\n    }\n}\n')])])]),t("h3",{attrs:{id:"泛型方法与可变参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法与可变参数"}},[e._v("#")]),e._v(" 泛型方法与可变参数")]),e._v(" "),t("p",[e._v("再看一个泛型方法和可变参数的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class 泛型和可变参数 {\n    @Test\n    public void test () {\n        printMsg("dasd",1,"dasd",2.0,false);\n        print("dasdas","dasdas", "aa");\n    }\n    //普通可变参数只能适配一种类型\n    public void print(String ... args) {\n        for(String t : args){\n            System.out.println(t);\n        }\n    }\n    //泛型的可变参数可以匹配所有类型的参数。。有点无敌\n    public <T> void printMsg( T... args){\n        for(T t : args){\n            System.out.println(t);\n        }\n    }\n        //打印结果：\n    //dasd\n    //1\n    //dasd\n    //2.0\n    //false\n\n}\n')])])]),t("h3",{attrs:{id:"静态方法与泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法与泛型"}},[e._v("#")]),e._v(" 静态方法与泛型")]),e._v(" "),t("p",[e._v("静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。")]),e._v(" "),t("p",[e._v("即：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class StaticGenerator<T> {\n    ....\n    ....\n    /**\n     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）\n     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。\n     * 如：public static void show(T t){..},此时编译器会提示错误信息：\n          "StaticGenerator cannot be refrenced from static context"\n     */\n    public static <T> void show(T t){\n\n    }\n}\n')])])]),t("h2",{attrs:{id:"泛型方法总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法总结"}},[e._v("#")]),e._v(" 泛型方法总结")]),e._v(" "),t("p",[e._v("泛型方法能使方法独立于类而产生变化，以下是一个基本的指导原则：")]),e._v(" "),t("p",[e._v("无论何时，如果你能做到，你就该尽量使用泛型方法。也就是说，如果使用泛型方法将整个类泛型化，那么就应该使用泛型方法。另外对于一个static的方法而已，无法访问泛型类型的参数。所以如果static方法要使用泛型能力，就必须使其成为泛型方法。")]),e._v(" "),t("h2",{attrs:{id:"泛型上下边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型上下边界"}},[e._v("#")]),e._v(" 泛型上下边界")]),e._v(" "),t("p",[e._v("在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。")]),e._v(" "),t("p",[e._v("为泛型添加上边界，即传入的类型实参必须是指定类型的子类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class 泛型通配符与边界 {\n    public void showKeyValue(Generic<Number> obj){\n        System.out.println("key value is " + obj.getKey());\n    }\n    @Test\n    public void main() {\n        Generic<Integer> gInteger = new Generic<Integer>(123);\n        Generic<Number> gNumber = new Generic<Number>(456);\n        showKeyValue(gNumber);\n        //泛型中的子类也无法作为父类引用传入\n//        showKeyValue(gInteger);\n    }\n    //直接使用？通配符可以接受任何类型作为泛型传入\n    public void showKeyValueYeah(Generic<?> obj) {\n        System.out.println(obj);\n    }\n    //只能传入number的子类或者number\n    public void showKeyValue1(Generic<? extends Number> obj){\n        System.out.println(obj);\n    }\n\n    //只能传入Integer的父类或者Integer\n    public void showKeyValue2(Generic<? super Integer> obj){\n        System.out.println(obj);\n    }\n\n    @Test\n    public void testup () {\n        //这一行代码编译器会提示错误，因为String类型并不是Number类型的子类\n        //showKeyValue1(generic1);\n        Generic<String> generic1 = new Generic<String>("11111");\n        Generic<Integer> generic2 = new Generic<Integer>(2222);\n        Generic<Float> generic3 = new Generic<Float>(2.4f);\n        Generic<Double> generic4 = new Generic<Double>(2.56);\n\n        showKeyValue1(generic2);\n        showKeyValue1(generic3);\n        showKeyValue1(generic4);\n    }\n\n    @Test\n    public void testdown () {\n\n        Generic<String> generic1 = new Generic<String>("11111");\n        Generic<Integer> generic2 = new Generic<Integer>(2222);\n        Generic<Number> generic3 = new Generic<Number>(2);\n//        showKeyValue2(generic1);本行报错，因为String并不是Integer的父类\n        showKeyValue2(generic2);\n        showKeyValue2(generic3);\n    }\n}\n')])])]),t("p",[e._v("== 关于泛型数组要提一下 ==")]),e._v(" "),t("p",[e._v("看到了很多文章中都会提起泛型数组，经过查看sun的说明文档，在java中是”不能创建一个确切的泛型类型的数组”的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("也就是说下面的这个例子是不可以的：\n\nList<String>[] ls = new ArrayList<String>[10];  \n\n而使用通配符创建泛型数组是可以的，如下面这个例子：\n\nList<?>[] ls = new ArrayList<?>[10];  \n\n这样也是可以的：\n\nList<String>[] ls = new ArrayList[10];\n")])])]),t("p",[e._v("下面使用Sun的一篇文档的一个例子来说明这个问题：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("List<String>[] lsa = new List<String>[10]; // Not really allowed.    \nObject o = lsa;    \nObject[] oa = (Object[]) o;    \nList<Integer> li = new ArrayList<Integer>();    \nli.add(new Integer(3));    \noa[1] = li; // Unsound, but passes run time store check    \nString s = lsa[1].get(0); // Run-time error: ClassCastException.\n")])])]),t("blockquote",[t("p",[e._v("这种情况下，由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的，所以可以给oa[1]赋上一个ArrayList而不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。")]),e._v(" "),t("p",[e._v("而对泛型数组的声明进行限制，对于这样的情况，可以在编译期提示代码有类型安全问题，比没有任何提示要强很多。\n下面采用通配符的方式是被允许的:数组的类型不可以是类型变量，除非是采用通配符的方式，因为对于通配符的方式，最后取出数据是要做显式的类型转换的。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("List<?>[] lsa = new List<?>[10]; // OK, array of unbounded wildcard type.    \nObject o = lsa;    \nObject[] oa = (Object[]) o;    \nList<Integer> li = new ArrayList<Integer>();    \nli.add(new Integer(3));    \noa[1] = li; // Correct.    \nInteger i = (Integer) lsa[1].get(0); // OK \n")])])]),t("p",[e._v("最后")]),e._v(" "),t("p",[e._v("本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。")]),e._v(" "),t("h2",{attrs:{id:"泛型常见面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型常见面试题"}},[e._v("#")]),e._v(" 泛型常见面试题")]),e._v(" "),t("ol",[t("li",[e._v("Java中的泛型是什么 ? 使用泛型的好处是什么?")])]),e._v(" "),t("p",[e._v("这是在各种Java泛型面试中，一开场你就会被问到的问题中的一个，主要集中在初级和中级面试中。那些拥有Java1.4或更早版本的开发背景的人 都知道，在集合中存储对象并在使用前进行类型转换是多么的不方便。泛型防止了那种情况的发生。它提供了编译期的类型安全，确保你只能把正确类型的对象放入 集合中，避免了在运行时出现ClassCastException。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Java的泛型是如何工作的 ? 什么是类型擦除 ?")])]),e._v(" "),t("p",[e._v("这是一道更好的泛型面试题。泛型是通过类型擦除来实现的，编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。例如 List"),t("String",[e._v("在运行时仅用一个List来表示。这样做的目的，是确保能和Java 5之前的版本开发二进制类库进行兼容。你无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型。根据你对这个泛型问题的回答情况，你会 得到一些后续提问，比如为什么泛型是由类型擦除来实现的或者给你展示一些会导致编译器出错的错误泛型代码。请阅读我的Java中泛型是如何工作的来了解更 多信息。")])],1),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("什么是泛型中的限定通配符和非限定通配符 ?")])]),e._v(" "),t("p",[e._v("这是另一个非常流行的Java泛型面试题。限定通配符对类型进行了限制。有两种限定通配符，一种是<? extends T>它通过确保类型必须是T的子类来设定类型的上界，另一种是<? super T>它通过确保类型必须是T的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。另一方面<?>表 示了非限定通配符，因为<?>可以用任意类型来替代。更多信息请参阅我的文章泛型中限定通配符和非限定通配符之间的区别。")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("List<? extends T>和List <? super T>之间有什么区别 ?")])]),e._v(" "),t("p",[e._v("这和上一个面试题有联系，有时面试官会用这个问题来评估你对泛型的理解，而不是直接问你什么是限定通配符和非限定通配符。这两个List的声明都是 限定通配符的例子，List<? extends T>可以接受任何继承自T的类型的List，而List<? super T>可以接受任何T的父类构成的List。例如List<? extends Number>可以接受List"),t("Integer",[e._v("或List"),t("Float",[e._v("。在本段出现的连接中可以找到更多信息。")])],1)],1),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[e._v("如何编写一个泛型方法，让它能接受泛型参数并返回泛型类型?")])]),e._v(" "),t("p",[e._v("编写泛型方法并不困难，你需要用泛型类型来替代原始类型，比如使用T, E or K,V等被广泛认可的类型占位符。泛型方法的例子请参阅Java集合类框架。最简单的情况下，一个泛型方法可能会像这样:")]),e._v(" "),t("p",[e._v("public V put(K key, V value) {")]),e._v(" "),t("p",[e._v("return cache.put(key, value);")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[e._v("Java中如何使用泛型编写带有参数的类?")])]),e._v(" "),t("p",[e._v("这是上一道面试题的延伸。面试官可能会要求你用泛型编写一个类型安全的类，而不是编写一个泛型方法。关键仍然是使用泛型类型来代替原始类型，而且要使用JDK中采用的标准占位符。")]),e._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[e._v("编写一段泛型程序来实现LRU缓存?")])]),e._v(" "),t("p",[e._v("对于喜欢Java编程的人来说这相当于是一次练习。给你个提示，LinkedHashMap可以用来实现固定大小的LRU缓存，当LRU缓存已经满 了的时候，它会把最老的键值对移出缓存。LinkedHashMap提供了一个称为removeEldestEntry()的方法，该方法会被put() 和putAll()调用来删除最老的键值对。当然，如果你已经编写了一个可运行的JUnit测试，你也可以随意编写你自己的实现代码。")]),e._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[e._v("你可以把List"),t("String",[e._v("传递给一个接受List"),t("Object",[e._v("参数的方法吗？")])],1)],1)]),e._v(" "),t("p",[e._v("对任何一个不太熟悉泛型的人来说，这个Java泛型题目看起来令人疑惑，因为乍看起来String是一种Object，所以 List"),t("String",[e._v("应当可以用在需要List"),t("Object",[e._v("的地方，但是事实并非如此。真这样做的话会导致编译错误。如 果你再深一步考虑，你会发现Java这样做是有意义的，因为List"),t("Object",[e._v("可以存储任何类型的对象包括String, Integer等等，而List"),t("String",[e._v("却只能用来存储Strings。")])],1)],1)],1)],1),e._v(" "),t("p",[e._v("List"),t("Object",[e._v(" objectList;")])],1),e._v(" "),t("p",[e._v("List"),t("String",[e._v(" stringList;")])],1),e._v(" "),t("p",[e._v("objectList = stringList; //compilation error incompatible types")]),e._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[e._v("Array中可以用泛型吗?")])]),e._v(" "),t("p",[e._v("这可能是Java泛型面试题中最简单的一个了，当然前提是你要知道Array事实上并不支持泛型，这也是为什么Joshua Bloch在Effective Java一书中建议使用List来代替Array，因为List可以提供编译期的类型安全保证，而Array却不能。")]),e._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[e._v("如何阻止Java中的类型未检查的警告?")])]),e._v(" "),t("p",[e._v("如果你把泛型和原始类型混合起来使用，例如下列代码，Java 5的javac编译器会产生类型未检查的警告，例如")]),e._v(" "),t("p",[e._v("List"),t("String",[e._v(" rawList = new ArrayList()")])],1),e._v(" "),t("p",[e._v("注意: Hello.java使用了未检查或称为不安全的操作;")]),e._v(" "),t("p",[e._v("这种警告可以使用@SuppressWarnings(“unchecked”)注解来屏蔽。")]),e._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),t("p",[e._v("https://www.cnblogs.com/huajiezh/p/6411123.html\nhttps://www.cnblogs.com/jpfss/p/9929045.html\nhttps://www.cnblogs.com/dengchengchao/p/9717097.html\nhttps://www.cnblogs.com/cat520/p/9353291.html\nhttps://www.cnblogs.com/coprince/p/8603492.html")]),e._v(" "),t("h2",{attrs:{id:"微信公众号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[e._v("#")]),e._v(" 微信公众号")]),e._v(" "),t("h3",{attrs:{id:"java技术江湖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[e._v("#")]),e._v(" Java技术江湖")]),e._v(" "),t("p",[e._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),e._v(" "),t("p",[t("strong",[e._v("Java工程师必备学习资源:")]),e._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),t("strong",[e._v("“Java”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),e._v(" "),t("h3",{attrs:{id:"个人公众号-黄小斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[e._v("#")]),e._v(" 个人公众号：黄小斜")]),e._v(" "),t("p",[e._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),e._v(" "),t("p",[t("strong",[e._v("程序员3T技术学习资源：")]),e._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),t("strong",[e._v("“资料”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);n.default=r.exports}}]);