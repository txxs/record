(window.webpackJsonp=window.webpackJsonp||[]).push([[1364],{1758:function(a,t,s){"use strict";s.r(t);var r=s(13),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("请谈谈你对 OOM 的认识？")]),a._v(" "),s("p",[a._v("GC 垃圾回收算法和垃圾收集器的关系？分别是什么请你谈谈？")]),a._v(" "),s("p",[a._v("怎么查看服务器默认的垃圾收集器是哪个？生产上如何配置垃圾收集器的？谈谈你对垃圾收集器的理解？")]),a._v(" "),s("p",[a._v("G1 垃圾收集器？")]),a._v(" "),s("p",[a._v("生产环境服务器变慢，诊断思路和性能评估谈谈？")]),a._v(" "),s("p",[a._v("假如生产环境出现 CPU 占用过高，请谈谈你的分析思路和定位")]),a._v(" "),s("h2",{attrs:{id:"类加载子系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统"}},[a._v("#")]),a._v(" 类加载子系统")]),a._v(" "),s("h3",{attrs:{id:"类加载机制-类加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制-类加载过程"}},[a._v("#")]),a._v(" 类加载机制？类加载过程")]),a._v(" "),s("p",[a._v("Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的加载机制")]),a._v(" "),s("p",[a._v("类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括："),s("strong",[a._v("加载、验证、准备、解析、初始化、使用和卸载")]),a._v("七个阶段。(验证、准备和解析又统称为连接，为了支持Java语言的"),s("strong",[a._v("运行时绑定")]),a._v("，所以"),s("strong",[a._v("解析阶段也可以是在初始化之后进行的")]),a._v("。以上顺序都只是说开始的顺序，实际过程中是交叉的混合式进行的，加载过程中可能就已经开始验证了)")]),a._v(" "),s("h3",{attrs:{id:"什么是类加载器-类加载器有哪些-这些类加载器都加载哪些文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是类加载器-类加载器有哪些-这些类加载器都加载哪些文件"}},[a._v("#")]),a._v(" 什么是类加载器，类加载器有哪些？这些类加载器都加载哪些文件？")]),a._v(" "),s("h4",{attrs:{id:"启动类加载器-引导类加载器-bootstrap-classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器-引导类加载器-bootstrap-classloader"}},[a._v("#")]),a._v(" 启动类加载器（引导类加载器，Bootstrap ClassLoader）")]),a._v(" "),s("ul",[s("li",[a._v("这个类加载使用 C/C++ 语言实现，嵌套在 JVM 内部")]),a._v(" "),s("li",[a._v("它用来加载 Java 的核心库（"),s("code",[a._v("JAVA_HOME/jre/lib/rt.jar")]),a._v("、"),s("code",[a._v("resource.jar")]),a._v("或"),s("code",[a._v("sun.boot.class.path")]),a._v("路径下的内容），用于提供 JVM 自身需要的类")]),a._v(" "),s("li",[a._v("并不继承自 "),s("code",[a._v("java.lang.ClassLoader")]),a._v("，没有父加载器")]),a._v(" "),s("li",[a._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器")]),a._v(" "),s("li",[a._v("出于安全考虑，Bootstrap 启动类加载器只加载名为java、Javax、sun等开头的类")])]),a._v(" "),s("h4",{attrs:{id:"扩展类加载器-extension-classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器-extension-classloader"}},[a._v("#")]),a._v(" 扩展类加载器（Extension ClassLoader）")]),a._v(" "),s("ul",[s("li",[a._v("Java 语言编写，由"),s("code",[a._v("sun.misc.Launcher$ExtClassLoader")]),a._v("实现")]),a._v(" "),s("li",[a._v("派生于 ClassLoader")]),a._v(" "),s("li",[a._v("父类加载器为启动类加载器")]),a._v(" "),s("li",[a._v("从 "),s("code",[a._v("java.ext.dirs")]),a._v(" 系统属性所指定的目录中加载类库，或从 JDK 的安装目录的"),s("code",[a._v("jre/lib/ext")]),a._v(" 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载")])]),a._v(" "),s("h4",{attrs:{id:"应用程序类加载器-也叫系统类加载器-appclassloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器-也叫系统类加载器-appclassloader"}},[a._v("#")]),a._v(" 应用程序类加载器（也叫系统类加载器，AppClassLoader）")]),a._v(" "),s("ul",[s("li",[a._v("Java 语言编写，由 "),s("code",[a._v("sun.misc.Lanucher$AppClassLoader")]),a._v(" 实现")]),a._v(" "),s("li",[a._v("派生于 ClassLoader")]),a._v(" "),s("li",[a._v("父类加载器为扩展类加载器")]),a._v(" "),s("li",[a._v("它负责加载环境变量"),s("code",[a._v("classpath")]),a._v("或系统属性"),s("code",[a._v("java.class.path")]),a._v(" 指定路径下的类库")]),a._v(" "),s("li",[a._v("该类加载是"),s("strong",[a._v("程序中默认的类加载器")]),a._v("，一般来说，Java 应用的类都是由它来完成加载的")]),a._v(" "),s("li",[a._v("通过 "),s("code",[a._v("ClassLoader#getSystemClassLoader()")]),a._v(" 方法可以获取到该类加载器")])]),a._v(" "),s("h4",{attrs:{id:"用户自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义类加载器"}},[a._v("#")]),a._v(" 用户自定义类加载器")]),a._v(" "),s("p",[a._v("在 Java 的日常应用程序开发中，类的加载几乎是由 3 种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式")]),a._v(" "),s("h5",{attrs:{id:"为什么要自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要自定义类加载器"}},[a._v("#")]),a._v(" 为什么要自定义类加载器？")]),a._v(" "),s("ul",[s("li",[a._v("隔离加载类")]),a._v(" "),s("li",[a._v("修改类加载的方式")]),a._v(" "),s("li",[a._v("扩展加载源（可以从数据库、云端等指定来源加载类）")]),a._v(" "),s("li",[a._v("防止源码泄露（Java 代码容易被反编译，如果加密后，自定义加载器加载类的时候就可以先解密，再加载）")])]),a._v(" "),s("h3",{attrs:{id:"多线程的情况下-类的加载为什么不会出现重复加载的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程的情况下-类的加载为什么不会出现重复加载的情况"}},[a._v("#")]),a._v(" 多线程的情况下，类的加载为什么不会出现重复加载的情况？")]),a._v(" "),s("p",[a._v("双亲委派")]),a._v(" "),s("h3",{attrs:{id:"什么是双亲委派机制-它有啥优势-可以打破这种机制吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是双亲委派机制-它有啥优势-可以打破这种机制吗"}},[a._v("#")]),a._v(" 什么是双亲委派机制？它有啥优势？可以打破这种机制吗？")]),a._v(" "),s("p",[a._v("Java 虚拟机对 class 文件采用的是"),s("strong",[a._v("按需加载")]),a._v("的方式，也就是说当需要使用该类的时候才会将它的 class 文件加载到内存生成 class 对象。而且加载某个类的 class 文件时，Java 虚拟机采用的是双亲委派模式，即把请求交给父类处理，它是一种任务委派模式。")]),a._v(" "),s("p",[s("strong",[a._v("工作过程")])]),a._v(" "),s("ul",[s("li",[a._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；")]),a._v(" "),s("li",[a._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；")]),a._v(" "),s("li",[a._v("如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式")])]),a._v(" "),s("p",[s("strong",[a._v("优势")])]),a._v(" "),s("ul",[s("li",[a._v("避免类的重复加载，JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就属于两个不同的类（比如，Java中的Object类，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，如果不采用双亲委派模型，由各个类加载器自己去加载的话，系统中会存在多种不同的 Object 类）")]),a._v(" "),s("li",[a._v("保护程序安全，防止核心 API 被随意篡改，避免用户自己编写的类动态替换 Java 的一些核心类，比如我们自定义类："),s("code",[a._v("java.lang.String")])])]),a._v(" "),s("h3",{attrs:{id:"自定义了一个string-那么会加载哪个string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义了一个string-那么会加载哪个string"}},[a._v("#")]),a._v(" 自定义了一个String，那么会加载哪个String？")]),a._v(" "),s("p",[a._v("针对java.*开头的类，jvm的实现中已经保证了必须由bootstrp来加载")]),a._v(" "),s("h3",{attrs:{id:"简单说说你了解的类加载器-可以打破双亲委派么-怎么打破。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单说说你了解的类加载器-可以打破双亲委派么-怎么打破。"}},[a._v("#")]),a._v(" 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。")]),a._v(" "),s("p",[s("strong",[a._v("思路：")]),a._v(" 先说明一下什么是类加载器，可以给面试官画个图，再说一下类加载器存在的意义，说一下双亲委派模型，最后阐述怎么打破双亲委派模型。")]),a._v(" "),s("p",[s("strong",[a._v("我的答案：")])]),a._v(" "),s("h4",{attrs:{id:"_1-什么是类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是类加载器"}},[a._v("#")]),a._v(" 1) 什么是类加载器？")]),a._v(" "),s("p",[s("strong",[a._v("类加载器")]),a._v(" 就是根据指定全限定名称将class文件加载到JVM内存，转为Class对象。")]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("启动类加载器（Bootstrap  ClassLoader）：由C++语言实现（针对HotSpot）,负责将存放在<JAVA_HOME>\\lib目录或-Xbootclasspath参数指定的路径中的类库加载到内存中。")]),a._v(" "),s("li",[a._v("其他类加载器：由Java语言实现，继承自抽象类ClassLoader。如：")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("扩展类加载器（Extension ClassLoader）：负责加载<JAVA_HOME>\\lib\\ext目录或java.ext.dirs系统变量指定的路径中的所有类库。")]),a._v(" "),s("li",[a._v("应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。")])])])]),a._v(" "),s("h4",{attrs:{id:"_2-双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-双亲委派模型"}},[a._v("#")]),a._v(" 2）双亲委派模型")]),a._v(" "),s("p",[s("strong",[a._v("双亲委派模型工作过程是：")])]),a._v(" "),s("blockquote",[s("p",[a._v("如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。")])]),a._v(" "),s("p",[a._v("双亲委派模型图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/23/16c1c54cf4ad886b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),a._v(" "),s("h4",{attrs:{id:"_3-为什么需要双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么需要双亲委派模型"}},[a._v("#")]),a._v(" 3）为什么需要双亲委派模型？")]),a._v(" "),s("p",[a._v("在这里，先想一下，如果没有双亲委派，那么用户是不是可以"),s("strong",[a._v("自己定义一个java.lang.Object的同名类")]),a._v("，"),s("strong",[a._v("java.lang.String的同名类")]),a._v("，并把它放到ClassPath中,那么"),s("strong",[a._v("类之间的比较结果及类的唯一性将无法保证")]),a._v("，因此，为什么需要双亲委派模型？"),s("strong",[a._v("防止内存中出现多份同样的字节码")])]),a._v(" "),s("h4",{attrs:{id:"_4-怎么打破双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-怎么打破双亲委派模型"}},[a._v("#")]),a._v(" 4）怎么打破双亲委派模型？")]),a._v(" "),s("p",[a._v("打破双亲委派机制则不仅"),s("strong",[a._v("要继承ClassLoader")]),a._v("类，还要"),s("strong",[a._v("重写loadClass和findClass")]),a._v("方法。")]),a._v(" "),s("hr"),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[a._v("#")]),a._v(" 内存管理")]),a._v(" "),s("h3",{attrs:{id:"java内存结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java内存结构"}},[a._v("#")]),a._v(" Java内存结构？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/8/16bd08c33a3d751b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),a._v(" "),s("p",[a._v("方法区和堆是所有线程共享的内存区域；而Java栈、本地方法栈和程序计数器是线程私有的内存区域。")]),a._v(" "),s("ul",[s("li",[a._v("Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),a._v(" "),s("li",[a._v("方法区用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),a._v(" "),s("li",[a._v("程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。")]),a._v(" "),s("li",[a._v("JVM栈（JVM Stacks）,与程序计数器一样，也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。")]),a._v(" "),s("li",[a._v("本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。")])]),a._v(" "),s("h3",{attrs:{id:"内存泄露和内存溢出的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露和内存溢出的区别"}},[a._v("#")]),a._v(" 内存泄露和内存溢出的区别？")]),a._v(" "),s("p",[a._v("内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。")]),a._v(" "),s("p",[a._v("内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。")]),a._v(" "),s("p",[a._v("memory leak会最终会导致out of memory！")]),a._v(" "),s("h3",{attrs:{id:"内存泄漏时-如何定位问题代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏时-如何定位问题代码"}},[a._v("#")]),a._v(" 内存泄漏时，如何定位问题代码")]),a._v(" "),s("p",[a._v("Java 的内存泄漏问题比较难以定位，下面针对一些常见的内存泄漏场景做介绍：")]),a._v(" "),s("ol",[s("li",[a._v("持续在堆上创建对象而不释放。例如，持续不断的往一个列表中添加对象，而不对列表清空。这种问题，通常可以给程序运行时添加 JVM 参数"),s("code",[a._v("-Xmx")]),a._v(" 指定一个较小的运行堆大小，这样可以比较容易的发现这类问题。")]),a._v(" "),s("li",[a._v("不正确的使用静态对象。因为 static 关键字修饰的对象的生命周期与 Java 程序的运行周期是一致的，所以垃圾回收机制无法回收静态变量引用的对象。所以，发生内存泄漏问题时，我们要着重分析所有的静态变量。")]),a._v(" "),s("li",[a._v("对大 String 对象调用 String.intern()方法，该方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。而在 jdk6 之前，字符串常量存储在 "),s("code",[a._v("PermGen")]),a._v(" 区的，但是默认情况下 "),s("code",[a._v("PermGen")]),a._v(" 区比较小，所以较大的字符串调用此方法，很容易会触发内存溢出问题。")]),a._v(" "),s("li",[a._v("打开的输入流、连接没有争取关闭。由于这些资源需要对应的内存维护状态，因此不关闭会导致这些内存无法释放。")])]),a._v(" "),s("p",[a._v("Java的内存泄漏定位一般是比较困难的，需要使用到很多的实践经验和调试技巧。下面是一些比较通用的方法：")]),a._v(" "),s("ul",[s("li",[a._v("可以添加-verbose:gc启动参数来输出Java程序的GC日志。通过分析这些日志，可以知道每次GC后内存是否有增加，如果在缓慢的增加的那，那就有可能是内存泄漏了（当然也需要结合当前的负载）。如果无法添加这个启动参数，也可以使用jstat来查看实时的gc日志。如果条件运行的化可以考虑使用jvisualvm图形化的观察，不过要是线上的化一般没这个条件。")]),a._v(" "),s("li",[a._v("当通过dump出堆内存，然后使用jvisualvm查看分析，一般能够分析出内存中大量存在的对象以及它的类型等。我们可以通过添加-XX:+HeapDumpOnOutOfMemoryError启动参数来自动保存发生OOM时的内存dump。")]),a._v(" "),s("li",[a._v("当确定出大对象，或者大量存在的实例类型以后，我们就需要去review代码，从实际的代码入手来定位到真正发生泄漏的代码。")])]),a._v(" "),s("h3",{attrs:{id:"什么情况下会发生栈内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会发生栈内存溢出"}},[a._v("#")]),a._v(" 什么情况下会发生栈内存溢出?")]),a._v(" "),s("ul",[s("li",[a._v("栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型")]),a._v(" "),s("li",[a._v("如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果。")]),a._v(" "),s("li",[a._v("如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一个OutOfMemory 异常。(线程启动过多)")]),a._v(" "),s("li",[a._v("参数 -Xss 去调整JVM栈的大小")])]),a._v(" "),s("h3",{attrs:{id:"jvm内存为什么要分成新生代-老年代-持久代。新生代中为什么要分为eden和survivor。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存为什么要分成新生代-老年代-持久代。新生代中为什么要分为eden和survivor。"}},[a._v("#")]),a._v(" JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。")]),a._v(" "),s("h4",{attrs:{id:"_1-共享内存区划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-共享内存区划分"}},[a._v("#")]),a._v(" 1）共享内存区划分")]),a._v(" "),s("ul",[s("li",[a._v("共享内存区 = 持久带 + 堆")]),a._v(" "),s("li",[a._v("持久带 = 方法区 + 其他")]),a._v(" "),s("li",[a._v("Java堆 = 老年代 + 新生代")]),a._v(" "),s("li",[a._v("新生代 = Eden + S0 + S1")])]),a._v(" "),s("h4",{attrs:{id:"_2-一些参数的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-一些参数的配置"}},[a._v("#")]),a._v(" 2）一些参数的配置")]),a._v(" "),s("ul",[s("li",[a._v("默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ，可以通过参数 –XX:NewRatio 配置。")]),a._v(" "),s("li",[a._v("默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定)")]),a._v(" "),s("li",[a._v("Survivor区中的对象被复制次数为15(对应虚拟机参数 -XX:+MaxTenuringThreshold)")])]),a._v(" "),s("h4",{attrs:{id:"_3-为什么要分为eden和survivor-为什么要设置两个survivor区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要分为eden和survivor-为什么要设置两个survivor区"}},[a._v("#")]),a._v(" 3)为什么要分为Eden和Survivor?为什么要设置两个Survivor区？")]),a._v(" "),s("ul",[s("li",[a._v("如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代。老年代很快被填满，触发Major GC.老年代的内存空间远大于新生代，进行一次Full GC消耗的时间比Minor GC长得多,所以需要分为Eden和Survivor。")]),a._v(" "),s("li",[a._v("Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。")]),a._v(" "),s("li",[a._v("设置两个Survivor区最大的好处就是解决了碎片化，刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续的内存空间，避免了碎片化的发生）")])]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),s("h3",{attrs:{id:"_1-jvm-垃圾回收的时候如何确定垃圾-你知道什么是-gc-roots-吗-gc-roots-如何确定-那些对象可以作为-gc-roots"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm-垃圾回收的时候如何确定垃圾-你知道什么是-gc-roots-吗-gc-roots-如何确定-那些对象可以作为-gc-roots"}},[a._v("#")]),a._v(" 1. JVM 垃圾回收的时候如何确定垃圾？ 你知道什么是 GC Roots 吗？GC Roots 如何确定，那些对象可以作为 GC Roots?")]),a._v(" "),s("p",[a._v("内存中不再使用的空间就是垃圾")]),a._v(" "),s("p",[a._v("引用计数法和可达性分析")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdeam8z27oj31e60mudzv.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdeaofj7tsj31cs0nstsz.jpg",alt:""}})]),a._v(" "),s("p",[a._v("哪些对象可以作为 GC Root 呢，有以下几类")]),a._v(" "),s("ul",[s("li",[a._v("虚拟机栈（栈帧中的本地变量表）中引用的对象")]),a._v(" "),s("li",[a._v("方法区中类静态属性引用的对象")]),a._v(" "),s("li",[a._v("方法区中常量引用的对象")]),a._v(" "),s("li",[a._v("本地方法栈中 JNI（即一般说的 Native 方法）引用的对象")])]),a._v(" "),s("h3",{attrs:{id:"jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代"}},[a._v("#")]),a._v(" JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代")]),a._v(" "),s("p",[s("strong",[a._v("思路：")]),a._v(" 先描述一下Java堆内存划分，再解释Minor GC，Major GC，full GC，描述它们之间转化流程。")]),a._v(" "),s("p",[s("strong",[a._v("我的答案：")])]),a._v(" "),s("ul",[s("li",[a._v("Java堆 = 老年代 + 新生代")]),a._v(" "),s("li",[a._v("新生代 = Eden + S0 + S1")]),a._v(" "),s("li",[a._v("当 Eden 区的空间满了， Java虚拟机会触发一次 Minor GC，以收集新生代的垃圾，存活下来的对象，则会转移到 Survivor区。")]),a._v(" "),s("li",[s("strong",[a._v("大对象")]),a._v("（需要大量连续内存空间的Java对象，如那种很长的字符串）"),s("strong",[a._v("直接进入老年态")]),a._v("；")]),a._v(" "),s("li",[a._v("如果对象在Eden出生，并经过第一次Minor GC后仍然存活，并且被Survivor容纳的话，年龄设为1，每熬过一次Minor GC，年龄+1，"),s("strong",[a._v("若年龄超过一定限制（15），则被晋升到老年态")]),a._v("。即"),s("strong",[a._v("长期存活的对象进入老年态")]),a._v("。")]),a._v(" "),s("li",[a._v("老年代满了而"),s("strong",[a._v("无法容纳更多的对象")]),a._v("，Minor GC 之后通常就会进行Full GC，Full GC  清理整个内存堆 – "),s("strong",[a._v("包括年轻代和年老代")]),a._v("。")]),a._v(" "),s("li",[a._v("Major GC "),s("strong",[a._v("发生在老年代的GC")]),a._v("，"),s("strong",[a._v("清理老年区")]),a._v("，经常会伴随至少一次Minor GC，"),s("strong",[a._v("比Minor GC慢10倍以上")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"你知道哪几种垃圾收集器-各自的优缺点-重点讲下cms和g1-包括原理-流程-优缺点。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你知道哪几种垃圾收集器-各自的优缺点-重点讲下cms和g1-包括原理-流程-优缺点。"}},[a._v("#")]),a._v(" 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。")]),a._v(" "),s("p",[s("strong",[a._v("思路：")]),a._v(" 一定要记住典型的垃圾收集器，尤其cms和G1，它们的原理与区别，涉及的垃圾回收算法。")]),a._v(" "),s("p",[s("strong",[a._v("我的答案：")])]),a._v(" "),s("h4",{attrs:{id:"_1-几种垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-几种垃圾收集器"}},[a._v("#")]),a._v(" 1）几种垃圾收集器：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("Serial收集器：")]),a._v(" 单线程的收集器，收集垃圾时，必须stop the world，使用复制算法。")]),a._v(" "),s("li",[s("strong",[a._v("ParNew收集器：")]),a._v("  Serial收集器的多线程版本，也需要stop the world，复制算法。")]),a._v(" "),s("li",[s("strong",[a._v("Parallel Scavenge收集器：")]),a._v(" 新生代收集器，复制算法的收集器，并发的多线程收集器，目标是达到一个可控的吞吐量。如果虚拟机总共运行100分钟，其中垃圾花掉1分钟，吞吐量就是99%。")]),a._v(" "),s("li",[s("strong",[a._v("Serial Old收集器：")]),a._v(" 是Serial收集器的老年代版本，单线程收集器，使用标记整理算法。")]),a._v(" "),s("li",[s("strong",[a._v("Parallel Old收集器：")]),a._v(" 是Parallel Scavenge收集器的老年代版本，使用多线程，标记-整理算法。")]),a._v(" "),s("li",[s("strong",[a._v("CMS(Concurrent Mark Sweep) 收集器：")]),a._v(" 是一种以获得最短回收停顿时间为目标的收集器，"),s("strong",[a._v("标记清除算法，运作过程：初始标记，并发标记，重新标记，并发清除")]),a._v("，收集结束会产生大量空间碎片。")]),a._v(" "),s("li",[s("strong",[a._v("G1收集器：")]),a._v(" 标记整理算法实现，"),s("strong",[a._v("运作流程主要包括以下：初始标记，并发标记，最终标记，筛选标记")]),a._v("。不会产生空间碎片，可以精确地控制停顿。")])]),a._v(" "),s("h4",{attrs:{id:"_2-cms收集器和g1收集器的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cms收集器和g1收集器的区别"}},[a._v("#")]),a._v(" 2）CMS收集器和G1收集器的区别：")]),a._v(" "),s("ul",[s("li",[a._v("CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用；")]),a._v(" "),s("li",[a._v("G1收集器收集范围是老年代和新生代，不需要结合其他收集器使用；")]),a._v(" "),s("li",[a._v("CMS收集器以最小的停顿时间为目标的收集器；")]),a._v(" "),s("li",[a._v("G1收集器可预测垃圾回收的停顿时间")]),a._v(" "),s("li",[a._v("CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片")]),a._v(" "),s("li",[a._v("G1收集器使用的是“标记-整理”算法，进行了空间整合，降低了内存空间碎片。")])]),a._v(" "),s("h3",{attrs:{id:"system-gc-和-runtime-gc-会做什么事情"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-gc-和-runtime-gc-会做什么事情"}},[a._v("#")]),a._v(" System.gc() 和 Runtime.gc() 会做什么事情")]),a._v(" "),s("p",[a._v("java.lang.System.gc()只是java.lang.Runtime.getRuntime().gc()的简写，两者的行为没有任何不同")]),a._v(" "),s("p",[a._v("其实基本没什么机会用得到这个命令, 因为这个命令只是建议JVM安排GC运行, 还有可能完全被拒绝。 GC本身是会周期性的自动运行的,由JVM决定运行的时机,而且现在的版本有多种更智能的模式可以选择,还会根据运行的机器自动去做选择,就算真的有性能上的需求,也应该去对GC的运行机制进行微调,而不是通过使用这个命令来实现性能的优化")]),a._v(" "),s("h3",{attrs:{id:"gc引用计数法的缺点-除了循环引用-说一到两个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc引用计数法的缺点-除了循环引用-说一到两个"}},[a._v("#")]),a._v(" gc引用计数法的缺点，除了循环引用，说一到两个")]),a._v(" "),s("ol",[s("li",[a._v("在每次赋值操作的时候都要做相当大的计算，尤其这里面还有递归调用。这是比较麻烦的。")]),a._v(" "),s("li",[a._v("一个致命缺陷是循环引用，就是， objA引用了objB，objB也引用了objA，但是除此之外，再没有其他的地方引用这两个对象了，这两个对象的引用计数就都是1。这种情况下，这两个对象是不能被回收的。如下图所示：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gjlepcbw2kj30sl0dz74r.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("这是引用计数法的一个致命缺陷。")]),a._v(" "),s("h3",{attrs:{id:"说说你知道的几种主要的jvm参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说你知道的几种主要的jvm参数"}},[a._v("#")]),a._v(" 说说你知道的几种主要的JVM参数")]),a._v(" "),s("p",[s("strong",[a._v("思路：")]),a._v(" 可以说一下堆栈配置相关的，垃圾收集器相关的，还有一下辅助信息相关的。")]),a._v(" "),s("p",[s("strong",[a._v("我的答案：")])]),a._v(" "),s("h4",{attrs:{id:"_1-堆栈配置相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-堆栈配置相关"}},[a._v("#")]),a._v(" 1）堆栈配置相关")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -Xmx3550m -Xms3550m -Xmn2g -Xss128k \n-XX:MaxPermSize=16m -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxTenuringThreshold=0\n复制代码\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[s("strong",[a._v("-Xmx3550m：")]),a._v(" 最大堆大小为3550m。")]),a._v(" "),s("p",[s("strong",[a._v("-Xms3550m：")]),a._v(" 设置初始堆大小为3550m。")]),a._v(" "),s("p",[s("strong",[a._v("-Xmn2g：")]),a._v(" 设置年轻代大小为2g。")]),a._v(" "),s("p",[s("strong",[a._v("-Xss128k：")]),a._v(" 每个线程的堆栈大小为128k。")]),a._v(" "),s("p",[s("strong",[a._v("-XX:MaxPermSize：")]),a._v("  设置持久代大小为16m")]),a._v(" "),s("p",[s("strong",[a._v("-XX:NewRatio=4:")]),a._v(" 设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。")]),a._v(" "),s("p",[s("strong",[a._v("-XX:SurvivorRatio=4：")]),a._v(" 设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6")]),a._v(" "),s("p",[s("strong",[a._v("-XX:MaxTenuringThreshold=0：")]),a._v(" 设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。")]),a._v(" "),s("h4",{attrs:{id:"_2-垃圾收集器相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-垃圾收集器相关"}},[a._v("#")]),a._v(" 2）垃圾收集器相关")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-XX:+UseParallelGC\n-XX:ParallelGCThreads=20\n-XX:+UseConcMarkSweepGC \n-XX:CMSFullGCsBeforeCompaction=5\n-XX:+UseCMSCompactAtFullCollection：\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[s("strong",[a._v("-XX:+UseParallelGC：")]),a._v(" 选择垃圾收集器为并行收集器。")]),a._v(" "),s("p",[s("strong",[a._v("-XX:ParallelGCThreads=20：")]),a._v(" 配置并行收集器的线程数")]),a._v(" "),s("p",[s("strong",[a._v("-XX:+UseConcMarkSweepGC：")]),a._v(" 设置年老代为并发收集。")]),a._v(" "),s("p",[s("strong",[a._v("-XX:CMSFullGCsBeforeCompaction")]),a._v("：由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。")]),a._v(" "),s("p",[s("strong",[a._v("-XX:+UseCMSCompactAtFullCollection：")]),a._v(" 打开对年老代的压缩。可能会影响性能，但是可以消除碎片")]),a._v(" "),s("h4",{attrs:{id:"_3-辅助信息相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-辅助信息相关"}},[a._v("#")]),a._v(" 3）辅助信息相关")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-XX:+PrintGC\n-XX:+PrintGCDetails\n复制代码\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[s("strong",[a._v("-XX:+PrintGC 输出形式:")])]),a._v(" "),s("p",[a._v("[GC 118250K->113543K(130112K), 0.0094143 secs] [Full GC 121376K->10414K(130112K), 0.0650971 secs]")]),a._v(" "),s("p",[s("strong",[a._v("-XX:+PrintGCDetails 输出形式:")])]),a._v(" "),s("p",[a._v("[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs")]),a._v(" "),s("h3",{attrs:{id:"怎么打出线程栈信息。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么打出线程栈信息。"}},[a._v("#")]),a._v(" 怎么打出线程栈信息。")]),a._v(" "),s("p",[s("strong",[a._v("思路：")]),a._v(" 可以说一下jps，top ，jstack这几个命令，再配合一次排查线上问题进行解答。")]),a._v(" "),s("p",[s("strong",[a._v("我的答案：")])]),a._v(" "),s("ul",[s("li",[a._v("输入jps，获得进程号。")]),a._v(" "),s("li",[a._v("top -Hp pid 获取本进程中所有线程的CPU耗时性能")]),a._v(" "),s("li",[a._v("jstack pid命令查看当前java进程的堆栈状态")]),a._v(" "),s("li",[a._v("或者 jstack -l  > /tmp/output.txt 把堆栈信息打到一个txt文件。")]),a._v(" "),s("li",[a._v("可以使用fastthread 堆栈定位，"),s("a",{attrs:{href:"http://fastthread.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("fastthread.io/"),s("OutboundLink")],1)])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdeadup0v1j30xk0lgncn.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdeambp5abj31ew0pm16q.jpg",alt:""}})]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调优"}},[a._v("#")]),a._v(" 调优")]),a._v(" "),s("h2",{attrs:{id:"_2-你说你做过-jvm-调优和参数配置-请问如何盘点查看-jvm-系统默认值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-你说你做过-jvm-调优和参数配置-请问如何盘点查看-jvm-系统默认值"}},[a._v("#")]),a._v(" 2.你说你做过 JVM 调优和参数配置，请问如何盘点查看 JVM 系统默认值")]),a._v(" "),s("h3",{attrs:{id:"jvm参数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数类型"}},[a._v("#")]),a._v(" JVM参数类型")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("标配参数")]),a._v(" "),s("ul",[s("li",[a._v("-version   (java -version)")]),a._v(" "),s("li",[a._v("-help       (java -help)")]),a._v(" "),s("li",[a._v("java -showversion")])])]),a._v(" "),s("li",[s("p",[a._v("X 参数（了解）")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-Xint 解释执行")])]),a._v(" "),s("li",[s("p",[a._v("-Xcomp 第一次使用就编译成本地代码")])]),a._v(" "),s("li",[s("p",[a._v("-Xmixed 混合模式")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdeb84yh71j30yq0j6akl.jpg",alt:""}})])])])]),a._v(" "),s("li",[s("p",[a._v("xx参数")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Boolean 类型")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("公式： -xx:+ 或者 - 某个属性值（+表示开启，- 表示关闭）")])]),a._v(" "),s("li",[s("p",[a._v("Case")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("是否打印GC收集细节")]),a._v(" "),s("ul",[s("li",[a._v("-XX:+PrintGCDetails")]),a._v(" "),s("li",[a._v("-XX:- PrintGCDetails")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdebpozfgwj315o0sgtcy.jpg",alt:""}})]),a._v(" "),s("p",[a._v("添加如下参数后，重新查看，发现是 + 号了")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdebrx25moj31170u042c.jpg",alt:""}})])]),a._v(" "),s("li",[s("p",[a._v("是否使用串行垃圾回收器")]),a._v(" "),s("ul",[s("li",[a._v("-XX:-UseSerialGC")]),a._v(" "),s("li",[a._v("-XX:+UseSerialGC")])])])])])])]),a._v(" "),s("li",[s("p",[a._v("KV 设值类型")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("公式 -XX:属性key=属性 value")])]),a._v(" "),s("li",[s("p",[a._v("Case:")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-XX:MetaspaceSize=128m")])]),a._v(" "),s("li",[s("p",[a._v("-xx:MaxTenuringThreshold=15")])]),a._v(" "),s("li",[s("p",[a._v("我们常见的 -Xms和 -Xmx 也属于 KV 设值类型")]),a._v(" "),s("ul",[s("li",[a._v("-Xms 等价于 -XX:InitialHeapSize")]),a._v(" "),s("li",[a._v("-Xmx 等价于 -XX:MaxHeapSize")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdecj9d7z3j310202qdgb.jpg",alt:""}})])])])])])]),a._v(" "),s("li",[s("p",[a._v("jinfo 举例，如何查看当前运行程序的配置")]),a._v(" "),s("ul",[s("li",[a._v("jps -l")]),a._v(" "),s("li",[a._v("jinfo -flag [配置项] 进程编号")]),a._v(" "),s("li",[a._v("jinfo "),s("strong",[a._v("-flags")]),a._v(" 1981(打印所有)")]),a._v(" "),s("li",[a._v("jinfo -flag PrintGCDetails 1981")]),a._v(" "),s("li",[a._v("jinfo -flag MetaspaceSize 2044")])])])])])]),a._v(" "),s("p",[a._v("这些都是命令级别的查看，我们如何在程序运行中查看")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" totalMemory "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("totalMemory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" maxMemory "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runtime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getRuntime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("maxMemory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"total_memory(-xms)="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("totalMemory"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"字节，"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("totalMemory"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"max_memory(-xmx)="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("maxMemory"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"字节，"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("maxMemory"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"盘点家底查看jvm默认值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#盘点家底查看jvm默认值"}},[a._v("#")]),a._v(" 盘点家底查看JVM默认值")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-XX:+PrintFlagsInitial")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("主要查看初始默认值")])]),a._v(" "),s("li",[s("p",[a._v("java -XX:+PrintFlagsInitial")])]),a._v(" "),s("li",[s("p",[a._v("java -XX:+PrintFlagsInitial -version")])]),a._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdee0ndg33j31ci0m6k5w.jpg",alt:""}})]),a._v(" "),s("p",[s("strong",[a._v("等号前有冒号")]),a._v(" :=  说明 jvm 参数有人为修改过或者 JVM加载修改")]),a._v(" "),s("p",[a._v("false 说明是Boolean 类型 参数，数字说明是 KV 类型参数")])])])]),a._v(" "),s("li",[s("p",[a._v("-XX:+PrintFlagsFinal")]),a._v(" "),s("ul",[s("li",[a._v("主要查看修改更新")]),a._v(" "),s("li",[a._v("java -XX:+PrintFlagsFinal")]),a._v(" "),s("li",[a._v("java -XX:+PrintFlagsFinal -version")]),a._v(" "),s("li",[a._v("运行java命令的同时打印出参数 java -XX:+PrintFlagsFinal -XX:MetaspaceSize=512m Hello.java")])])]),a._v(" "),s("li",[s("p",[a._v("-XX:+PrintCommondLineFlags")]),a._v(" "),s("ul",[s("li",[a._v("打印命令行参数")]),a._v(" "),s("li",[a._v("java -XX:+PrintCommondLineFlags -version")]),a._v(" "),s("li",[a._v("可以方便的看到垃圾回收器")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehf1e54soj31e006qjz6.jpg",alt:""}})])])])]),a._v(" "),s("h2",{attrs:{id:"_3-你平时工作用过的-jvm-常用基本配置参数有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-你平时工作用过的-jvm-常用基本配置参数有哪些"}},[a._v("#")]),a._v(" 3. 你平时工作用过的 JVM 常用基本配置参数有哪些？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdee0iss88j31eu0n6aqi.jpg",alt:""}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-Xms")]),a._v(" "),s("ul",[s("li",[a._v("初始大小内存，默认为物理内存1/64")]),a._v(" "),s("li",[a._v("等价于 -XX:InitialHeapSize")])])]),a._v(" "),s("li",[s("p",[a._v("-Xmx")]),a._v(" "),s("ul",[s("li",[a._v("最大分配内存，默认为物理内存的1/4")]),a._v(" "),s("li",[a._v("等价于 -XX:MaxHeapSize")])])]),a._v(" "),s("li",[s("p",[a._v("-Xss")]),a._v(" "),s("ul",[s("li",[a._v("设置单个线程的大小，一般默认为 512k~1024k")]),a._v(" "),s("li",[a._v("等价于 -XX:ThreadStackSize")]),a._v(" "),s("li",[a._v("如果通过 "),s("code",[a._v("jinfo ThreadStackSize 线程 ID")]),a._v(" 查看会显示为 0，指的是默认出厂设置")])])]),a._v(" "),s("li",[s("p",[a._v("-Xmn")]),a._v(" "),s("ul",[s("li",[a._v("设置年轻代大小（一般不设置）")])])]),a._v(" "),s("li",[s("p",[a._v("-XX:MetaspaceSize")]),a._v(" "),s("ul",[s("li",[a._v("设置元空间大小。元空间的本质和永久代类似，都是对 JMM 规范中方法区的实现。不过元空间与永久代最大的区别是，元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制")]),a._v(" "),s("li",[a._v("但是元空间默认也很小，频繁 new 对象，也会 OOM")]),a._v(" "),s("li",[a._v("-Xms10m -Xmx10m -XX:MetaspaceSize=1024m -XX:+PrintFlagsFinal")])])]),a._v(" "),s("li",[s("p",[a._v("-XX:+PrintGCDetails")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("输出详细的 GC 收集日志信息")])]),a._v(" "),s("li",[s("p",[a._v("测试时候，可以将参数调到最小，")]),a._v(" "),s("p",[s("code",[a._v("-Xms10m -Xmx10m -XX:+PrintGCDetails")])]),a._v(" "),s("p",[a._v("定义一个大对象，撑爆堆内存，")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"==hello gc==="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Thread.sleep(Integer.MAX_VALUE);")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//-Xms10m -Xmx10m -XX:PrintGCDetails")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("https"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("tva1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("sinaimg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cn"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("large"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("007")]),a._v("S8ZIlly1gehkvas3vzj31a90u0n7t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jpg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("GC"),s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdefrf0dfqj31fs0honjk.jpg",alt:""}})])]),a._v(" "),s("li",[s("p",[a._v("Full GC"),s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdefrc3lmbj31hy0gk7of.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdefr8tvx0j31h60m41eq.jpg",alt:""}})])])])]),a._v(" "),s("li",[s("p",[a._v("-XX:SurvivorRatio")]),a._v(" "),s("ul",[s("li",[a._v("设置新生代中 eden 和S0/S1空间的比例")]),a._v(" "),s("li",[a._v("默认 -XX:SurvivorRatio=8,Eden:S0:S1=8:1:1")]),a._v(" "),s("li",[a._v("SurvivorRatio值就是设置 Eden 区的比例占多少，S0/S1相同，如果设置  -XX:SurvivorRatio=2，那Eden:S0:S1=2:1:1")])])]),a._v(" "),s("li",[s("p",[a._v("-XX:NewRatio")]),a._v(" "),s("ul",[s("li",[a._v("配置年轻代和老年代在堆结构的比例")]),a._v(" "),s("li",[a._v("默认 -XX:NewRatio=2，新生代 1，老年代 2，年轻代占整个堆的 1/3")]),a._v(" "),s("li",[a._v("NewRatio值就是设置老年代的占比，如果设置-XX:NewRatio=4，那就表示新生代占 1，老年代占 4，年轻代占整个堆的 1/5")])])]),a._v(" "),s("li",[s("p",[a._v("-XX:MaxTenuringThreshold")]),a._v(" "),s("ul",[s("li",[a._v("设置垃圾的最大年龄（java8 固定设置最大 15）")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gdefr4xeq1j31g80lek6e.jpg",alt:""}})])])])]),a._v(" "),s("p",[a._v("参数不懂，推荐直接去看官网，")]),a._v(" "),s("p",[a._v("https://docs.oracle.com/javacomponents/jrockit-hotspot/migration-guide/cloptions.htm#JRHMG127")]),a._v(" "),s("p",[a._v("https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC")]),a._v(" "),s("p",[a._v("https://docs.oracle.com/javase/8/")]),a._v(" "),s("p",[a._v("Java SE Tools Reference for UNIX](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html)")]),a._v(" "),s("h3",{attrs:{id:"_4-强引用、软引用、弱引用、虚引用分别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-强引用、软引用、弱引用、虚引用分别是什么"}},[a._v("#")]),a._v(" 4. 强引用、软引用、弱引用、虚引用分别是什么？")]),a._v(" "),s("h2",{attrs:{id:"_5-请谈谈你对-oom-的认识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-请谈谈你对-oom-的认识"}},[a._v("#")]),a._v(" 5. 请谈谈你对 OOM 的认识")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("java.lang.StackOverflowError")]),a._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class StackOverflowErrorDemo {\n\n    public static void main(String[] args) {\n        stackoverflowError();\n    }\n\n    private static void stackoverflowError() {\n        stackoverflowError();\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("java.lang.OutOfMemoryError: Java heap space")]),a._v(" "),s("ul",[s("li",[a._v("new个大对象,就会出现")])])]),a._v(" "),s("li",[s("p",[a._v("java.lang.OutOfMemoryError: GC overhead limit exceeded  (GC上头，哈哈)")]),a._v(" "),s("ul",[s("li",[s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehmrz0dvaj311w0muk0e.jpg",alt:""}})])]),a._v(" "),s("li",[s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackOverflowErrorDemo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("stackoverflowError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("stackoverflowError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("stackoverflowError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("java.lang.OutOfMemoryError: Direct buffer memory")]),a._v(" "),s("ul",[s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehn18eix6j31a00m2wup.jpg",alt:""}})]),a._v(" "),s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehn52fphnj31as0lidyh.jpg",alt:""}})])])]),a._v(" "),s("li",[s("p",[a._v("java.lang.OutOfMemoryError: unable to create new native thread")]),a._v(" "),s("ul",[s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehn7osaz1j31940kc4c8.jpg",alt:""}})])])]),a._v(" "),s("li",[s("p",[a._v("java.lang.OutOfMemoryError：Metaspace")]),a._v(" "),s("ul",[s("li",[a._v("http://openjdk.java.net/jeps/122")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehnc3d4g3j319e0msguj.jpg",alt:""}})]),a._v(" "),s("li",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehndijxo8j31920madt6.jpg",alt:""}})])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehmmia4gaj30xw0gudid.jpg",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_6-gc垃圾回收算法和垃圾收集器的关系-分别是什么-请你谈谈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-gc垃圾回收算法和垃圾收集器的关系-分别是什么-请你谈谈"}},[a._v("#")]),a._v(" 6. GC垃圾回收算法和垃圾收集器的关系？分别是什么，请你谈谈？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1geho5bjeg5j31e409m0xb.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1geho87aqmuj31260dqdl2.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehoafwkoaj31a00my7js.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehobkwiegj31da0mc7ds.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehofhsuglj31a20ka116.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehohen24lj31f20n2du8.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1geholtp9p9j31bu0i8dsm.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehop8c2u8j30uu0kgk46.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehptemx4oj31520js47e.jpg",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gehps6jzcsj31go0mok5q.jpg",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_7-怎么查看服务器默认的垃圾收集器是哪个-生产上如何配置垃圾收集器-谈谈你对垃圾收集器的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-怎么查看服务器默认的垃圾收集器是哪个-生产上如何配置垃圾收集器-谈谈你对垃圾收集器的理解"}},[a._v("#")]),a._v(" 7.怎么查看服务器默认的垃圾收集器是哪个？生产上如何配置垃圾收集器？谈谈你对垃圾收集器的理解？")]),a._v(" "),s("h3",{attrs:{id:"_8-g1-垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-g1-垃圾收集器"}},[a._v("#")]),a._v(" 8.G1 垃圾收集器？")]),a._v(" "),s("h3",{attrs:{id:"_9-生产环境服务器变慢-诊断思路和性能评估谈谈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-生产环境服务器变慢-诊断思路和性能评估谈谈"}},[a._v("#")]),a._v(" 9.生产环境服务器变慢，诊断思路和性能评估谈谈？")]),a._v(" "),s("h3",{attrs:{id:"_10-假设生产环境出现-cpu占用过高-请谈谈你的分析思路和定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-假设生产环境出现-cpu占用过高-请谈谈你的分析思路和定位"}},[a._v("#")]),a._v(" 10.假设生产环境出现 CPU占用过高，请谈谈你的分析思路和定位")]),a._v(" "),s("h3",{attrs:{id:"_11-对于jdk-自带的jvm-监控和性能分析工具用过哪些-你是怎么用的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-对于jdk-自带的jvm-监控和性能分析工具用过哪些-你是怎么用的"}},[a._v("#")]),a._v(" 11. 对于JDK 自带的JVM 监控和性能分析工具用过哪些？你是怎么用的？")]),a._v(" "),s("ul",[s("li",[a._v("jconsole  直接在jdk/bin目录下点击jconsole.exe即可启动")]),a._v(" "),s("li",[a._v("VisualVM   jdk/bin目录下面jvisualvm.exe")])]),a._v(" "),s("p",[a._v("https://www.cnblogs.com/ityouknow/p/6437037.html")])])}),[],!1,null,null,null);t.default=v.exports}}]);