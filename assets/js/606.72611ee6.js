(window.webpackJsonp=window.webpackJsonp||[]).push([[606],{995:function(e,t,n){"use strict";n.r(t);var r=n(13),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E8%83%8C%E6%99%AF"}},[e._v("一、背景")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E7%AE%80%E4%BB%8B"}},[e._v("二、简介")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1%E5%BC%BA%E5%BC%95%E7%94%A8-strongreference"}},[e._v("1.强引用 StrongReference")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#2%E5%BC%B1%E5%BC%95%E7%94%A8-weakreference"}},[e._v("2.弱引用 WeakReference")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#3%E8%BD%AF%E5%BC%95%E7%94%A8-softreference"}},[e._v("3.软引用 SoftReference")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#4%E8%99%9A%E5%BC%95%E7%94%A8-phantomreference"}},[e._v("4.虚引用 PhantomReference")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%B0%8F%E7%BB%93"}},[e._v("三、小结")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[e._v("参考文章")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[e._v("微信公众号")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[e._v("Java技术江湖")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[e._v("个人公众号：黄小斜")])])])])]),e._v(" "),n("p",[e._v("本文转自互联网，侵删")]),e._v(" "),n("p",[e._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),n("p",[e._v("喜欢的话麻烦点下Star哈")]),e._v(" "),n("p",[e._v("文章将同步到我的个人博客：")]),e._v(" "),n("blockquote",[n("p",[e._v("www.how2playlife.com")])]),e._v(" "),n("p",[e._v("本文是微信公众号【Java技术江湖】的《深入理解JVM虚拟机》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),e._v(" "),n("p",[e._v("该系列博文会告诉你如何从入门到进阶，一步步地学习JVM基础知识，并上手进行JVM调优实战，JVM是每一个Java工程师必须要学习和理解的知识点，你必须要掌握其实现原理，才能更完整地了解整个Java技术体系，形成自己的知识框架。")]),e._v(" "),n("p",[e._v("为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),e._v(" "),n("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),n("h2",{attrs:{id:"一、背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[e._v("#")]),e._v(" 一、背景")]),e._v(" "),n("p",[e._v("Java的内存回收不需要程序员负责，JVM会在必要时启动Java GC完成垃圾回收。Java以便我们控制对象的生存周期，提供给了我们四种引用方式，引用强度从强到弱分别为：强引用、软引用、弱引用、虚引用。")]),e._v(" "),n("h2",{attrs:{id:"二、简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、简介"}},[e._v("#")]),e._v(" 二、简介")]),e._v(" "),n("h3",{attrs:{id:"_1-强引用-strongreference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-强引用-strongreference"}},[e._v("#")]),e._v(" 1.强引用 StrongReference")]),e._v(" "),n("p",[e._v("StrongReference是Java的默认引用形式，使用时不需要显示定义。任何通过强引用所使用的对象不管系统资源有多紧张，Java GC都不会主动回收具有强引用的对象。")]),e._v(" "),n("pre",[e._v('public class StrongReferenceTest {\n\n\tpublic static int M = 1024*1024;\n\n\tpublic static void printlnMemory(String tag){\n\t\tRuntime runtime = Runtime.getRuntime();\n\t\tint M = StrongReferenceTest.M;\n\t\tSystem.out.println("\\n"+tag+":");\n\t\tSystem.out.println(runtime.freeMemory()/M+"M(free)/" + runtime.totalMemory()/M+"M(total)");\n\t}\n\n\tpublic static void main(String[] args){\n\t\tStrongReferenceTest.printlnMemory("1.原可用内存和总内存");\n\n\t\t//实例化10M的数组并与strongReference建立强引用\n\t\tbyte[] strongReference = new byte[10*StrongReferenceTest.M];\n\t\tStrongReferenceTest.printlnMemory("2.实例化10M的数组,并建立强引用");\n\t\tSystem.out.println("strongReference : "+strongReference);\n\n\t\tSystem.gc();\n\t\tStrongReferenceTest.printlnMemory("3.GC后");\n\t\tSystem.out.println("strongReference : "+strongReference);\n\n\t\t//strongReference = null;后,强引用断开了\n\t\tstrongReference = null;\n\t\tStrongReferenceTest.printlnMemory("4.强引用断开后");\n\t\tSystem.out.println("strongReference : "+strongReference);\n\n\t\tSystem.gc();\n\t\tStrongReferenceTest.printlnMemory("5.GC后");\n\t\tSystem.out.println("strongReference : "+strongReference);\n\t\t}\n}\n')]),e._v(" "),n("p",[e._v("运行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160cd0dc536b2384?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"_2-弱引用-weakreference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-弱引用-weakreference"}},[e._v("#")]),e._v(" 2.弱引用 WeakReference")]),e._v(" "),n("p",[e._v("如果一个对象只具有弱引用，无论内存充足与否，Java GC后对象如果只有弱引用将会被自动回收。")]),e._v(" "),n("pre",[e._v('public class WeakReferenceTest {\n\n\tpublic static int M = 1024*1024;\n\n\tpublic static void printlnMemory(String tag){\n\t\tRuntime runtime = Runtime.getRuntime();\n\t\tint M = WeakReferenceTest.M;\n\t\tSystem.out.println("\\n"+tag+":");\n\t\tSystem.out.println(runtime.freeMemory()/M+"M(free)/" + runtime.totalMemory()/M+"M(total)");\n\t}\n\n\tpublic static void main(String[] args){  \n\t\tWeakReferenceTest.printlnMemory("1.原可用内存和总内存");\n\n\t\t//创建弱引用\n\t\tWeakReference'),n("Object",[e._v(" weakRerference = new WeakReference"),n("Object",[e._v('(new byte[10*WeakReferenceTest.M]);   \n\t\tWeakReferenceTest.printlnMemory("2.实例化10M的数组,并建立弱引用");\n\t\tSystem.out.println("weakRerference.get() : "+weakRerference.get());\n\n\t\tSystem.gc();\n\t\tStrongReferenceTest.printlnMemory("3.GC后");\n\t\tSystem.out.println("weakRerference.get() : "+weakRerference.get());\n\t}   \n}\n')])],1)],1),e._v(" "),n("p",[e._v("运行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160cd0f1ead8184e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"_3-软引用-softreference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-软引用-softreference"}},[e._v("#")]),e._v(" 3.软引用 SoftReference")]),e._v(" "),n("p",[e._v("软引用和弱引用的特性基本一致， 主要的区别在于软引用在内存不足时才会被回收。如果一个对象只具有软引用，Java GC在内存充足的时候不会回收它，内存不足时才会被回收。")]),e._v(" "),n("pre",[e._v('public class SoftReferenceTest {\n\n\tpublic static int M = 1024*1024;\n\n\tpublic static void printlnMemory(String tag){\n\t\tRuntime runtime = Runtime.getRuntime();\n\t\tint M = StrongReferenceTest.M;\n\t\tSystem.out.println("\\n"+tag+":");\n\t\tSystem.out.println(runtime.freeMemory()/M+"M(free)/" + runtime.totalMemory()/M+"M(total)");\n\t}\n\n\tpublic static void main(String[] args){\n\t\tSoftReferenceTest.printlnMemory("1.原可用内存和总内存");\n\n\t\t//建立软引用\n\t\tSoftReference'),n("Object",[e._v(" softRerference = new SoftReference"),n("Object",[e._v('(new byte[10*SoftReferenceTest.M]);\n\t\tSoftReferenceTest.printlnMemory("2.实例化10M的数组,并建立软引用");\n\t\tSystem.out.println("softRerference.get() : "+softRerference.get());\n\n\t\tSystem.gc();  \n\t\tSoftReferenceTest.printlnMemory("3.内存可用容量充足，GC后");\n\t\tSystem.out.println("softRerference.get() : "+softRerference.get());  \n\n\t\t//实例化一个4M的数组,使内存不够用,并建立软引用\n\t\t//free=10M=4M+10M-4M,证明内存可用量不足时，GC后byte[10*m]被回收\n\t\tSoftReference'),n("Object",[e._v(" softRerference2 = new SoftReference"),n("Object",[e._v('(new byte[4*SoftReferenceTest.M]);\n\t\tSoftReferenceTest.printlnMemory("4.实例化一个4M的数组后");\n\t\tSystem.out.println("softRerference.get() : "+softRerference.get());\n\t\tSystem.out.println("softRerference2.get() : "+softRerference2.get());  \n\t } \n}\n')])],1)],1)],1)],1),e._v(" "),n("p",[e._v("运行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160cd1023a8f3de2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"_4-虚引用-phantomreference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚引用-phantomreference"}},[e._v("#")]),e._v(" 4.虚引用 PhantomReference")]),e._v(" "),n("p",[e._v("从PhantomReference类的源代码可以知道，它的get()方法无论何时返回的都只会是null。所以单独使用虚引用时，没有什么意义，需要和引用队列ReferenceQueue类联合使用。当执行Java GC时如果一个对象只有虚引用，就会把这个对象加入到与之关联的ReferenceQueue中。")]),e._v(" "),n("pre",[e._v('public class PhantomReferenceTest {\n\n\tpublic static int M = 1024*1024;\n\n\tpublic static void printlnMemory(String tag){\n\t\tRuntime runtime = Runtime.getRuntime();\n\t\tint M = PhantomReferenceTest.M;\n\t\tSystem.out.println("\\n"+tag+":");\n\t\tSystem.out.println(runtime.freeMemory()/M+"M(free)/" + runtime.totalMemory()/M+"M(total)");\n\t}\n\n\tpublic static void main(String[] args) throws InterruptedException {\n\n\t\tPhantomReferenceTest.printlnMemory("1.原可用内存和总内存");\n\t\tbyte[] object = new byte[10*PhantomReferenceTest.M];\t\t\n\t\tPhantomReferenceTest.printlnMemory("2.实例化10M的数组后");\n\n\t    //建立虚引用\n\t    ReferenceQueue'),n("Object",[e._v(" referenceQueue = new ReferenceQueue"),n("Object",[e._v("();\n\t    PhantomReference"),n("Object",[e._v(" phantomReference = new PhantomReference"),n("Object",[e._v('(object,referenceQueue);  \n\n\t    PhantomReferenceTest.printlnMemory("3.建立虚引用后");\n\t    System.out.println("phantomReference : "+phantomReference); \n\t    System.out.println("phantomReference.get() : "+phantomReference.get());\n\t    System.out.println("referenceQueue.poll() : "+referenceQueue.poll());\n\n\t    //断开byte[10*PhantomReferenceTest.M]的强引用\n\t    object = null;  \n\t    PhantomReferenceTest.printlnMemory("4.执行object = null;强引用断开后");\n\n\t    System.gc();\n\t    PhantomReferenceTest.printlnMemory("5.GC后");\n\t    System.out.println("phantomReference : "+phantomReference); \n\t    System.out.println("phantomReference.get() : "+phantomReference.get());\n\t    System.out.println("referenceQueue.poll() : "+referenceQueue.poll());\t    \n\n\t    //断开虚引用\n\t    phantomReference = null;\n\t\tSystem.gc(); \n\t\tPhantomReferenceTest.printlnMemory("6.断开虚引用后GC");\n\t    System.out.println("phantomReference : "+phantomReference);\n\t    System.out.println("referenceQueue.poll() : "+referenceQueue.poll());\t    \t\n\t}\n}\n')])],1)],1)],1)],1),e._v(" "),n("p",[e._v("运行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160cd110cba23d84?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"三、小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、小结"}},[e._v("#")]),e._v(" 三、小结")]),e._v(" "),n("p",[e._v("强引用是 Java 的默认引用形式，使用时不需要显示定义，是我们平时最常使用到的引用方式。不管系统资源有多紧张，Java GC都不会主动回收具有强引用的对象。 弱引用和软引用一般在引用对象为非必需对象的时候使用。它们的区别是被弱引用关联的对象在垃圾回收时总是会被回收，被软引用关联的对象只有在内存不足时才会被回收。 虚引用的get()方法获取的永远是null，无法获取对象实例。Java GC会把虚引用的对象放到引用队列里面。可用来在对象被回收时做额外的一些资源清理或事物回滚等处理。 由于无法从虚引获取到引用对象的实例。它的使用情况比较特别，所以这里不把虚引用放入表格进行对比。这里对强引用、弱引用、软引用进行对比：")]),e._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000009707894",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://segmentfault.com/a/1190000009707894"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/hysum/p/7100874.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/hysum/p/7100874.html"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://c.biancheng.net/view/939.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://c.biancheng.net/view/939.html"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.runoob.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.runoob.com/"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("https://blog.csdn.net/android_hl/article/details/53228348")]),e._v(" "),n("h2",{attrs:{id:"微信公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[e._v("#")]),e._v(" 微信公众号")]),e._v(" "),n("h3",{attrs:{id:"java技术江湖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[e._v("#")]),e._v(" Java技术江湖")]),e._v(" "),n("p",[e._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),e._v(" "),n("p",[n("strong",[e._v("Java工程师必备学习资源:")]),e._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),n("strong",[e._v("“Java”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),e._v(" "),n("h3",{attrs:{id:"个人公众号-黄小斜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[e._v("#")]),e._v(" 个人公众号：黄小斜")]),e._v(" "),n("p",[e._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),e._v(" "),n("p",[n("strong",[e._v("程序员3T技术学习资源：")]),e._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),n("strong",[e._v("“资料”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);