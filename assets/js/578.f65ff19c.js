(window.webpackJsonp=window.webpackJsonp||[]).push([[578],{972:function(t,s,n){"use strict";n.r(s);var i=n(13),a=Object(i.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F"}},[t._v("初始容量")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#aslist%E7%9A%84%E7%BC%BA%E9%99%B7"}},[t._v("asList的缺陷")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%88%97%E8%A1%A8"}},[t._v("避免使用基本数据类型数组转换为列表")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#aslist%E4%BA%A7%E7%94%9F%E7%9A%84%E5%88%97%E8%A1%A8%E4%B8%8D%E5%8F%AF%E6%93%8D%E4%BD%9C"}},[t._v("asList产生的列表不可操作")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#sublist%E7%9A%84%E7%BC%BA%E9%99%B7"}},[t._v("subList的缺陷")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#sublist%E8%BF%94%E5%9B%9E%E4%BB%85%E4%BB%85%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE"}},[t._v("subList返回仅仅只是一个视图")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#sublist%E7%94%9F%E6%88%90%E5%AD%90%E5%88%97%E8%A1%A8%E5%90%8E%EF%BC%8C%E4%B8%8D%E8%A6%81%E8%AF%95%E5%9B%BE%E5%8E%BB%E6%93%8D%E4%BD%9C%E5%8E%9F%E5%88%97%E8%A1%A8"}},[t._v("subList生成子列表后，不要试图去操作原列表")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8sublist%E5%A4%84%E7%90%86%E5%B1%80%E9%83%A8%E5%88%97%E8%A1%A8"}},[t._v("推荐使用subList处理局部列表")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BF%9D%E6%8C%81compareto%E5%92%8Cequals%E5%90%8C%E6%AD%A5"}},[t._v("保持compareTo和equals同步")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[t._v("参考文章")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[t._v("微信公众号")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[t._v("Java技术江湖")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[t._v("个人公众号：黄小斜")])])])])]),t._v(" "),n("p",[t._v("本文参考多篇优质技术博客，参考文章请在文末查看")]),t._v(" "),n("p",[t._v("《Java集合详解系列》是我在完成夯实Java基础篇的系列博客后准备开始整理的新系列文章。\n为了更好地诠释知识点，形成体系文章，本系列文章整理了很多优质的博客内容，如有侵权请联系我，一定删除。")]),t._v(" "),n("p",[t._v("这些文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),t._v(" "),n("p",[t._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),t._v(" "),n("blockquote",[n("p",[t._v("https://github.com/h2pl/Java-Tutorial")])]),t._v(" "),n("p",[t._v("喜欢的话麻烦点下Star、fork哈")]),t._v(" "),n("p",[t._v("本系列文章将整理于我的个人博客：")]),t._v(" "),n("blockquote",[n("p",[t._v("www.how2playlife.com")])]),t._v(" "),n("p",[t._v("今天我们来探索一下Java集合类中的一些技术细节。主要是对一些比较容易被遗漏和误解的知识点做一些讲解和补充。可能不全面，还请谅解。")]),t._v(" "),n("h2",{attrs:{id:"初始容量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始容量"}},[t._v("#")]),t._v(" 初始容量")]),t._v(" "),n("p",[t._v("集合是我们在Java编程中使用非常广泛的，它就像大海，海纳百川，像万能容器，盛装万物，而且这个大海，万能容器还可以无限变大（如果条件允许）。当这个海、容器的量变得非常大的时候，它的初始容量就会显得很重要了，因为挖海、扩容是需要消耗大量的人力物力财力的。")]),t._v(" "),n("p",[t._v("同样的道理，Collection的初始容量也显得异常重要。所以：对于已知的情景，请为集合指定初始容量。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public static void main(String[] args) {\n    StudentVO student = null;\n    long begin1 = System.currentTimeMillis();\n    List<StudentVO> list1 = new ArrayList<>();\n    for(int i = 0 ; i < 1000000; i++){\n        student = new StudentVO(i,"chenssy_"+i,i);\n        list1.add(student);\n    }\n    long end1 = System.currentTimeMillis();\n    System.out.println("list1 time：" + (end1 - begin1));\n    \n    long begin2 = System.currentTimeMillis();\n    List<StudentVO> list2 = new ArrayList<>(1000000);\n    for(int i = 0 ; i < 1000000; i++){\n        student = new StudentVO(i,"chenssy_"+i,i);\n        list2.add(student);\n    }\n    long end2 = System.currentTimeMillis();\n    System.out.println("list2 time：" + (end2 - begin2));\n}\n')])])]),n("p",[t._v("上面代码两个list都是插入1000000条数据，只不过list1没有没有申请初始化容量，而list2初始化容量1000000。那运行结果如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("list1 time：1638\nlist2 time：921\n")])])]),n("p",[t._v("从上面的运行结果我们可以看出list2的速度是list1的两倍左右。在前面LZ就提过，ArrayList的扩容机制是比较消耗资源的。我们先看ArrayList的add方法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public boolean add(E e) {  \n        ensureCapacity(size + 1);   \n        elementData[size++] = e;  \n        return true;  \n    }  \n\npublic void ensureCapacity(int minCapacity) {  \n    modCount++;         //修改计数器\n    int oldCapacity = elementData.length;    \n    //当前需要的长度超过了数组长度，进行扩容处理\n    if (minCapacity > oldCapacity) {  \n        Object oldData[] = elementData;  \n        //新的容量 = 旧容量 * 1.5 + 1\n        int newCapacity = (oldCapacity * 3)/2 + 1;  \n            if (newCapacity < minCapacity)  \n                newCapacity = minCapacity;  \n      //数组拷贝，生成新的数组 \n      elementData = Arrays.copyOf(elementData, newCapacity);  \n    }  \n}\n")])])]),n("p",[t._v("ArrayList每次新增一个元素，就会检测ArrayList的当前容量是否已经到达临界点，如果到达临界点则会扩容1.5倍。然而ArrayList的扩容以及数组的拷贝生成新的数组是相当耗资源的。所以若我们事先已知集合的使用场景，知道集合的大概范围，我们最好是指定初始化容量，这样对资源的利用会更加好，尤其是大数据量的前提下，效率的提升和资源的利用会显得更加具有优势。")]),t._v(" "),n("h2",{attrs:{id:"aslist的缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aslist的缺陷"}},[t._v("#")]),t._v(" asList的缺陷")]),t._v(" "),n("p",[t._v("在实际开发过程中我们经常使用asList讲数组转换为List，这个方法使用起来非常方便，但是asList方法存在几个缺陷：")]),t._v(" "),n("h3",{attrs:{id:"避免使用基本数据类型数组转换为列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#避免使用基本数据类型数组转换为列表"}},[t._v("#")]),t._v(" 避免使用基本数据类型数组转换为列表")]),t._v(" "),n("p",[t._v("使用8个基本类型数组转换为列表时会存在一个比较有味的缺陷。先看如下程序：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static void main(String[] args) {\n        int[] ints = {1,2,3,4,5};\n        List list = Arrays.asList(ints);\n        System.out.println(\"list'size：\" + list.size());\n    }\n------------------------------------\noutPut：\nlist'size：1\n")])])]),n("p",[t._v("程序的运行结果并没有像我们预期的那样是5而是逆天的1，这是什么情况？先看源码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n")])])]),n("p",[t._v("asList接受的参数是一个泛型的变长参数，我们知道基本数据类型是无法发型化的，也就是说8个基本类型是无法作为asList的参数的， 要想作为泛型参数就必须使用其所对应的包装类型。但是这个这个实例中为什么没有出错呢？")]),t._v(" "),n("p",[t._v("因为该实例是将int类型的数组当做其参数，而在Java中数组是一个对象，它是可以泛型化的。所以该例子是不会产生错误的。既然例子是将整个int类型的数组当做泛型参数，那么经过asList转换就只有一个int 的列表了。如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public static void main(String[] args) {\n    int[] ints = {1,2,3,4,5};\n    List list = Arrays.asList(ints);\n    System.out.println("list 的类型:" + list.get(0).getClass());\n    System.out.println("list.get(0) == ints：" + list.get(0).equals(ints));\n}\n')])])]),n("hr"),t._v(" "),n("p",[t._v("outPut:\nlist 的类型:class [I\nlist.get(0) == ints：true\n从这个运行结果我们可以充分证明list里面的元素就是int数组。弄清楚这点了，那么修改方法也就一目了然了：将int 改变为Integer。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public static void main(String[] args) {\n        Integer[] ints = {1,2,3,4,5};\n        List list = Arrays.asList(ints);\n        System.out.println("list\'size：" + list.size());\n        System.out.println("list.get(0) 的类型:" + list.get(0).getClass());\n        System.out.println("list.get(0) == ints[0]：" + list.get(0).equals(ints[0]));\n    }\n----------------------------------------\noutPut:\nlist\'size：5\nlist.get(0) 的类型:class java.lang.Integer\nlist.get(0) == ints[0]：true\n')])])]),n("h3",{attrs:{id:"aslist产生的列表不可操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aslist产生的列表不可操作"}},[t._v("#")]),t._v(" asList产生的列表不可操作")]),t._v(" "),n("p",[t._v("对于上面的实例我们再做一个小小的修改：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static void main(String[] args) {\n        Integer[] ints = {1,2,3,4,5};\n        List list = Arrays.asList(ints);\n        list.add(6);\n    }\n")])])]),n("p",[t._v("该实例就是讲ints通过asList转换为list 类别，然后再通过add方法加一个元素，这个实例简单的不能再简单了，但是运行结果呢？打出我们所料：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('Exception in thread "main" java.lang.UnsupportedOperationException\n    at java.util.AbstractList.add(Unknown Source)\n    at java.util.AbstractList.add(Unknown Source)\n    at com.chenssy.test.arrayList.AsListTest.main(AsListTest.java:10)\n')])])]),n("p",[t._v("运行结果尽然抛出UnsupportedOperationException异常，该异常表示list不支持add方法。这就让我们郁闷了，list怎么可能不支持add方法呢？难道jdk脑袋堵塞了？我们再看asList的源码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static <T> List<T> asList(T... a) {\n        return new ArrayList<>(a);\n    }\n")])])]),n("p",[t._v("asList接受参数后，直接new 一个ArrayList，到这里看应该是没有错误的啊？别急，再往下看:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("private static class ArrayList<E> extends AbstractList<E>\n    implements RandomAccess, java.io.Serializable{\n        private static final long serialVersionUID = -2764017481108945198L;\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            if (array==null)\n                throw new NullPointerException();\n            a = array;\n        }\n        //.................\n    }\n")])])]),n("p",[t._v("这是ArrayList的源码,从这里我们可以看出,此ArrayList不是java.util.ArrayList，他是Arrays的内部类。")]),t._v(" "),n("p",[t._v("该内部类提供了size、toArray、get、set、indexOf、contains方法，而像add、remove等改变list结果的方法从AbstractList父类继承过来，同时这些方法也比较奇葩，它直接抛出UnsupportedOperationException异常：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public boolean add(E e) {\n        add(size(), e);\n        return true;\n    }\n    \n    public E set(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n    \n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n    \n    public E remove(int index) {\n        throw new UnsupportedOperationException();\n    }\n")])])]),n("p",[t._v("通过这些代码可以看出asList返回的列表只不过是一个披着list的外衣，它并没有list的基本特性（变长）。该list是一个长度不可变的列表，传入参数的数组有多长，其返回的列表就只能是多长。所以：：不要试图改变asList返回的列表，否则你会自食苦果。")]),t._v(" "),n("h2",{attrs:{id:"sublist的缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sublist的缺陷"}},[t._v("#")]),t._v(" subList的缺陷")]),t._v(" "),n("p",[t._v("我们经常使用subString方法来对String对象进行分割处理，同时我们也可以使用subList、subMap、subSet来对List、Map、Set进行分割处理，但是这个分割存在某些瑕疵。")]),t._v(" "),n("h3",{attrs:{id:"sublist返回仅仅只是一个视图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sublist返回仅仅只是一个视图"}},[t._v("#")]),t._v(" subList返回仅仅只是一个视图")]),t._v(" "),n("p",[t._v("首先我们先看如下实例：")]),t._v(" "),n("p",[t._v("public static void main(String[] args) {\nList"),n("Integer",[t._v(" list1 = new ArrayList"),n("Integer",[t._v("();\nlist1.add(1);\nlist1.add(2);")])],1)],1),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('    //通过构造函数新建一个包含list1的列表 list2\n    List<Integer> list2 = new ArrayList<Integer>(list1);\n    \n    //通过subList生成一个与list1一样的列表 list3\n    List<Integer> list3 = list1.subList(0, list1.size());\n    \n    //修改list3\n    list3.add(3);\n    \n    System.out.println("list1 == list2：" + list1.equals(list2));\n    System.out.println("list1 == list3：" + list1.equals(list3));\n}\n')])])]),n("p",[t._v("这个例子非常简单，无非就是通过构造函数、subList重新生成一个与list1一样的list，然后修改list3，最后比较list1 == list2?、list1 == list3?。")]),t._v(" "),n("p",[t._v("按照我们常规的思路应该是这样的：因为list3通过add新增了一个元素，那么它肯定与list1不等，而list2是通过list1构造出来的，所以应该相等，所以结果应该是：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("list1 == list2：true\nlist1 == list3: false\n")])])]),n("p",[t._v("首先我们先不论结果的正确与否，我们先看subList的源码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n}\n")])])]),n("p",[t._v("subListRangeCheck方式是判断fromIndex、toIndex是否合法，如果合法就直接返回一个subList对象，注意在产生该new该对象的时候传递了一个参数 this ，该参数非常重要，因为他代表着原始list。")]),t._v(" "),n("p",[t._v("/**\n* 继承AbstractList类，实现RandomAccess接口\n*/\nprivate class SubList extends AbstractList"),n("E",[t._v(" implements RandomAccess {\nprivate final AbstractList"),n("E",[t._v(" parent;    //列表\nprivate final int parentOffset;"),n("br"),t._v("\nprivate final int offset;\nint size;")])],1)],1),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    //构造函数\n    SubList(AbstractList<E> parent,\n            int offset, int fromIndex, int toIndex) {\n        this.parent = parent;\n        this.parentOffset = fromIndex;\n        this.offset = offset + fromIndex;\n        this.size = toIndex - fromIndex;\n        this.modCount = ArrayList.this.modCount;\n    }\n\n    //set方法\n    public E set(int index, E e) {\n        rangeCheck(index);\n        checkForComodification();\n        E oldValue = ArrayList.this.elementData(offset + index);\n        ArrayList.this.elementData[offset + index] = e;\n        return oldValue;\n    }\n\n    //get方法\n    public E get(int index) {\n        rangeCheck(index);\n        checkForComodification();\n        return ArrayList.this.elementData(offset + index);\n    }\n\n    //add方法\n    public void add(int index, E e) {\n        rangeCheckForAdd(index);\n        checkForComodification();\n        parent.add(parentOffset + index, e);\n        this.modCount = parent.modCount;\n        this.size++;\n    }\n\n    //remove方法\n    public E remove(int index) {\n        rangeCheck(index);\n        checkForComodification();\n        E result = parent.remove(parentOffset + index);\n        this.modCount = parent.modCount;\n        this.size--;\n        return result;\n    }\n}\n")])])]),n("p",[t._v("该SubLsit是ArrayList的内部类，它与ArrayList一样，都是继承AbstractList和实现RandomAccess接口。同时也提供了get、set、add、remove等list常用的方法。但是它的构造函数有点特殊，在该构造函数中有两个地方需要注意：")]),t._v(" "),n("p",[t._v("1、this.parent = parent;而parent就是在前面传递过来的list，也就是说this.parent就是原始list的引用。")]),t._v(" "),n("p",[t._v("2、this.offset = offset + fromIndex;this.parentOffset = fromIndex;。同时在构造函数中它甚至将modCount（fail-fast机制）传递过来了。")]),t._v(" "),n("p",[t._v("我们再看get方法，在get方法中return ArrayList.this.elementData(offset + index);")]),t._v(" "),n("p",[t._v("这段代码可以清晰表明get所返回就是原列表offset + index位置的元素。同样的道理还有add方法里面的：")]),t._v(" "),n("p",[t._v("parent.add(parentOffset + index, e);\nthis.modCount = parent.modCount;\nremove方法里面的")]),t._v(" "),n("p",[t._v("E result = parent.remove(parentOffset + index);\nthis.modCount = parent.modCount;")]),t._v(" "),n("p",[t._v("诚然，到了这里我们可以判断subList返回的SubList同样也是AbstractList的子类，同时它的方法如get、set、add、remove等都是在原列表上面做操作，它并没有像subString一样生成一个新的对象。")]),t._v(" "),n("p",[t._v("所以subList返回的只是原列表的一个视图，它所有的操作最终都会作用在原列表上。")]),t._v(" "),n("p",[t._v("那么从这里的分析我们可以得出上面的结果应该恰恰与我们上面的答案相反：")]),t._v(" "),n("p",[t._v("list1 == list2：false\nlist1 == list3：true")]),t._v(" "),n("h3",{attrs:{id:"sublist生成子列表后-不要试图去操作原列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sublist生成子列表后-不要试图去操作原列表"}},[t._v("#")]),t._v(" subList生成子列表后，不要试图去操作原列表")]),t._v(" "),n("p",[t._v("从上面我们知道subList生成的子列表只是原列表的一个视图而已，如果我们操作子列表它产生的作用都会在原列表上面表现，但是如果我们操作原列表会产生什么情况呢？")]),t._v(" "),n("p",[t._v("public static void main(String[] args) {\nList"),n("Integer",[t._v(" list1 = new ArrayList"),n("Integer",[t._v("();\nlist1.add(1);\nlist1.add(2);")])],1)],1),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('    //通过subList生成一个与list1一样的列表 list3\n    List<Integer> list3 = list1.subList(0, list1.size());\n    //修改list1\n    list1.add(3);\n    \n    System.out.println("list1\'size：" + list1.size());\n    System.out.println("list3\'size：" + list3.size());\n}\n')])])]),n("p",[t._v("该实例如果不产生意外，那么他们两个list的大小都应该都是3，但是偏偏事与愿违，事实上我们得到的结果是这样的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('list1\'size：3\nException in thread "main" java.util.ConcurrentModificationException\n    at java.util.ArrayList$SubList.checkForComodification(Unknown Source)\n    at java.util.ArrayList$SubList.size(Unknown Source)\n    at com.chenssy.test.arrayList.SubListTest.main(SubListTest.java:17)\n')])])]),n("p",[t._v("list1正常输出，但是list3就抛出ConcurrentModificationException异常，看过我另一篇博客的同仁肯定对这个异常非常，fail-fast？不错就是fail-fast机制，在fail-fast机制中，LZ花了很多力气来讲述这个异常，所以这里LZ就不对这个异常多讲了。我们再看size方法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public int size() {\n            checkForComodification();\n            return this.size;\n        }\n")])])]),n("p",[t._v("size方法首先会通过checkForComodification验证，然后再返回this.size。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("private void checkForComodification() {\n            if (ArrayList.this.modCount != this.modCount)\n                throw new ConcurrentModificationException();\n        }\n")])])]),n("p",[t._v("该方法表明当原列表的modCount与this.modCount不相等时就会抛出ConcurrentModificationException。")]),t._v(" "),n("p",[t._v('同时我们知道modCount 在new的过程中 "继承"了原列表modCount，只有在修改该列表（子列表）时才会修改该值（先表现在原列表后作用于子列表）。')]),t._v(" "),n("p",[t._v("而在该实例中我们是操作原列表，原列表的modCount当然不会反应在子列表的modCount上啦，所以才会抛出该异常。")]),t._v(" "),n("p",[t._v("对于子列表视图，它是动态生成的，生成之后就不要操作原列表了，否则必然都导致视图的不稳定而抛出异常。最好的办法就是将原列表设置为只读状态，要操作就操作子列表：")]),t._v(" "),n("p",[t._v("//通过subList生成一个与list1一样的列表 list3")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("List<Integer> list3 = list1.subList(0, list1.size());\n")])])]),n("p",[t._v("//对list1设置为只读状态")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("list1 = Collections.unmodifiableList(list1);\n")])])]),n("h3",{attrs:{id:"推荐使用sublist处理局部列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#推荐使用sublist处理局部列表"}},[t._v("#")]),t._v(" 推荐使用subList处理局部列表")]),t._v(" "),n("p",[t._v("在开发过程中我们一定会遇到这样一个问题：获取一堆数据后，需要删除某段数据。例如，有一个列表存在1000条记录，我们需要删除100-200位置处的数据，可能我们会这样处理：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("for(int i = 0 ; i < list1.size() ; i++){\n   if(i >= 100 && i <= 200){\n       list1.remove(i);\n       /*\n        * 当然这段代码存在问题，list remove之后后面的元素会填充上来，\n         * 所以需要对i进行简单的处理，当然这个不是这里讨论的问题。\n         */\n   }\n}\n")])])]),n("p",[t._v("这个应该是我们大部分人的处理方式吧，其实还有更好的方法，利用subList。在前面LZ已经讲过，子列表的操作都会反映在原列表上。所以下面一行代码全部搞定：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("list1.subList(100, 200).clear();\n")])])]),n("p",[t._v("简单而不失华丽！！！！！")]),t._v(" "),n("h2",{attrs:{id:"保持compareto和equals同步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保持compareto和equals同步"}},[t._v("#")]),t._v(" 保持compareTo和equals同步")]),t._v(" "),n("p",[t._v("在Java中我们常使用Comparable接口来实现排序，其中compareTo是实现该接口方法。我们知道compareTo返回0表示两个对象相等，返回正数表示大于，返回负数表示小于。同时我们也知道equals也可以判断两个对象是否相等，那么他们两者之间是否存在关联关系呢？")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public class Student implements Comparable<Student>{\n    private String id;\n    private String name;\n    private int age;\n    \n    public Student(String id,String name,int age){\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n    public boolean equals(Object obj){\n        if(obj == null){\n            return false;\n        }\n        \n        if(this == obj){\n            return true;\n        }\n        \n        if(obj.getClass() != this.getClass()){\n            return false;\n        }\n        \n        Student student = (Student)obj;\n        if(!student.getName().equals(getName())){\n            return false;\n        }\n        \n        return true;\n    }\n    \n    public int compareTo(Student student) {\n        return this.age - student.age;\n    }\n\n    /** 省略getter、setter方法 */\n}\n")])])]),n("p",[t._v("Student类实现Comparable接口和实现equals方法，其中compareTo是根据age来比对的，equals是根据name来比对的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public static void main(String[] args){\n        List<Student> list = new ArrayList<>();\n        list.add(new Student("1", "chenssy1", 24));\n        list.add(new Student("2", "chenssy1", 26));\n        \n        Collections.sort(list);   //排序\n        \n        Student student = new Student("2", "chenssy1", 26);\n        \n        //检索student在list中的位置\n        int index1 = list.indexOf(student);\n        int index2 = Collections.binarySearch(list, student);\n        \n        System.out.println("index1 = " + index1);\n        System.out.println("index2 = " + index2);\n    }\n')])])]),n("p",[t._v("按照常规思路来说应该两者index是一致的，因为他们检索的是同一个对象，但是非常遗憾，其运行结果：")]),t._v(" "),n("p",[t._v("index1 = 0\nindex2 = 1")]),t._v(" "),n("blockquote",[n("p",[t._v("为什么会产生这样不同的结果呢？这是因为indexOf和binarySearch的实现机制不同。")]),t._v(" "),n("p",[t._v("indexOf是基于equals来实现的只要equals返回TRUE就认为已经找到了相同的元素。")]),t._v(" "),n("p",[t._v("而binarySearch是基于compareTo方法的，当compareTo返回0 时就认为已经找到了该元素。")]),t._v(" "),n("p",[t._v("在我们实现的Student类中我们覆写了compareTo和equals方法，但是我们的compareTo、equals的比较依据不同，一个是基于age、一个是基于name。")])]),t._v(" "),n("p",[t._v("比较依据不同那么得到的结果很有可能会不同。所以知道了原因，我们就好修改了：将两者之间的比较依据保持一致即可。")]),t._v(" "),n("p",[t._v("对于compareTo和equals两个方法我们可以总结为：compareTo是判断元素在排序中的位置是否相等，equals是判断元素是否相等，既然一个决定排序位置，一个决定相等，所以我们非常有必要确保当排序位置相同时，其equals也应该相等。")]),t._v(" "),n("p",[t._v("使其相等的方式就是两者应该依附于相同的条件。当compareto相等时equals也应该相等，而compareto不相等时equals不应该相等，并且compareto依据某些属性来决定排序。")]),t._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),n("p",[t._v("https://www.cnblogs.com/galibujianbusana/p/6600226.html")]),t._v(" "),n("p",[t._v("http://blog.itpub.net/69906029/viewspace-2641300/")]),t._v(" "),n("p",[t._v("https://www.cnblogs.com/itxiaok/p/10356553.html")]),t._v(" "),n("h2",{attrs:{id:"微信公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[t._v("#")]),t._v(" 微信公众号")]),t._v(" "),n("h3",{attrs:{id:"java技术江湖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[t._v("#")]),t._v(" Java技术江湖")]),t._v(" "),n("p",[t._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),t._v(" "),n("p",[n("strong",[t._v("Java工程师必备学习资源:")]),t._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),n("strong",[t._v("“Java”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),t._v(" "),n("h3",{attrs:{id:"个人公众号-黄小斜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[t._v("#")]),t._v(" 个人公众号：黄小斜")]),t._v(" "),n("p",[t._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),t._v(" "),n("p",[n("strong",[t._v("程序员3T技术学习资源：")]),t._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),n("strong",[t._v("“资料”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})]),t._v(" "),n("p",[t._v("​")])])}),[],!1,null,null,null);s.default=a.exports}}]);