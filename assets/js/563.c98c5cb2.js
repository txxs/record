(window.webpackJsonp=window.webpackJsonp||[]).push([[563],{953:function(t,n,r){"use strict";r.r(n);var a=r(13),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#string%E5%9F%BA%E7%A1%80"}},[t._v("string基础")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#java-string-%E7%B1%BB"}},[t._v("Java String 类")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2"}},[t._v("创建字符串")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#stringdemojava-%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%EF%BC%9A"}},[t._v("StringDemo.java 文件代码：")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95"}},[t._v("String基本用法")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%88%9B%E5%BB%BAstring%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95"}},[t._v("创建String对象的常用方法")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E7%94%A8%E6%B3%95%E5%A6%82%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%8C%E5%85%B7%E4%BD%93%E9%97%AE%E5%BA%A6%E5%A8%98"}},[t._v("String中常用的方法，用法如图所示，具体问度娘")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%9A-lenth---substring---charat"}},[t._v("三个方法的使用： lenth()   substring()   charAt()")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Ebyte%E6%95%B0%E7%BB%84%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2"}},[t._v("字符串与byte数组间的相互转换")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8Cequals%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A"}},[t._v("==运算符和equals之间的区别：")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7"}},[t._v("字符串的不可变性")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E7%9A%84%E8%BF%9E%E6%8E%A5"}},[t._v("String的连接")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E3%80%81string-builder%E5%92%8Cstring-buffer%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("String、String builder和String buffer的区别")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E7%B1%BB%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"}},[t._v("String类的源码分析")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#string%E7%B1%BB%E5%9E%8B%E7%9A%84intern"}},[t._v("String类型的intern")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E7%B1%BB%E5%9E%8B%E7%9A%84equals"}},[t._v("String类型的equals")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#stringbuffer%E5%92%8Cstringbuilder"}},[t._v("StringBuffer和Stringbuilder")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#append%E6%96%B9%E6%B3%95"}},[t._v("append方法")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%89%A9%E5%AE%B9"}},[t._v("扩容")]),t._v("\n* "),r("a",{attrs:{href:"#"}})]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%88%A0%E9%99%A4"}},[t._v("删除")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#systemarraycopy%E6%96%B9%E6%B3%95"}},[t._v("system.arraycopy方法")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E5%92%8Cjvm%E7%9A%84%E5%85%B3%E7%B3%BB"}},[t._v("String和JVM的关系")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98%EF%BC%9F"}},[t._v("String为什么不可变？")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F"}},[t._v("不可变有什么好处？")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#string%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB"}},[t._v("String常用工具类")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[t._v("参考文章")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[t._v("微信公众号")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[t._v("Java技术江湖")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[t._v("个人公众号：黄小斜")])])])])]),t._v(" "),r("p",[t._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),t._v(" "),r("blockquote",[r("p",[t._v("https://github.com/h2pl/Java-Tutorial")])]),t._v(" "),r("p",[t._v("喜欢的话麻烦点下Star哈")]),t._v(" "),r("p",[t._v("文章首发于我的个人博客：")]),t._v(" "),r("blockquote",[r("p",[t._v("www.how2playlife.com")])]),t._v(" "),r("p",[t._v("本文是微信公众号【Java技术江湖】的《夯实Java基础系列博文》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。\n该系列博文会告诉你如何从入门到进阶，一步步地学习Java基础知识，并上手进行实战，接着了解每个Java知识点背后的实现原理，更完整地了解整个Java技术体系，形成自己的知识框架。为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),t._v(" "),r("p",[t._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),t._v(" "),r("h2",{attrs:{id:"string基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string基础"}},[t._v("#")]),t._v(" string基础")]),t._v(" "),r("h3",{attrs:{id:"java-string-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-string-类"}},[t._v("#")]),t._v(" Java String 类")]),t._v(" "),r("p",[t._v("字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。")]),t._v(" "),r("h3",{attrs:{id:"创建字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建字符串"}},[t._v("#")]),t._v(" 创建字符串")]),t._v(" "),r("p",[t._v("创建字符串最简单的方式如下:")]),t._v(" "),r("p",[t._v('String greeting = "菜鸟教程";')]),t._v(" "),r("p",[t._v('在代码中遇到字符串常量时，这里的值是 "'),r("strong",[t._v("菜鸟教程")]),t._v('""，编译器会使用该值创建一个 String 对象。')]),t._v(" "),r("p",[t._v("和其它对象一样，可以使用关键字和构造方法来创建 String 对象。")]),t._v(" "),r("p",[t._v("String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:")]),t._v(" "),r("h3",{attrs:{id:"stringdemo-java-文件代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringdemo-java-文件代码"}},[t._v("#")]),t._v(" StringDemo.java 文件代码：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("public class StringDemo{    public static void main(String args[]){       char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'};       String helloString = new String(helloArray);         System.out.println( helloString );    } }\n")])])]),r("p",[t._v("以上实例编译运行结果如下：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("runoob\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。")]),t._v(" "),r("p",[t._v("如果需要对字符串做很多修改，那么应该选择使用 "),r("a",{attrs:{href:"https://www.runoob.com/java/java-stringbuffer.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("StringBuffer & StringBuilder 类"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"string基本用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string基本用法"}},[t._v("#")]),t._v(" String基本用法")]),t._v(" "),r("h3",{attrs:{id:"创建string对象的常用方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建string对象的常用方法"}},[t._v("#")]),t._v(" 创建String对象的常用方法")]),t._v(" "),r("p",[t._v('（1） String s1 = "mpptest"')]),t._v(" "),r("p",[t._v("(2)  String s2 = new String();")]),t._v(" "),r("p",[t._v('(3) String s3 = new String("mpptest")')]),t._v(" "),r("h3",{attrs:{id:"string中常用的方法-用法如图所示-具体问度娘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string中常用的方法-用法如图所示-具体问度娘"}},[t._v("#")]),t._v(" String中常用的方法，用法如图所示，具体问度娘")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img2018.cnblogs.com/blog/710412/201902/710412-20190213220237169-1966705420.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"三个方法的使用-lenth-substring-charat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三个方法的使用-lenth-substring-charat"}},[t._v("#")]),t._v(" 三个方法的使用： lenth()   substring()   charAt()")]),t._v(" "),r("pre",[t._v('package com.mpp.string; public class StringDemo1 { public static void main(String[] args) { //定义一个字符串"晚来天欲雪 能饮一杯无"\n        String str = "晚来天欲雪 能饮一杯无";\n        System.out.println("字符串的长度是："+str.length()); //字符串的雪字打印输出  charAt(int index)\n        System.out.println(str.charAt(4)); //取出子串  天欲\n        System.out.println(str.substring(2));   //取出从index2开始直到最后的子串，包含2\n        System.out.println(str.substring(2,4));  //取出index从2到4的子串，包含2不包含4  顾头不顾尾\n }\n}')]),t._v(" "),r("p",[t._v("两个方法的使用,求字符或子串第一次/最后一次在字符串中出现的位置： indexOf()   lastIndexOf()")]),t._v(" "),r("pre",[t._v('package com.mpp.string; public class StringDemo2 { public static void main(String[] args) {\n        String str = new String("赵客缦胡缨 吴钩胡缨霜雪明"); //查找胡在字符串中第一次出现的位置\n        System.out.println("\\"胡\\"在字符串中第一次出现的位置："+str.indexOf("胡")); //查找子串"胡缨"在字符串中第一次出现的位置\n        System.out.println("\\"胡缨\\"在字符串中第一次出现的位置"+str.indexOf("胡缨")); //查找胡在字符串中最后一次次出现的位置\n        System.out.println(str.lastIndexOf("胡")); //查找子串"胡缨"在字符串中最后一次出现的位置\n        System.out.println(str.lastIndexOf("胡缨")); //从indexof为5的位置，找第一次出现的"吴"\n        System.out.println(str.indexOf("吴",5));\n    }\n}')]),t._v(" "),r("h3",{attrs:{id:"字符串与byte数组间的相互转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串与byte数组间的相互转换"}},[t._v("#")]),t._v(" 字符串与byte数组间的相互转换")]),t._v(" "),r("pre",[t._v('package com.mpp.string; import java.io.UnsupportedEncodingException; public class StringDemo3 { public static void main(String[] args) throws UnsupportedEncodingException { //字符串和byte数组之间的相互转换\n String str = new String("hhhabc银鞍照白马 飒沓如流星"); //将字符串转换为byte数组，并打印输出\n        byte[] arrs = str.getBytes("GBK"); for(int i=0;i){\n            System.out.print(arrs[i]);\n        } //将byte数组转换成字符串\n System.out.println();\n        String str1 = new String(arrs,"GBK");  //保持字符集的一致，否则会出现乱码\n System.out.println(str1);\n    }\n}')]),t._v(" "),r("h3",{attrs:{id:"运算符和equals之间的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运算符和equals之间的区别"}},[t._v("#")]),t._v(" ==运算符和equals之间的区别：")]),t._v(" "),r("pre",[t._v("引用指向的内容和引用指向的地址")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img2018.cnblogs.com/blog/710412/201902/710412-20190214223341972-1204335921.png",alt:""}})]),t._v(" "),r("pre",[t._v('package com.mpp.string; public class StringDemo5 { public static void main(String[] args) {\n        String str1 = "mpp";\n        String str2 = "mpp";\n        String str3 = new String("mpp");\n\n        System.out.println(str1.equals(str2)); //true  内容相同\n        System.out.println(str1.equals(str3));   //true  内容相同\n        System.out.println(str1==str2);   //true   地址相同\n        System.out.println(str1==str3);   //false  地址不同\n }\n}')]),t._v(" "),r("h3",{attrs:{id:"字符串的不可变性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串的不可变性"}},[t._v("#")]),t._v(" 字符串的不可变性")]),t._v(" "),r("p",[t._v("String的对象一旦被创建，则不能修改，是不可变的")]),t._v(" "),r("p",[t._v("所谓的修改其实是创建了新的对象，所指向的内存空间不变")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img2018.cnblogs.com/blog/710412/201902/710412-20190214224055939-746946317.png",alt:""}})]),t._v(" "),r("p",[t._v("上图中，s1不再指向imooc所在的内存空间，而是指向了hello,imooc")]),t._v(" "),r("h3",{attrs:{id:"string的连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string的连接"}},[t._v("#")]),t._v(" String的连接")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('@Test\npublic void contact () {\n    //1连接方式\n    String s1 = "a";\n    String s2 = "a";\n    String s3 = "a" + s2;\n    String s4 = "a" + "a";\n    String s5 = s1 + s2;\n    //表达式只有常量时，编译期完成计算\n    //表达式有变量时，运行期才计算，所以地址不一样\n    System.out.println(s3 == s4); //f\n    System.out.println(s3 == s5); //f\n    System.out.println(s4 == "aa"); //t\n\n}\n')])])]),r("h3",{attrs:{id:"string、string-builder和string-buffer的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string、string-builder和string-buffer的区别"}},[t._v("#")]),t._v(" String、String builder和String buffer的区别")]),t._v(" "),r("p",[t._v("String是Java中基础且重要的类，并且String也是Immutable类的典型实现，被声明为final class，除了hash这个属性其它属性都声明为final,因为它的不可变性，所以例如拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。")]),t._v(" "),r("p",[t._v("StringBuffer就是为了解决大量拼接字符串时产生很多中间对象问题而提供的一个类，提供append和add方法，可以将字符串添加到已有序列的末尾或指定位置，它的本质是一个线程安全的可修改的字符序列，把所有修改数据的方法都加上了synchronized。但是保证了线程安全是需要性能的代价的。")]),t._v(" "),r("p",[t._v("在很多情况下我们的字符串拼接操作不需要线程安全，这时候StringBuilder登场了，StringBuilder是JDK1.5发布的，它和StringBuffer本质上没什么区别，就是去掉了保证线程安全的那部分，减少了开销。")]),t._v(" "),r("p",[t._v("StringBuffer 和 StringBuilder 二者都继承了 AbstractStringBuilder ，底层都是利用可修改的char数组(JDK 9 以后是 byte数组)。")]),t._v(" "),r("p",[t._v("所以如果我们有大量的字符串拼接，如果能预知大小的话最好在new StringBuffer 或者StringBuilder 的时候设置好capacity，避免多次扩容的开销。扩容要抛弃原有数组，还要进行数组拷贝创建新的数组。")]),t._v(" "),r("p",[t._v("我们平日开发通常情况下少量的字符串拼接其实没太必要担心，例如")]),t._v(" "),r("p",[t._v('String str = "aa"+"bb"+"cc";')]),t._v(" "),r("p",[t._v('像这种没有变量的字符串，编译阶段就直接合成"aabbcc"了，然后看字符串常量池（下面会说到常量池）里有没有，有也直接引用，没有就在常量池中生成，返回引用。')]),t._v(" "),r("p",[t._v("如果是带变量的，其实影响也不大，JVM会帮我们优化了。")]),t._v(" "),r("blockquote",[r("p",[t._v("1、在字符串不经常发生变化的业务场景优先使用String(代码更清晰简洁)。如常量的声明，少量的字符串操作(拼接，删除等)。")]),t._v(" "),r("p",[t._v('2、在单线程情况下，如有大量的字符串操作情况，应该使用StringBuilder来操作字符串。不能使用String"+"来拼接而是使用，避免产生大量无用的中间对象，耗费空间且执行效率低下（新建对象、回收对象花费大量时间）。如JSON的封装等。')]),t._v(" "),r("p",[t._v("3、在多线程情况下，如有大量的字符串操作情况，应该使用StringBuffer。如HTTP参数解析和封装等。")])]),t._v(" "),r("h2",{attrs:{id:"string类的源码分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string类的源码分析"}},[t._v("#")]),t._v(" String类的源码分析")]),t._v(" "),r("h3",{attrs:{id:"string类型的intern"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string类型的intern"}},[t._v("#")]),t._v(" String类型的intern")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('public void intern () {\n    //2：string的intern使用\n    //s1是基本类型，比较值。s2是string实例，比较实例地址\n    //字符串类型用equals方法比较时只会比较值\n    String s1 = "a";\n    String s2 = new String("a");\n    //调用intern时,如果s2中的字符不在常量池，则加入常量池并返回常量的引用\n    String s3 = s2.intern();\n    System.out.println(s1 == s2);\n    System.out.println(s1 == s3);\n}\n')])])]),r("h3",{attrs:{id:"string类型的equals"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string类型的equals"}},[t._v("#")]),t._v(" String类型的equals")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("//字符串的equals方法\n//    public boolean equals(Object anObject) {\n//            if (this == anObject) {\n//                return true;\n//            }\n//            if (anObject instanceof String) {\n//                String anotherString = (String)anObject;\n//                int n = value.length;\n//                if (n == anotherString.value.length) {\n//                    char v1[] = value;\n//                    char v2[] = anotherString.value;\n//                    int i = 0;\n//                    while (n-- != 0) {\n//                        if (v1[i] != v2[i])\n//                            return false;\n//                        i++;\n//                    }\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n")])])]),r("h3",{attrs:{id:"stringbuffer和stringbuilder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer和stringbuilder"}},[t._v("#")]),t._v(" StringBuffer和Stringbuilder")]),t._v(" "),r("p",[t._v("底层是继承父类的可变字符数组value")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("/**\n\n- The value is used for character storage.\n  */\n  char[] value;\n  初始化容量为16\n\n/**\n\n- Constructs a string builder with no characters in it and an\n- initial capacity of 16 characters.\n  */\n  public StringBuilder() {\n  super(16);\n  }\n  这两个类的append方法都是来自父类AbstractStringBuilder的方法\n\npublic AbstractStringBuilder append(String str) {\n    if (str == null)\n        return appendNull();\n    int len = str.length();\n    ensureCapacityInternal(count + len);\n    str.getChars(0, len, value, count);\n    count += len;\n    return this;\n}\n@Override\npublic StringBuilder append(String str) {\n    super.append(str);\n    return this;\n}\n\n@Override\npublic synchronized StringBuffer append(String str) {\n    toStringCache = null;\n    super.append(str);\n    return this;\n}\n")])])]),r("h3",{attrs:{id:"append方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#append方法"}},[t._v("#")]),t._v(" append方法")]),t._v(" "),r("p",[t._v("Stringbuffer在大部分涉及字符串修改的操作上加了synchronized关键字来保证线程安全，效率较低。")]),t._v(" "),r("p",[t._v("String类型在使用 + 运算符例如")]),t._v(" "),r("p",[t._v('String a = "a"')]),t._v(" "),r("p",[t._v("a = a + a;时，实际上先把a封装成stringbuilder，调用append方法后再用tostring返回，所以当大量使用字符串加法时，会大量地生成stringbuilder实例，这是十分浪费的，这种时候应该用stringbuilder来代替string。")]),t._v(" "),r("h3",{attrs:{id:"扩容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),r("p",[t._v("#注意在append方法中调用到了一个函数")]),t._v(" "),r("p",[t._v("ensureCapacityInternal(count + len);\n该方法是计算append之后的空间是否足够，不足的话需要进行扩容")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("public void ensureCapacity(int minimumCapacity) {\n    if (minimumCapacity > 0)\n        ensureCapacityInternal(minimumCapacity);\n}\nprivate void ensureCapacityInternal(int minimumCapacity) {\n    // overflow-conscious code\n    if (minimumCapacity - value.length > 0) {\n        value = Arrays.copyOf(value,\n                newCapacity(minimumCapacity));\n    }\n}\n")])])]),r("p",[t._v("如果新字符串长度大于value数组长度则进行扩容")]),t._v(" "),r("p",[t._v("扩容后的长度一般为原来的两倍 + 2；")]),t._v(" "),r("p",[t._v("假如扩容后的长度超过了jvm支持的最大数组长度MAX_ARRAY_SIZE。")]),t._v(" "),r("p",[t._v("考虑两种情况")]),t._v(" "),r("p",[t._v("如果新的字符串长度超过int最大值，则抛出异常，否则直接使用数组最大长度作为新数组的长度。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("private int hugeCapacity(int minCapacity) {\n    if (Integer.MAX_VALUE - minCapacity < 0) { // overflow\n        throw new OutOfMemoryError();\n    }\n    return (minCapacity > MAX_ARRAY_SIZE)\n        ? minCapacity : MAX_ARRAY_SIZE;\n}\n")])])]),r("h3",{attrs:{id:"删除"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),r("p",[t._v("这两个类型的删除操作：")]),t._v(" "),r("p",[t._v("都是调用父类的delete方法进行删除")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("public AbstractStringBuilder delete(int start, int end) {\n    if (start < 0)\n        throw new StringIndexOutOfBoundsException(start);\n    if (end > count)\n        end = count;\n    if (start > end)\n        throw new StringIndexOutOfBoundsException();\n    int len = end - start;\n    if (len > 0) {\n        System.arraycopy(value, start+len, value, start, count-end);\n        count -= len;\n    }\n    return this;\n}\n")])])]),r("p",[t._v("事实上是将剩余的字符重新拷贝到字符数组value。")]),t._v(" "),r("p",[t._v("这里用到了system.arraycopy来拷贝数组，速度是比较快的")]),t._v(" "),r("h3",{attrs:{id:"system-arraycopy方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#system-arraycopy方法"}},[t._v("#")]),t._v(" system.arraycopy方法")]),t._v(" "),r("p",[t._v("转自知乎：")]),t._v(" "),r("blockquote",[r("p",[t._v("在主流高性能的JVM上（HotSpot VM系、IBM J9 VM系、JRockit系等等），可以认为System.arraycopy()在拷贝数组时是可靠高效的——如果发现不够高效的情况，请报告performance bug，肯定很快就会得到改进。")]),t._v(" "),r("p",[t._v("java.lang.System.arraycopy()方法在Java代码里声明为一个native方法。所以最naïve的实现方式就是通过JNI调用JVM里的native代码来实现。")]),t._v(" "),r("p",[t._v("String的不可变性\n关于String的不可变性，这里转一个不错的回答")]),t._v(" "),r("p",[t._v('什么是不可变？\nString不可变很简单，如下图，给一个已有字符串"abcd"第二次赋值成"abcedl"，不是在原内存地址上修改数据，而是重新指向一个新对象，新地址。')])]),t._v(" "),r("h2",{attrs:{id:"string和jvm的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string和jvm的关系"}},[t._v("#")]),t._v(" String和JVM的关系")]),t._v(" "),r("p",[t._v("下面我们了解下Java栈、Java堆、方法区和常量池：")]),t._v(" "),r("p",[t._v("Java栈（线程私有数据区）：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    每个Java虚拟机线程都有自己的Java虚拟机栈，Java虚拟机栈用来存放栈帧，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("Java堆（线程共享数据区）：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("   在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("方法区（线程共享数据区）：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("   方法区在虚拟机启动的时候被创建，它存储了每一个类的结构信息，例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容、还包括在类、实例、接口初始化时用到的特殊方法。在JDK8之前永久代是方法区的一种实现，而JDK8元空间替代了永久代，永久代被移除，也可以理解为元空间是方法区的一种实现。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("常量池（线程共享数据区）：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    常量池常被分为两大类：静态常量池和运行时常量池。\n\n    静态常量池也就是Class文件中的常量池，存在于Class文件中。\n\n    运行时常量池（Runtime Constant Pool）是方法区的一部分，存放一些运行时常量数据。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("p",[t._v("下面重点了解的是字符串常量池：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    字符串常量池存在运行时常量池之中（在JDK7之前存在运行时常量池之中，在JDK7已经将其转移到堆中）。\n\n    字符串常量池的存在使JVM提高了性能和减少了内存开销。\n\n    使用字符串常量池，每当我们使用字面量（String s=”1”;）创建字符串常量时，JVM会首先检查字符串常量池，如果该字符串已经存在常量池中，那么就将此字符串对象的地址赋值给引用s（引用s在Java栈中）。如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中，并将此字符串对象的地址赋值给引用s（引用s在Java栈中）。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    使用字符串常量池，每当我们使用关键字new（String s=new String(”1”);）创建字符串常量时，JVM会首先检查字符串常量池，如果该字符串已经存在常量池中，那么不再在字符串常量池创建该字符串对象，而直接堆中复制该对象的副本，然后将堆中对象的地址赋值给引用s，如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中，然后在堆中复制该对象的副本，然后将堆中对象的地址赋值给引用s。\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("h2",{attrs:{id:"string为什么不可变"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string为什么不可变"}},[t._v("#")]),t._v(" String为什么不可变？")]),t._v(" "),r("p",[t._v("翻开JDK源码，java.lang.String类起手前三行，是这样写的：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("public final class String implements java.io.Serializable, Comparable<String>, CharSequence {   \n  /** String本质是个char数组. 而且用final关键字修饰.*/     \nprivate final char value[];  ...  ...\n } \n")])])]),r("p",[t._v("首先String类是用final关键字修饰，这说明String不可继承。再看下面，String类的主力成员字段value是个char[]数组，而且是用final修饰的。")]),t._v(" "),r("p",[t._v("final修饰的字段创建以后就不可改变。 有的人以为故事就这样完了，其实没有。因为虽然value是不可变，也只是value这个引用地址不可变。挡不住Array数组是可变的事实。")]),t._v(" "),r("p",[t._v("Array的数据结构看下图。")]),t._v(" "),r("p",[t._v("也就是说Array变量只是stack上的一个引用，数组的本体结构在heap堆。")]),t._v(" "),r("p",[t._v("String类里的value用final修饰，只是说stack里的这个叫value的引用地址不可变。没有说堆里array本身数据不可变。看下面这个例子，")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("final int[] value={1,2,3} ；\nint[] another={4,5,6};\n value=another;    //编译器报错，final不可变 value用final修饰，编译器不允许我把value指向堆区另一个地址。\n但如果我直接对数组元素动手，分分钟搞定。\n\n final int[] value={1,2,3};\n value[2]=100;  //这时候数组里已经是{1,2,100}   所以String是不可变，关键是因为SUN公司的工程师。\n 在后面所有String的方法里很小心的没有去动Array里的元素，没有暴露内部成员字段。private final char value[]这一句里，private的私有访问权限的作用都比final大。而且设计师还很小心地把整个String设成final禁止继承，避免被其他人继承后破坏。所以String是不可变的关键都在底层的实现，而不是一个final。考验的是工程师构造数据类型，封装数据的功力。 \n")])])]),r("h3",{attrs:{id:"不可变有什么好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不可变有什么好处"}},[t._v("#")]),t._v(" 不可变有什么好处？")]),t._v(" "),r("p",[t._v("这个最简单地原因，就是为了安全。看下面这个场景（有评论反应例子不够清楚，现在完整地写出来），一个函数appendStr( )在不可变的String参数后面加上一段“bbb”后返回。appendSb( )负责在可变的StringBuilder后面加“bbb”。")]),t._v(" "),r("p",[t._v("总结以下String的不可变性。")]),t._v(" "),r("blockquote",[r("p",[t._v("1 首先final修饰的类只保证不能被继承，并且该类的对象在堆内存中的地址不会被改变。")]),t._v(" "),r("p",[t._v("2 但是持有String对象的引用本身是可以改变的，比如他可以指向其他的对象。")]),t._v(" "),r("p",[t._v("3 final修饰的char数组保证了char数组的引用不可变。但是可以通过char[0] = 'a’来修改值。不过String内部并不提供方法来完成这一操作，所以String的不可变也是基于代码封装和访问控制的。")])]),t._v(" "),r("p",[t._v("举个例子")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("final class Fi {\n    int a;\n    final int b = 0;\n    Integer s;\n\n}\nfinal char[]a = {'a'};\nfinal int[]b = {1};\n@Test\npublic void final修饰类() {\n    //引用没有被final修饰，所以是可变的。\n    //final只修饰了Fi类型，即Fi实例化的对象在堆中内存地址是不可变的。\n    //虽然内存地址不可变，但是可以对内部的数据做改变。\n    Fi f = new Fi();\n    f.a = 1;\n    System.out.println(f);\n    f.a = 2;\n    System.out.println(f);\n    //改变实例中的值并不改变内存地址。\n")])])]),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Fi ff = f;\n//让引用指向新的Fi对象，原来的f对象由新的引用ff持有。\n//引用的指向改变也不会改变原来对象的地址\nf = new Fi();\nSystem.out.println(f);\nSystem.out.println(ff);\n\n}\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br")])]),r("p",[t._v("这里的对f.a的修改可以理解为char[0] = 'a'这样的操作。只改变数据值，不改变内存值。")]),t._v(" "),r("h2",{attrs:{id:"string常用工具类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string常用工具类"}},[t._v("#")]),t._v(" String常用工具类")]),t._v(" "),r("p",[t._v("问题描述\n很多时候我们需要对字符串进行很多固定的操作,而这些操作在JDK/JRE中又没有预置,于是我们想到了apache-commons组件,但是它也不能完全覆盖我们的业务需求,所以很多时候还是要自己写点代码的,下面就是基于apache-commons组件写的部分常用方法:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("MAVEN依赖\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-lang3</artifactId>\n\t<version>${commons-lang3.version}</version>\n </dependency>\n")])])]),r("p",[t._v("代码成果")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('public class StringUtils extends org.apache.commons.lang3.StringUtils {\n\n/** 值为"NULL"的字符串 */\nprivate static final String NULL_STRING = "NULL";\n\nprivate static final char SEPARATOR = \'_\';\n\n\n/**\n * 满足一下情况返回true<br/>\n * ①.入参为空\n * ②.入参为空字符串\n * ③.入参为"null"字符串\n *\n * @param string 需要判断的字符型\n * @return boolean\n */\npublic static boolean isNullOrEmptyOrNULLString(String string) {\n    return isBlank(string) || NULL_STRING.equalsIgnoreCase(string);\n}\n\n/**\n * 把字符串转为二进制码<br/>\n * 本方法不会返回null\n *\n * @param str 需要转换的字符串\n * @return 二进制字节码数组\n */\npublic static byte[] toBytes(String str) {\n    return isBlank(str) ? new byte[]{} : str.getBytes();\n}\n\n/**\n * 把字符串转为二进制码<br/>\n * 本方法不会返回null\n *\n * @param str     需要转换的字符串\n * @param charset 编码类型\n * @return 二进制字节码数组\n * @throws UnsupportedEncodingException 字符串转换的时候编码不支持时出现\n */\npublic static byte[] toBytes(String str, Charset charset) throws UnsupportedEncodingException {\n    return isBlank(str) ? new byte[]{} : str.getBytes(charset.displayName());\n}\n\n/**\n * 把字符串转为二进制码<br/>\n * 本方法不会返回null\n *\n * @param str     需要转换的字符串\n * @param charset 编码类型\n * @param locale  编码类型对应的地区\n * @return 二进制字节码数组\n * @throws UnsupportedEncodingException 字符串转换的时候编码不支持时出现\n */\npublic static byte[] toBytes(String str, Charset charset, Locale locale) throws UnsupportedEncodingException {\n    return isBlank(str) ? new byte[]{} : str.getBytes(charset.displayName(locale));\n}\n\n/**\n * 二进制码转字符串<br/>\n * 本方法不会返回null\n *\n * @param bytes 二进制码\n * @return 字符串\n */\npublic static String bytesToString(byte[] bytes) {\n    return bytes == null || bytes.length == 0 ? EMPTY : new String(bytes);\n}\n\n/**\n * 二进制码转字符串<br/>\n * 本方法不会返回null\n *\n * @param bytes   二进制码\n * @param charset 编码集\n * @return 字符串\n * @throws UnsupportedEncodingException 当前二进制码可能不支持传入的编码\n */\npublic static String byteToString(byte[] bytes, Charset charset) throws UnsupportedEncodingException {\n    return bytes == null || bytes.length == 0 ? EMPTY : new String(bytes, charset.displayName());\n}\n\n/**\n * 二进制码转字符串<br/>\n * 本方法不会返回null\n *\n * @param bytes   二进制码\n * @param charset 编码集\n * @param locale  本地化\n * @return 字符串\n * @throws UnsupportedEncodingException 当前二进制码可能不支持传入的编码\n */\npublic static String byteToString(byte[] bytes, Charset charset, Locale locale) throws UnsupportedEncodingException {\n    return bytes == null || bytes.length == 0 ? EMPTY : new String(bytes, charset.displayName(locale));\n}\n\n/**\n * 把对象转为字符串\n *\n * @param object 需要转化的字符串\n * @return 字符串, 可能为空\n */\npublic static String parseString(Object object) {\n    if (object == null) {\n        return null;\n    }\n    if (object instanceof byte[]) {\n        return bytesToString((byte[]) object);\n    }\n    return object.toString();\n}\n\n/**\n * 把字符串转为int类型\n *\n * @param str 需要转化的字符串\n * @return int\n * @throws NumberFormatException 字符串格式不正确时抛出\n */\npublic static int parseInt(String str) throws NumberFormatException {\n    return isBlank(str) ? 0 : Integer.parseInt(str);\n}\n\n/**\n * 把字符串转为double类型\n *\n * @param str 需要转化的字符串\n * @return double\n * @throws NumberFormatException 字符串格式不正确时抛出\n */\npublic static double parseDouble(String str) throws NumberFormatException {\n    return isBlank(str) ? 0D : Double.parseDouble(str);\n}\n\n/**\n * 把字符串转为long类型\n *\n * @param str 需要转化的字符串\n * @return long\n * @throws NumberFormatException 字符串格式不正确时抛出\n */\npublic static long parseLong(String str) throws NumberFormatException {\n    return isBlank(str) ? 0L : Long.parseLong(str);\n}\n\n/**\n * 把字符串转为float类型\n *\n * @param str 需要转化的字符串\n * @return float\n * @throws NumberFormatException 字符串格式不正确时抛出\n */\npublic static float parseFloat(String str) throws NumberFormatException {\n    return isBlank(str) ? 0L : Float.parseFloat(str);\n}\n\n/**\n * 获取i18n字符串\n *\n * @param code\n * @param args\n * @return\n */\npublic static String getI18NMessage(String code, Object[] args) {\n    //LocaleResolver localLocaleResolver = (LocaleResolver) SpringContextHolder.getBean(LocaleResolver.class);\n    //HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();\n    //Locale locale = localLocaleResolver.resolveLocale(request);\n    //return SpringContextHolder.getApplicationContext().getMessage(code, args, locale);\n    return "";\n}\n\n/**\n * 获得用户远程地址\n *\n * @param request 请求头\n * @return 用户ip\n */\npublic static String getRemoteAddr(HttpServletRequest request) {\n    String remoteAddr = request.getHeader("X-Real-IP");\n    if (isNotBlank(remoteAddr)) {\n        remoteAddr = request.getHeader("X-Forwarded-For");\n    } else if (isNotBlank(remoteAddr)) {\n        remoteAddr = request.getHeader("Proxy-Client-IP");\n    } else if (isNotBlank(remoteAddr)) {\n        remoteAddr = request.getHeader("WL-Proxy-Client-IP");\n    }\n    return remoteAddr != null ? remoteAddr : request.getRemoteAddr();\n}\n\n/**\n * 驼峰命名法工具\n *\n * @return toCamelCase(" hello_world ") == "helloWorld"\n * toCapitalizeCamelCase("hello_world") == "HelloWorld"\n * toUnderScoreCase("helloWorld") = "hello_world"\n */\npublic static String toCamelCase(String s, Locale locale, char split) {\n    if (isBlank(s)) {\n        return "";\n    }\n\n    s = s.toLowerCase(locale);\n\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        sb.append(c == split ? Character.toUpperCase(c) : c);\n    }\n\n    return sb.toString();\n}\n\npublic static String toCamelCase(String s) {\n    return toCamelCase(s, Locale.getDefault(), SEPARATOR);\n}\n\npublic static String toCamelCase(String s, Locale locale) {\n    return toCamelCase(s, locale, SEPARATOR);\n}\n\npublic static String toCamelCase(String s, char split) {\n    return toCamelCase(s, Locale.getDefault(), split);\n}\n\npublic static String toUnderScoreCase(String s, char split) {\n    if (isBlank(s)) {\n        return "";\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        boolean nextUpperCase = (i < (s.length() - 1)) && Character.isUpperCase(s.charAt(i + 1));\n        boolean upperCase = (i > 0) && Character.isUpperCase(c);\n        sb.append((!upperCase || !nextUpperCase) ? split : "").append(Character.toLowerCase(c));\n    }\n\n    return sb.toString();\n}\n\npublic static String toUnderScoreCase(String s) {\n    return toUnderScoreCase(s, SEPARATOR);\n}\n\n/**\n * 把字符串转换为JS获取对象值的三目运算表达式\n *\n * @param objectString 对象串\n *                     例如：入参:row.user.id/返回：!row?\'\':!row.user?\'\':!row.user.id?\'\':row.user.id\n */\npublic static String toJsGetValueExpression(String objectString) {\n    StringBuilder result = new StringBuilder();\n    StringBuilder val = new StringBuilder();\n    String[] fileds = split(objectString, ".");\n    for (int i = 0; i < fileds.length; i++) {\n        val.append("." + fileds[i]);\n        result.append("!" + (val.substring(1)) + "?\'\':");\n    }\n    result.append(val.substring(1));\n    return result.toString();\n}\n\n\n}\n')])])]),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),r("p",[t._v("https://blog.csdn.net/qq_34490018/article/details/82110578\nhttps://www.runoob.com/java/java-string.html\nhttps://www.cnblogs.com/zhangyinhua/p/7689974.html\nhttps://blog.csdn.net/sinat_21925975/article/details/86493248\nhttps://www.cnblogs.com/niew/p/9597379.html")]),t._v(" "),r("h2",{attrs:{id:"微信公众号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[t._v("#")]),t._v(" 微信公众号")]),t._v(" "),r("h3",{attrs:{id:"java技术江湖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[t._v("#")]),t._v(" Java技术江湖")]),t._v(" "),r("p",[t._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),t._v(" "),r("p",[r("strong",[t._v("Java工程师必备学习资源:")]),t._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),r("strong",[t._v("“Java”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),t._v(" "),r("h3",{attrs:{id:"个人公众号-黄小斜"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[t._v("#")]),t._v(" 个人公众号：黄小斜")]),t._v(" "),r("p",[t._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),t._v(" "),r("p",[r("strong",[t._v("程序员3T技术学习资源：")]),t._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),r("strong",[t._v("“资料”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);n.default=e.exports}}]);