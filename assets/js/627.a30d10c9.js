(window.webpackJsonp=window.webpackJsonp||[]).push([[627],{1021:function(n,e,t){"use strict";t.r(e);var r=t(13),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"table-of-contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#netty%E6%A6%82%E8%BF%B0"}},[n._v("Netty概述")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#etty%E7%AE%80%E4%BB%8B"}},[n._v("etty简介")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#netty%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%EF%BC%9F"}},[n._v("Netty都有哪些组件？")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#netty%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E7%9A%84%E5%91%A2%EF%BC%9F"}},[n._v("Netty是如何处理连接请求和业务逻辑的呢？")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AAnetty%E5%BA%94%E7%94%A8%EF%BC%9F"}},[n._v("如何配置一个Netty应用？")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#netty%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%9F"}},[n._v("Netty是如何处理数据的？")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E6%88%91%E4%BB%AC%E7%9A%84%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%EF%BC%9F"}},[n._v("如何处理我们的业务逻辑？")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#bytebuf"}},[n._v("ByteBuf")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#channel"}},[n._v("Channel")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#channelhandler"}},[n._v("ChannelHandler")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#channelpipeline"}},[n._v("ChannelPipeline")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#eventloop"}},[n._v("EventLoop")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#bootstrap"}},[n._v("Bootstrap")])]),n._v(" "),t("li",[t("a",{attrs:{href:"#echo%E7%A4%BA%E4%BE%8B"}},[n._v("Echo示例")])])])]),n._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE"}},[n._v("参考文献")])])]),n._v(" "),t("p",[n._v("本文转自：https://sylvanassun.github.io/2017/11/30/2017-11-30-netty_introduction/")]),n._v(" "),t("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),t("blockquote",[t("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),t("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),t("p",[n._v("文章将同步到我的个人博客：")]),n._v(" "),t("blockquote",[t("p",[n._v("www.how2playlife.com")])]),n._v(" "),t("p",[n._v("本文是微信公众号【Java技术江湖】的《不可轻视的Java网络编程》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),n._v(" "),t("p",[n._v("该系列博文会告诉你如何从计算机网络的基础知识入手，一步步地学习Java网络基础，从socket到nio、bio、aio和netty等网络编程知识，并且进行实战，网络编程是每一个Java后端工程师必须要学习和理解的知识点，进一步来说，你还需要掌握Linux中的网络编程原理，包括IO模型、网络编程框架netty的进阶原理，才能更完整地了解整个Java网络编程的知识体系，形成自己的知识框架。")]),n._v(" "),t("p",[n._v("为了更好地总结和检验你的学习成果，本系列文章也会提供部分知识点对应的面试题以及参考答案。")]),n._v(" "),t("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),n._v(" "),t("h2",{attrs:{id:"netty概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netty概述"}},[n._v("#")]),n._v(" Netty概述")]),n._v(" "),t("p",[t("strong",[n._v("Netty是一个基于异步与事件驱动的网络应用程序框架，它支持快速与简单地开发可维护的高性能的服务器与客户端。")])]),n._v(" "),t("p",[n._v("所谓"),t("strong",[n._v("事件驱动就是由通过各种事件响应来决定程序的流程")]),n._v("，在Netty中到处都充满了异步与事件驱动，这种特点使得应用程序可以以任意的顺序响应在任意的时间点产生的事件，它带来了非常高的可伸缩性，让你的应用可以在需要处理的工作不断增长时，通过某种可行的方式或者扩大它的处理能力来适应这种增长。")]),n._v(" "),t("p",[n._v("Netty提供了高性能与易用性，它具有以下特点：")]),n._v(" "),t("ul",[t("li",[t("p",[t("strong",[n._v("拥有设计良好且统一的API")]),n._v("，支持NIO与OIO（阻塞IO）等多种传输类型，支持真正的无连接UDP Socket。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("简单而强大的线程模型")]),n._v("，可高度定制线程（池）。(定制化的Reactor模型)")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("良好的模块化与解耦")]),n._v("，支持可扩展和灵活的事件模型，可以很轻松地分离关注点以复用逻辑组件（可插拔的）。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("性能高效")]),n._v("，拥有比Java核心API更高的吞吐量，通过zero-copy功能以实现最少的内存复制消耗。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("内置了许多常用的协议编解码器")]),n._v("，如HTTP、SSL、WebScoket等常见协议可以通过Netty做到开箱即用。用户也可以利用Netty简单方便地实现自己的应用层协议。")])])]),n._v(" "),t("p",[n._v("大多数人使用Netty主要还是为了"),t("strong",[n._v("提高应用的性能")]),n._v("，而高性能则离不开非阻塞IO。Netty的非阻塞IO是基于Java NIO的，并且对其进行了封装（直接使用Java NIO API在高复杂度下的应用中是一项非常繁琐且容易出错的操作，而Netty帮你封装了这些复杂操作）。")]),n._v(" "),t("h2",{attrs:{id:"etty简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etty简介"}},[n._v("#")]),n._v(" etty简介")]),n._v(" "),t("pre",[n._v("读完这一章，我们基本上可以了解到Netty所有重要的组件，对Netty有一个全面的认识，这对下一步深入学习Netty是十分重要的，而学完这一章，我们其实已经可以用Netty解决一些常规的问题了。")]),n._v(" "),t("h3",{attrs:{id:"netty都有哪些组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netty都有哪些组件"}},[n._v("#")]),n._v(" Netty都有哪些组件？")]),n._v(" "),t("pre",[n._v("为了更好的理解和进一步深入Netty，我们先总体认识一下Netty用到的组件及它们在整个Netty架构中是怎么协调工作的。Netty应用中必不可少的组件：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("Bootstrap or ServerBootstrap")])]),n._v(" "),t("li",[t("p",[n._v("EventLoop")])]),n._v(" "),t("li",[t("p",[n._v("EventLoopGroup")])]),n._v(" "),t("li",[t("p",[n._v("ChannelPipeline")])]),n._v(" "),t("li",[t("p",[n._v("Channel")])]),n._v(" "),t("li",[t("p",[n._v("Future or ChannelFuture")])]),n._v(" "),t("li",[t("p",[n._v("ChannelInitializer")])]),n._v(" "),t("li",[t("p",[n._v("ChannelHandler")])]),n._v(" "),t("li",[t("p",[n._v("Bootstrap，一个Netty应用通常由一个Bootstrap开始，它主要作用是配置整个Netty程序，"),t("strong",[n._v("串联起各个组件")]),n._v("。")]),n._v(" "),t("p",[n._v("Handler，为了支持各种协议和处理数据的方式，便诞生了Handler组件。Handler主要用来"),t("strong",[n._v("处理各种事件")]),n._v("，这里的事件很广泛，比如可以是"),t("strong",[n._v("连接、数据接收、异常、数据转换")]),n._v("等。")]),n._v(" "),t("p",[t("strong",[n._v("ChannelInboundHandler")]),n._v("，一个最常用的Handler。这个Handler的作用就是"),t("strong",[n._v("处理接收到数据")]),n._v("时的事件，也就是说，我们的业务逻辑一般就是写在这个Handler里面的，ChannelInboundHandler就是用来处理我们的"),t("strong",[n._v("核心业务逻辑")]),n._v("。")]),n._v(" "),t("p",[n._v("ChannelInitializer，当一个链接建立时，我们需要知道"),t("strong",[n._v("怎么来接收或者发送数据")]),n._v("，当然，我们有各种各样的Handler实现来处理它，那么ChannelInitializer便是用来"),t("strong",[n._v("配置这些Handler，它会提供一个ChannelPipeline，并把Handler加入到ChannelPipeline。")])]),n._v(" "),t("p",[n._v("ChannelPipeline，一个Netty应用基于ChannelPipeline机制，这种机制需要"),t("strong",[n._v("依赖于EventLoop和EventLoopGroup，因为它们三个都和事件或者事件处理相关。")])]),n._v(" "),t("p",[n._v("EventLoops的目的是为Channel处理IO操作，一个EventLoop可以为多个Channel服务。")]),n._v(" "),t("p",[n._v("EventLoopGroup会包含多个EventLoop。")]),n._v(" "),t("p",[n._v("Channel代表了一个Socket链接，或者其它和IO操作相关的组件，它和EventLoop一起用来参与IO处理。")]),n._v(" "),t("p",[n._v("Future，在Netty中所有的IO操作都是"),t("strong",[n._v("异步的")]),n._v("，因此，你"),t("strong",[n._v("不能立刻得知消息是否被正确处理")]),n._v("，但是我们"),t("strong",[n._v("可以过一会等它执行完成或者直接注册一个监听")]),n._v("，具体的实现就是通过Future和ChannelFutures,他们可以注册一个监听，当操作执行成功或失败时监听会自动触发。总之**，所有的操作都会返回一个ChannelFuture**。")])])]),n._v(" "),t("h3",{attrs:{id:"netty是如何处理连接请求和业务逻辑的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netty是如何处理连接请求和业务逻辑的呢"}},[n._v("#")]),n._v(" Netty是如何处理连接请求和业务逻辑的呢？")]),n._v(" "),t("p",[n._v("Channels、Events 和 IO")]),n._v(" "),t("p",[n._v("Netty是一个"),t("strong",[n._v("非阻塞的、事件驱动的、网络编程")]),n._v("框架。当然，我们很容易理解Netty会用线程来处理IO事件，对于熟悉多线程编程的人来说，你或许会想到如何同步你的代码，但是Netty不需要我们考虑这些，具体是这样：")]),n._v(" "),t("p",[n._v("一个Channel会对应一个EventLoop，而一个"),t("strong",[n._v("EventLoop会对应着一个线程")]),n._v("，也就是说，仅有一个线程在负责一个Channel的IO操作。")]),n._v(" "),t("p",[n._v("关于这些名词之间的关系，可以见下图：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606104845234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),t("p",[n._v("如图所示：当一个连接到达，Netty会注册一个channel，然后EventLoopGroup会"),t("strong",[n._v("分配一个EventLoop绑定到这个channel")]),n._v(",在这个channel的整个生命周期过程中，都会由绑定的这个EventLoop来为它服务，而这个"),t("strong",[n._v("EventLoop就是一个线程")]),n._v("。")]),n._v(" "),t("p",[n._v("说到这里，那么EventLoops和EventLoopGroups关系是如何的呢？我们前面说过一个EventLoopGroup包含多个Eventloop，但是我们看一下下面这幅图，这幅图是一个继承树，从这幅图中我们可以看出，EventLoop其实继承自EventloopGroup，也就是说，在某些情况下，我们可以把一个EventLoopGroup当做一个EventLoop来用。")]),n._v(" "),t("pre",[n._v("​")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://img-blog.csdn.net/20140606104919140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606104919140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("h3",{attrs:{id:"如何配置一个netty应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何配置一个netty应用"}},[n._v("#")]),n._v(" 如何配置一个Netty应用？")]),n._v(" "),t("p",[n._v("BootsStrapping")]),n._v(" "),t("p",[n._v("我们"),t("strong",[n._v("利用BootsStrap来配置netty 应用")]),n._v("，它有两种类型，一种用于Client端：BootsStrap，另一种用于Server端：ServerBootstrap，要想区别如何使用它们，你仅需要记住一个用在Client端，一个用在Server端。下面我们来详细介绍一下这两种类型的区别：")]),n._v(" "),t("p",[n._v("1.第一个最明显的区别是，ServerBootstrap用于Server端，通过调用"),t("strong",[n._v("bind()"),t("strong",[n._v("方法来绑定到一个端口监听连接；Bootstrap用于Client端，需要调用")]),n._v("connect")]),n._v("()方法来连接服务器端，但我们也可以通过调用"),t("strong",[n._v("bind()方法返回的ChannelFuture")]),n._v("中获取Channel从而去connect服务器端。")]),n._v(" "),t("p",[n._v("2."),t("strong",[n._v("客户端")]),n._v("的Bootstrap一般用"),t("strong",[n._v("一个EventLoopGroup")]),n._v("，而"),t("strong",[n._v("服务器")]),n._v("端的ServerBootstrap会用到"),t("strong",[n._v("两个")]),n._v("（这两个也可以是同一个实例）。为何服务器端要用到两个EventLoopGroup呢？这么设计有明显的好处，如果一个ServerBootstrap有两个EventLoopGroup，那么就可以把"),t("strong",[n._v("第一个")]),n._v("EventLoopGroup用来"),t("strong",[n._v("专门负责绑定到端口监听连接事件")]),n._v("，而把"),t("strong",[n._v("第二个")]),n._v("EventLoopGroup用来"),t("strong",[n._v("处理每个接收到的连接")]),n._v("，下面我们用一幅图来展现一下这种模式：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606104949484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),t("p",[n._v("PS: 如果仅由一个EventLoopGroup处理所有请求和连接的话，在并发量很大的情况下，这个EventLoopGroup有可能会忙于处理已经接收到的连接而不能及时处理新的连接请求，"),t("strong",[n._v("用两个的话")]),n._v("，会有专门的线程来处理连接请求，不会导致请求超时的情况，大大"),t("strong",[n._v("提高了并发处理能力")]),n._v("。")]),n._v(" "),t("p",[n._v("我们知道一个Channel需要由一个EventLoop来绑定，而且两者"),t("strong",[n._v("一旦绑定就不会再改变")]),n._v("。一般情况下一个EventLoopGroup中的"),t("strong",[n._v("EventLoop数量会少于Channel数量")]),n._v("，那么就很"),t("strong",[n._v("有可能出现一个多个Channel公用一个EventLoop")]),n._v("的情况，这就意味着如果一个Channel中的"),t("strong",[n._v("EventLoop很忙")]),n._v("的话，会"),t("strong",[n._v("影响")]),n._v("到这个Eventloop"),t("strong",[n._v("对其它Channel的处理")]),n._v("，"),t("strong",[n._v("这也就是为什么我们不能阻塞EventLoop的原因。")])]),n._v(" "),t("p",[n._v("当然，我们的Server也可以只用一个EventLoopGroup,由一个实例来处理连接请求和IO事件，请看下面这幅图：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606105016890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),t("h3",{attrs:{id:"netty是如何处理数据的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netty是如何处理数据的"}},[n._v("#")]),n._v(" Netty是如何处理数据的？")]),n._v(" "),t("p",[n._v("Netty核心ChannelHandler")]),n._v(" "),t("p",[n._v("下面我们来看一下netty中是怎样处理数据的，回想一下我们前面讲到的Handler，对了，就是它。说到Handler我们就不得不提ChannelPipeline，ChannelPipeline负责"),t("strong",[n._v("安排Handler的顺序及其执行")]),n._v("，下面我们就来详细介绍一下他们：")]),n._v(" "),t("p",[n._v("ChannelPipeline and handlers")]),n._v(" "),t("p",[n._v("我们的应用程序中用到的最多的应该就是ChannelHandler，我们可以这么想象，数据在一个ChannelPipeline中流动，而ChannelHandler便是其中的一个个的小阀门，这些数据都会经过每一个ChannelHandler并且被它处理。这里有一个公共接口ChannelHandler:")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606105045406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),t("p",[n._v("从上图中我们可以看到，ChannelHandler有两个子类ChannelInboundHandler和ChannelOutboundHandler，这两个类对应了两个数据流向，如果数据是"),t("strong",[n._v("从外部流入")]),n._v("我们的应用程序，我们就看做是"),t("strong",[n._v("inbound")]),n._v("，相反便是outbound。其实ChannelHandler和Servlet有些类似，一个ChannelHandler处理完接收到的数据会传给下一个Handler，或者什么不处理，直接传递给下一个。下面我们看一下ChannelPipeline是如何安排ChannelHandler的：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20140606105113171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),n._v(" "),t("p",[n._v("从上图中我们可以看到，"),t("strong",[n._v("一个ChannelPipeline可以把两种Handler（ChannelInboundHandler和ChannelOutboundHandler）混合在一起")]),n._v("，当一个数据流进入ChannelPipeline时，它会从ChannelPipeline头部开始传给第一个ChannelInboundHandler，当第一个处理完后再传给下一个，一直传递到管道的尾部。与之相对应的是，当数据被写出时，它会从管道的尾部开始，先经过管道尾部的“最后”一个ChannelOutboundHandler，当它处理完成后会传递给前一个ChannelOutboundHandler。")]),n._v(" "),t("p",[t("strong",[n._v("数据在各个Handler之间传递")]),n._v("，这需要调用方法中传递的"),t("strong",[n._v("ChanneHandlerContext")]),n._v("来操作， 在netty的API中提供了两个基类分"),t("strong",[n._v("ChannelOutboundHandlerAdapter")]),n._v("和"),t("strong",[n._v("ChannelInboundHandlerAdapter")]),n._v("，他们"),t("strong",[n._v("仅仅实现了调用ChanneHandlerContext来把消息传递给下一个Handler")]),n._v("，因为我们只关心处理数据，因此我们的程序中"),t("strong",[n._v("可以继承这两个基类来帮助我们做这些")]),n._v("，而"),t("strong",[n._v("我们仅需实现处理数据")]),n._v("的部分即可。")]),n._v(" "),t("p",[n._v("我们知道InboundHandler和OutboundHandler在ChannelPipeline中是"),t("strong",[n._v("混合在一起")]),n._v("的，那么它们"),t("strong",[n._v("如何区分")]),n._v("彼此呢？其实很容易，因为"),t("strong",[n._v("它们各自实现的是不同的接口")]),n._v("，对于inbound event，Netty会自动跳过OutboundHandler,相反若是outbound event，ChannelInboundHandler会被忽略掉。")]),n._v(" "),t("p",[n._v("当一个ChannelHandler被加入到ChannelPipeline中时，它便会获得一个ChannelHandlerContext的引用，而"),t("strong",[n._v("ChannelHandlerContext可以用来读写Netty中的数据流")]),n._v("。因此，现在可以有两种方式来发送数据，一种是把数据直接写入Channel，一种是把数据写入ChannelHandlerContext，它们的区别是写入Channel的话，数据流会从Channel的头开始传递，而如果写入ChannelHandlerContext的话，数据流会流入管道中的下一个Handler。")]),n._v(" "),t("h3",{attrs:{id:"如何处理我们的业务逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何处理我们的业务逻辑"}},[n._v("#")]),n._v(" 如何处理我们的业务逻辑？")]),n._v(" "),t("p",[n._v("Encoders, Decoders and Domain Logic")]),n._v(" "),t("p",[n._v("Netty中会有很多Handler，具体是哪种Handler还要看它们继承的是InboundAdapter还是OutboundAdapter。当然，Netty中还提供了一些列的"),t("strong",[n._v("Adapter来帮助我们简化开发")]),n._v("，我们知道在Channelpipeline中"),t("strong",[n._v("每一个Handler都负责把Event传递给下一个Handler")]),n._v("，如果有了这些辅助Adapter，这些"),t("strong",[n._v("额外的工作都可自动完成")]),n._v("，我们只需覆盖实现我们真正关心的部分即可。此外，还有一些Adapter会提供一些额外的功能，比如编码和解码。那么下面我们就来看一下其中的三种常用的ChannelHandler：")]),n._v(" "),t("p",[n._v("Encoders和Decoders")]),n._v(" "),t("p",[n._v("因为我们在网络传输时只能传输字节流，因此，在发送数据之前，我们必须把我们的message型转换为bytes，与之对应，我们在接收数据后，必须把接收到的bytes再转换成message。我们把bytes to message这个过程称作Decode(解码成我们可以理解的)，把message to bytes这个过程成为Encode。")]),n._v(" "),t("p",[n._v("Netty中提供了很多现成的编码/解码器，我们一般从他们的名字中便可知道他们的用途，如"),t("strong",[n._v("ByteToMessageDecoder")]),n._v("、"),t("strong",[n._v("MessageToByteEncoder")]),n._v("，如专门用来处理Google Protobuf协议的"),t("strong",[n._v("ProtobufEncoder")]),n._v("、 "),t("strong",[n._v("ProtobufDecoder")]),n._v("。")]),n._v(" "),t("p",[n._v("我们前面说过，具体是哪种Handler就要看它们继承的是InboundAdapter还是OutboundAdapter，对于"),t("strong",[n._v("Decoders")]),n._v(",很容易便可以知道它是继承自"),t("strong",[n._v("ChannelInboundHandlerAdapter")]),n._v("或 ChannelInboundHandler，因为解码的意思是把ChannelPipeline"),t("strong",[n._v("传入的bytes解码成我们可以理解的message")]),n._v("（即Java Object），而ChannelInboundHandler正是处理Inbound Event，而Inbound Event中传入的正是字节流。Decoder会覆盖其中的“ChannelRead()”方法，在这个方法中来调用具体的decode方法解码传递过来的字节流，然后通过调用ChannelHandlerContext.fireChannelRead(decodedMessage)方法把编码好的Message传递给下一个Handler。与之类似，Encoder就不必多少了。")]),n._v(" "),t("p",[n._v("Domain Logic")]),n._v(" "),t("p",[n._v("其实我们最最关心的事情就是"),t("strong",[n._v("如何处理接收到的解码后的数据")]),n._v("，我们真正的业务逻辑便是处理接收到的数据。Netty提供了一个最常用的基类"),t("strong",[n._v("SimpleChannelInboundHandler")]),t("T",[n._v("，其中"),t("strong",[n._v("T就是这个Handler处理的数据的类型")]),n._v("（上一个Handler已经替我们解码好了），消息到达这个Handler时，Netty会自动调用这个Handler中的"),t("strong",[n._v("channelRead0")]),n._v("(ChannelHandlerContext,T)方法，T是传递过来的数据对象，在这个方法中我们便可以任意写我们的业务逻辑了。")])],1),n._v(" "),t("p",[n._v("Netty从某方面来说就是一套NIO框架，在Java NIO基础上做了封装，所以要想学好Netty我建议先理解好Java NIO，")]),n._v(" "),t("p",[n._v("NIO可以称为New IO也可以称为Non-blocking IO，它比Java旧的阻塞IO在性能上要高效许多（如果让每一个连接中的IO操作都单独创建一个线程，那么阻塞IO并不会比NIO在性能上落后，但不可能创建无限多的线程，在连接数非常多的情况下会很糟糕）。")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("ByteBuffer：NIO的数据传输是基于缓冲区的，ByteBuffer正是NIO数据传输中所使用的缓冲区抽象。"),t("strong",[n._v("ByteBuffer支持在堆外分配内存")]),n._v("，并且尝试避免在执行I/O操作中的多余复制。一般的I/O操作都需要进行系统调用，这样会先切换到内核态，内核态要先从文件读取数据到它的缓冲区，只有等数据准备完毕后，才会从内核态把数据写到用户态，所谓的"),t("strong",[n._v("阻塞IO")]),n._v("其实就是说的"),t("strong",[n._v("在等待数据准备好的这段时间内进行阻塞")]),n._v("。如果想要避免这个额外的内核操作，可以通过使用mmap（虚拟内存映射）的方式来让用户态直接操作文件。")])]),n._v(" "),t("li",[t("p",[n._v("Channel：它类似于(fd)文件描述符，简单地来说它"),t("strong",[n._v("代表了一个实体")]),n._v("（如一个硬件设备、文件、Socket或者一个能够执行一个或多个不同的I/O操作的程序组件）。你可以从一个Channel中读取数据到缓冲区，也可以将一个缓冲区中的数据写入到Channel。")])]),n._v(" "),t("li",[t("p",[n._v("Selector：选择器是NIO实现的关键，NIO采用的是I/O多路复用的方式来实现非阻塞，Selector通过在"),t("strong",[n._v("一个线程中监听每个Channel的IO事件来确定有哪些已经准备好进行IO操作的Channel")]),n._v("，因此可"),t("strong",[n._v("以在任何时间检查任意的读操作或写操作的完成状态")]),n._v("。这种方式"),t("strong",[n._v("避免了等待IO操作准备数据时的阻塞")]),n._v("，使用较少的线程便可以处理许多连接，减少了线程切换与维护的开销。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx2.sinaimg.cn/large/63503acbly1flys7n7hvaj20h90doglj.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx2.sinaimg.cn/large/63503acbly1flys7n7hvaj20h90doglj.jpg",alt:""}}),t("OutboundLink")],1)])])]),n._v(" "),t("p",[n._v("了解了NIO的实现思想之后，我觉得还很有必要了解一下Unix中的I/O模型，Unix中拥有以下5种I/O模型：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("阻塞I/O（Blocking I/O）")])]),n._v(" "),t("li",[t("p",[n._v("非阻塞I/O（Non-blocking I/O）")])]),n._v(" "),t("li",[t("p",[n._v("I/O多路复用（I/O multiplexing (select and poll)）")])]),n._v(" "),t("li",[t("p",[n._v("信号驱动I/O（signal driven I/O (SIGIO)）")])]),n._v(" "),t("li",[t("p",[n._v("异步I/O（asynchronous I/O (the POSIX aio_functions)）")])])]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx3.sinaimg.cn/large/63503acbly1flz1e7kzblj20wb0ftq3l.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx3.sinaimg.cn/large/63503acbly1flz1e7kzblj20wb0ftq3l.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("![](file:///C:/Users/xiaok/Pictures/%E5%A4%8D%E4%B9%A0%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87_%E5%8B%BF%E5%88%A0/%E6%AF%94%E7%89%B9%E6%88%AA%E5%9B%BE2019-01-12-16-40-18.png?lastModify=1549709160)")]),n._v(" "),t("p",[n._v("阻塞I/O模型是最常见的I/O模型，通常我们使用的InputStream/OutputStream都是基于阻塞I/O模型。在上图中，我们使用UDP作为例子，recvfrom()函数是UDP协议用于接收数据的函数，它需要"),t("strong",[n._v("使用系统调用并一直阻塞到内核将数据准备好")]),n._v("，之后再由内核缓冲区复制数据到用户态（即是recvfrom()接收到数据），所谓"),t("strong",[n._v("阻塞就是在等待内核准备数据的这段时间内什么也不干")]),n._v("。")]),n._v(" "),t("p",[n._v("举个生活中的例子，阻塞I/O就像是你去餐厅吃饭，在等待饭做好的时间段中，你只能在餐厅中坐着干等（如果你在玩手机那么这就是非阻塞I/O了）。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx2.sinaimg.cn/large/63503acbly1flz1e8lh7rj20wb0ft0ty.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx2.sinaimg.cn/large/63503acbly1flz1e8lh7rj20wb0ft0ty.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("blockquote",[t("p",[n._v("在非阻塞I/O模型中，内核在"),t("strong",[n._v("数据尚未准备好")]),n._v("的情况下回"),t("strong",[n._v("返回一个错误码"),t("code",[n._v("EWOULDBLOCK")])]),n._v("，而"),t("strong",[n._v("recvfrom")]),n._v("并没有在失败的情况下选择阻塞休眠，而是"),t("strong",[n._v("不断地向内核询问是否已经准备完毕")]),n._v("，在上图中，前三次内核都返回了"),t("code",[n._v("EWOULDBLOCK")]),n._v("，直到第四次询问时，内核数据准备完毕，然后开始将内核中缓存的数据复制到用户态。这种不断询问内核以查看某种状态是否完成的方式被称为"),t("strong",[n._v("polling（轮询）")]),n._v("。")])]),n._v(" "),t("p",[n._v("非阻塞I/O就像是你在点外卖，只不过你非常心急，"),t("strong",[n._v("每隔一段时间就要打电话问外卖小哥有没有到")]),n._v("。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx3.sinaimg.cn/large/63503acbly1flz1e989dfj20wh0g80tw.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx3.sinaimg.cn/large/63503acbly1flz1e989dfj20wh0g80tw.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("I/O多路复用的思想跟非阻塞I/O是一样的，只不过在"),t("strong",[n._v("非阻塞I/O")]),n._v("中，是在"),t("strong",[n._v("recvfrom的用户态（或一个线程）中去轮询内核")]),n._v("，这种方式会"),t("strong",[n._v("消耗大量的CPU时间")]),n._v("。而"),t("strong",[n._v("I/O多路复用")]),n._v("则是通过select()或poll()"),t("strong",[n._v("系统调用来负责进行轮询")]),n._v("，以实现监听I/O读写事件的状态。如上图中，select监听到一个datagram可读时，就交由recvfrom去发送系统调用将内核中的数据复制到用户态。")]),n._v(" "),t("p",[n._v("这种方式的优点很明显，通过"),t("strong",[n._v("I/O多路复用")]),n._v("可以"),t("strong",[n._v("监听多个文件描述符")]),n._v("，且在"),t("strong",[n._v("内核中完成监控的任务")]),n._v("。但缺点是至少需要两个系统调用（select()与recvfrom()）。")]),n._v(" "),t("p",[n._v("I/O多路复用同样适用于点外卖这个例子，只不过你在等外卖的期间完全可以做自己的事情，当外卖到的时候会"),t("strong",[n._v("通过外卖APP或者由外卖小哥打电话来通知你")]),n._v("(因为内核会帮你轮询)。")]),n._v(" "),t("p",[n._v("Unix中提供了两种I/O多路复用函数，select()和poll()。select()的兼容性更好，但它在单个进程中所能监控的文件描述符是有限的，这个值与"),t("code",[n._v("FD_SETSIZE")]),n._v("相关，32位系统中默认为1024，64位系统中为2048。select()还有一个缺点就是他轮询的方式，它采取了"),t("strong",[n._v("线性扫描的轮询方式")]),n._v("，每次都要遍历FD_SETSIZE个文件描述符，不管它们是否活不活跃的。poll()本质上与select()的实现"),t("strong",[n._v("没有区别")]),n._v("，不过在数据结构上区别很大，用户必须分配一个pollfd结构数组，该数组维护在内核态中，正因如此，"),t("strong",[n._v("poll()并不像select()那样拥有大小上限的限制")]),n._v("，但缺点同样也很明显，"),t("strong",[n._v("大量的fd数组会在用户态与内核态之间不断复制")]),n._v("，不管这样的复制是否有意义。")]),n._v(" "),t("p",[n._v("还有一种比select()与poll()更加高效的实现叫做epoll()，它是由Linux内核2.6推出的可伸缩的I/O多路复用实现，目的是为了替代select()与poll()。epoll()同样"),t("strong",[n._v("没有文件描述符上限的限制")]),n._v("，它"),t("strong",[n._v("使用一个文件描述符来管理多个文件描述符")]),n._v("，并"),t("strong",[n._v("使用一个红黑树来作为存储结构")]),n._v("。同时它还支持边缘触发（edge-triggered）与水平触发（level-triggered）两种模式（poll()只支持水平触发），在"),t("strong",[n._v("边缘触发模式")]),n._v("下，"),t("strong",[t("code",[n._v("epoll_wait")]),n._v("仅会在新的事件对象首次被加入到epoll时返回")]),n._v("，而在"),t("strong",[n._v("水平触发")]),n._v("模式下，"),t("strong",[t("code",[n._v("epoll_wait")]),n._v("会在事件状态未变更前不断地触发")]),n._v("。也就是说，边缘触发模式"),t("strong",[n._v("只会")]),n._v("在文件描述符"),t("strong",[n._v("变为就绪状态时通知一次")]),n._v("，水平触发模式会"),t("strong",[n._v("不断地通知")]),n._v("该文件描述符"),t("strong",[n._v("直到被处理")]),n._v("。")]),n._v(" "),t("p",[n._v("关于"),t("code",[n._v("epoll_wait")]),n._v("请参考如下epoll API。")]),n._v(" "),t("pre",[n._v("// 创建一个epoll对象并返回它的文件描述符。\n// 参数flags允许修改epoll的行为，它只有一个有效值EPOLL_CLOEXEC。\nint epoll_create1(int flags);\n// 配置对象，该对象负责描述监控哪些文件描述符和哪些事件。\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);\n// 等待与epoll_ctl注册的任何事件，直至事件发生一次或超时。\n// 返回在events中发生的事件，最多同时返回maxevents个。\nint epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);")]),n._v(" "),t("p",[n._v("epoll另一亮点是"),t("strong",[n._v("采用了事件驱动的方式而不是轮询")]),n._v("，在"),t("strong",[n._v("epoll_ctl")]),n._v("中注册的文件描述符"),t("strong",[n._v("在事件触发的时候会通过一个回调机制")]),n._v("来激活该文件描述符，"),t("strong",[t("code",[n._v("epoll_wait")]),n._v("便可以收到通知")]),n._v("。这样效率就不会与文件描述符的数量成正比")]),n._v(" "),t("p",[n._v("在Java NIO2（从JDK1.7开始引入）中，只要Linux内核版本在2.6以上，就会采用epoll，如下源码所示（DefaultSelectorProvider.java）。")]),n._v(" "),t("pre",[n._v('public static SelectorProvider create() {\nString osname = AccessController.doPrivileged(\nnew GetPropertyAction("os.name"));\nif ("SunOS".equals(osname)) {\nreturn new sun.nio.ch.DevPollSelectorProvider();\n}\n// use EPollSelectorProvider for Linux kernels >= 2.6\nif ("Linux".equals(osname)) {\nString osversion = AccessController.doPrivileged(\nnew GetPropertyAction("os.version"));\nString[] vers = osversion.split("\\\\.", 0);\nif (vers.length >= 2) {\ntry {\nint major = Integer.parseInt(vers[0]);\nint minor = Integer.parseInt(vers[1]);\nif (major > 2 || (major == 2 && minor >= 6)) {\nreturn new sun.nio.ch.EPollSelectorProvider();\n}\n} catch (NumberFormatException x) {\n// format not recognized\n}\n}\n}\nreturn new sun.nio.ch.PollSelectorProvider();\n}')]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx3.sinaimg.cn/large/63503acbly1flz1e9uk8aj20wb0ft3zn.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx3.sinaimg.cn/large/63503acbly1flz1e9uk8aj20wb0ft3zn.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("信号驱动I/O模型使用到了"),t("strong",[n._v("信号")]),n._v("，内核在数据"),t("strong",[n._v("准备就绪")]),n._v("时会"),t("strong",[n._v("通过信号来进行通知")]),n._v("。我们首先"),t("strong",[n._v("开启")]),n._v("了一个信号驱动I/O套接字，并使用sigaction系统调用来安装信号处理程序，内核直接返回，不会阻塞用户态。当datagram准备好时，内核会发送SIGIN信号，recvfrom接收到信号后会发送系统调用开始进行I/O操作。")]),n._v(" "),t("p",[n._v("这种模型的优点是"),t("strong",[n._v("主进程（线程）不会被阻塞")]),n._v("，当数据准备就绪时，"),t("strong",[n._v("通过信号处理程序")]),n._v("来通知主进程（线程）准备进行I/O操作与对数据的处理。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx2.sinaimg.cn/large/63503acbly1flz1eai66rj20wb0g8aau.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx2.sinaimg.cn/large/63503acbly1flz1eai66rj20wb0g8aau.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("我们之前讨论的各种I/O模型无论是阻塞还是非阻塞，它们所说的"),t("strong",[n._v("阻塞都是指的数据准备阶段")]),n._v("。"),t("strong",[n._v("异步I/O")]),n._v("模型"),t("strong",[n._v("同样依赖")]),n._v("于"),t("strong",[n._v("信号")]),n._v("处理程序来进行通知，但与以上I/O模型都不相同的是，异步I/O模型通知的是"),t("strong",[n._v("I/O操作")]),n._v("已经完成，而不是"),t("strong",[n._v("数据准备")]),n._v("完成。")]),n._v(" "),t("p",[n._v("可以说"),t("strong",[n._v("异步I/O模型才是真正的非阻塞")]),n._v("，主进程只管做自己的事情，然后在I/O操作完成时调用回调函数来完成一些对数据的处理操作即可。")]),n._v(" "),t("p",[n._v("闲扯了这么多，想必大家已经对I/O模型有了一个深刻的认识。之后，我们将会结合部分源码（Netty4.X）来探讨Netty中的各大核心组件，以及如何使用Netty，你会发现实现一个Netty程序是多么简单（而且还伴随了高性能与可维护性）。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://netty.io/images/components.png",alt:""}})]),n._v(" "),t("h3",{attrs:{id:"bytebuf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bytebuf"}},[n._v("#")]),n._v(" ByteBuf")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("网络传输的基本单位是字节，在Java NIO中提供了ByteBuffer作为字节缓冲区容器，但该类的API使用起来不太方便，所以Netty实现了ByteBuf作为其替代品，下面是使用ByteBuf的优点：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("相比ByteBuffer使用起来"),t("strong",[n._v("更加简单")]),n._v("。")])]),n._v(" "),t("li",[t("p",[n._v("通过内置的复合缓冲区类型实现了透明的"),t("strong",[n._v("zero-copy")]),n._v("。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("容量")]),n._v("可以"),t("strong",[n._v("按需增长")]),n._v("。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("读和写")]),n._v("使用了"),t("strong",[n._v("不同的索引指针")]),n._v("。")])]),n._v(" "),t("li",[t("p",[n._v("支持"),t("strong",[n._v("链式调用")]),n._v("。")])]),n._v(" "),t("li",[t("p",[n._v("支持"),t("strong",[n._v("引用计数与池化")]),n._v("。")])]),n._v(" "),t("li",[t("p",[n._v("可以被用户"),t("strong",[n._v("自定义的缓冲区类型")]),n._v("扩展。")])])]),n._v(" "),t("p",[n._v("在讨论ByteBuf之前，我们先需要了解一下ByteBuffer的实现，这样才能比较深刻地明白它们之间的区别。")]),n._v(" "),t("p",[n._v("ByteBuffer继承于"),t("code",[n._v("abstract class Buffer")]),n._v("（所以还有LongBuffer、IntBuffer等其他类型的实现），本质上它只是一个有限的线性的元素序列，包含了三个重要的属性。")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("Capacity：缓冲区中元素的容量大小，你只能将capacity个数量的元素写入缓冲区，一旦缓冲区已满就需要清理缓冲区才能继续写数据。")])]),n._v(" "),t("li",[t("p",[n._v("Position：指向下一个写入数据位置的索引指针，初始位置为0，最大为capacity-1。当写模式转换为读模式时，position需要被重置为0。")])]),n._v(" "),t("li",[t("p",[n._v("Limit：在写模式中，limit是可以写入缓冲区的最大索引，也就是说它在写模式中等价于缓冲区的容量。在读模式中，limit表示可以读取数据的最大索引。")])])]),n._v(" "),t("p",[t("a",{attrs:{href:"http://tutorials.jenkov.com/images/java-nio/buffers-modes.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://tutorials.jenkov.com/images/java-nio/buffers-modes.png",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("由于Buffer中只维护了position一个索引指针，所以它在读写模式之间的切换需要调用一个flip()方法来重置指针。使用Buffer的流程一般如下：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("写入数据到缓冲区。")])]),n._v(" "),t("li",[t("p",[n._v("调用flip()方法。")])]),n._v(" "),t("li",[t("p",[n._v("从缓冲区中读取数据")])]),n._v(" "),t("li",[t("p",[n._v("调用buffer.clear()或者buffer.compact()清理缓冲区，以便下次写入数据。")])])]),n._v(" "),t("pre",[n._v('RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");\nFileChannel inChannel = aFile.getChannel();\n// 分配一个48字节大小的缓冲区\nByteBuffer buf = ByteBuffer.allocate(48);\nint bytesRead = inChannel.read(buf); // 读取数据到缓冲区\nwhile (bytesRead != -1) {\nbuf.flip(); // 将position重置为0\nwhile(buf.hasRemaining()){\nSystem.out.print((char) buf.get()); // 读取数据并输出到控制台\n}\nbuf.clear(); // 清理缓冲区\nbytesRead = inChannel.read(buf);\n}\naFile.close();\nBuffer中核心方法的实现也非常简单，主要就是在操作指针position。')]),n._v(" "),t("p",[n._v("Buffer中核心方法的实现也非常简单，主要就是在操作指针position。")]),n._v(" "),t("pre",[n._v("/**\n* Sets this buffer's mark at its position.\n*\n* @return This buffer\n*/\npublic final Buffer mark() {\nmark = position; // mark属性是用来标记当前索引位置的\nreturn this;\n}\n// 将当前索引位置重置为mark所标记的位置\npublic final Buffer reset() {\nint m = mark;\nif (m < 0)\nthrow new InvalidMarkException();\nposition = m;\nreturn this;\n}\n// 翻转这个Buffer，将limit设置为当前索引位置，然后再把position重置为0\npublic final Buffer flip() {\nlimit = position;\nposition = 0;\nmark = -1;\nreturn this;\n}\n// 清理缓冲区\n// 说是清理,也只是把postion与limit进行重置,之后再写入数据就会覆盖之前的数据了\npublic final Buffer clear() {\nposition = 0;\nlimit = capacity;\nmark = -1;\nreturn this;\n}\n// 返回剩余空间\npublic final int remaining() {\nreturn limit - position;\n}")]),n._v(" "),t("p",[n._v("Java NIO中的"),t("strong",[n._v("Buffer API操作的麻烦之处就在于读写转换需要手动重置指针。而ByteBuf没有这种繁琐性，它维护了两个不同的索引，一个用于读取，一个用于写入")]),n._v("。当你从ByteBuf读取数据时，它的readerIndex将会被递增已经被读取的字节数，同样的，当你写入数据时，writerIndex则会递增。readerIndex的最大范围在writerIndex的所在位置，如果试图移动readerIndex超过该值则会触发异常。")]),n._v(" "),t("p",[n._v("ByteBuf中名称以read或write开头的方法将会递增它们其对应的索引，而名称以get或set开头的方法则不会。ByteBuf同样可以指定一个最大容量，试图移动writerIndex超过该值则会触发异常。")]),n._v(" "),t("pre",[n._v('public byte readByte() {\n this.checkReadableBytes0(1); // 检查readerIndex是否已越界\n int i = this.readerIndex;\n byte b = this._getByte(i);\n this.readerIndex = i + 1; // 递增readerIndex\n return b;\n}\nprivate void checkReadableBytes0(int minimumReadableBytes) {\n this.ensureAccessible();\n if(this.readerIndex > this.writerIndex - minimumReadableBytes) {\n throw new IndexOutOfBoundsException(String.format("readerIndex(%d) + length(%d) exceeds writerIndex(%d): %s", new Object[]{Integer.valueOf(this.readerIndex), Integer.valueOf(minimumReadableBytes), Integer.valueOf(this.writerIndex), this}));\n }\n}\npublic ByteBuf writeByte(int value) {\n this.ensureAccessible();\n this.ensureWritable0(1); // 检查writerIndex是否会越过capacity\n this._setByte(this.writerIndex++, value);\n return this;\n}\nprivate void ensureWritable0(int minWritableBytes) {\n if(minWritableBytes > this.writableBytes()) {\n if(minWritableBytes > this.maxCapacity - this.writerIndex) {\n throw new IndexOutOfBoundsException(String.format("writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s", new Object[]{Integer.valueOf(this.writerIndex), Integer.valueOf(minWritableBytes), Integer.valueOf(this.maxCapacity), this}));\n } else {\n int newCapacity = this.alloc().calculateNewCapacity(this.writerIndex + minWritableBytes, this.maxCapacity);\n this.capacity(newCapacity);\n }\n }\n}\n// get与set只对传入的索引进行了检查，然后对其位置进行get或set\npublic byte getByte(int index) {\n this.checkIndex(index);\n return this._getByte(index);\n}\npublic ByteBuf setByte(int index, int value) {\n this.checkIndex(index);\n this._setByte(index, value);\n return this;\n}')]),n._v(" "),t("p",[n._v("ByteBuf同样支持在"),t("strong",[n._v("堆内和堆外进行分配")]),n._v("。在"),t("strong",[n._v("堆内分配")]),n._v("也被称为"),t("strong",[n._v("支撑数组模式")]),n._v("，它能在"),t("strong",[n._v("没有使用池化")]),n._v("的情况下"),t("strong",[n._v("提供快速的分配和释放")]),n._v("。")]),n._v(" "),t("pre",[n._v("ByteBuf heapBuf = Unpooled.copiedBuffer(bytes);\nif (heapBuf.hasArray()) { // 判断是否有一个支撑数组\nbyte[] array = heapBuf.array();\n// 计算第一个字节的偏移量\nint offset = heapBuf.arrayOffset() + heapBuf.readerIndex();\nint length = heapBuf.readableBytes(); // 获得可读字节\nhandleArray(array,offset,length); // 调用你的处理方法\n}\n")]),n._v(" "),t("p",[n._v("另一种模式为"),t("strong",[n._v("堆外分配")]),n._v("，Java NIO ByteBuffer类在JDK1.4时就已经允许JVM实现通过JNI调用来在堆外分配内存（调用malloc()函数在JVM堆外分配内存），这主要是"),t("strong",[n._v("为了避免额外的缓冲区复制操作")]),n._v("。")]),n._v(" "),t("pre",[n._v("ByteBuf directBuf = Unpooled.directBuffer(capacity);\nif (!directBuf.hasArray()) {\nint length = directBuf.readableBytes();\nbyte[] array = new byte[length];\n// 将字节复制到数组中\ndirectBuf.getBytes(directBuf.readerIndex(),array);\nhandleArray(array,0,length);\n}\n")]),n._v(" "),t("p",[n._v("ByteBuf还支持第三种模式，它被称为"),t("strong",[n._v("复合缓冲区")]),n._v("，为多个ByteBuf"),t("strong",[n._v("提供")]),n._v("了一个"),t("strong",[n._v("聚合视图")]),n._v("。在这个视图中，你可以根据需要添加或者删除ByteBuf实例，ByteBuf的子类"),t("strong",[n._v("CompositeByteBuf实现了该模式")]),n._v("。")]),n._v(" "),t("p",[n._v("一个适合使用"),t("strong",[n._v("复合缓冲区的场景是HTTP协议")]),n._v("，通过HTTP协议传输的消息都会被分成两部分——头部和主体，如果这两部分由应用程序的不同模块产生，将在消息发送时进行组装，并且该应用程序还会为多个消息复用相同的消息主体，这样对于每个消息都将会创建一个新的头部，产生了很多不必要的内存操作。使用CompositeByteBuf是一个很好的选择，它消除了这些额外的复制，以帮助你复用这些消息。")]),n._v(" "),t("pre",[n._v("CompositeByteBuf messageBuf = Unpooled.compositeBuffer();\nByteBuf headerBuf = ....;\nByteBuf bodyBuf = ....;\nmessageBuf.addComponents(headerBuf,bodyBuf);\nfor (ByteBuf buf : messageBuf) {\nSystem.out.println(buf.toString());\n}\n")]),n._v(" "),t("p",[n._v("CompositeByteBuf透明的实现了"),t("strong",[n._v("zero-copy")]),n._v("，zero-copy其实就是避免数据在两个内存区域中来回的复制。从操作系统层面上来讲，zero-copy指的是"),t("strong",[n._v("避免在内核态与用户态之间的数据缓冲区复制（通过mmap避免）")]),n._v("，而Netty中的zero-copy更偏向于在用户态中的数据操作的优化，就像使用CompositeByteBuf来复用多个ByteBuf以避免额外的复制，也可以使用wrap()方法来将一个字节数组包装成ByteBuf，又或者使用ByteBuf的slice()方法把它分割为多个共享同一内存区域的ByteBuf，这些都是为了优化内存的使用率。")]),n._v(" "),t("p",[n._v("那么如何创建ByteBuf呢？在上面的代码中使用到了"),t("strong",[n._v("Unpooled")]),n._v("，它是Netty提供的一个用于创建与分配ByteBuf的工具类，建议都使用这个工具类来创建你的缓冲区，不要自己去调用构造函数。经常使用的是wrappedBuffer()与copiedBuffer()，它们一个是用于将一个字节数组或ByteBuffer包装为一个ByteBuf，一个是根据传入的字节数组与ByteBuffer/ByteBuf来复制出一个新的ByteBuf。")]),n._v(" "),t("pre",[n._v("// 通过array.clone()来复制一个数组进行包装\npublic static ByteBuf copiedBuffer(byte[] array) {\nreturn array.length == 0?EMPTY_BUFFER:wrappedBuffer((byte[])array.clone());\n}\n// 默认是堆内分配\npublic static ByteBuf wrappedBuffer(byte[] array) {\nreturn (ByteBuf)(array.length == 0?EMPTY_BUFFER:new UnpooledHeapByteBuf(ALLOC, array, array.length));\n}\n// 也提供了堆外分配的方法\nprivate static final ByteBufAllocator ALLOC;\npublic static ByteBuf directBuffer(int initialCapacity) {\nreturn ALLOC.directBuffer(initialCapacity);\n}\n")]),n._v(" "),t("p",[n._v("相对底层的分配方法是使用ByteBufAllocator，Netty实现了PooledByteBufAllocator和UnpooledByteBufAllocator，前者使用了"),t("a",{attrs:{href:"https://github.com/jemalloc/jemalloc",target:"_blank",rel:"noopener noreferrer"}},[n._v("jemalloc（一种malloc()的实现）"),t("OutboundLink")],1),n._v("来分配内存，并且实现了对ByteBuf的池化以提高性能。后者分配的是未池化的ByteBuf，其分配方式与之前讲的一致。")]),n._v(" "),t("pre",[n._v("Channel channel = ...;\nByteBufAllocator allocator = channel.alloc();\nByteBuf buffer = allocator.directBuffer();\ndo something.......\n")]),n._v(" "),t("p",[n._v("为了优化内存使用率，"),t("strong",[n._v("Netty提供了一套手动的方式来追踪不活跃对象")]),n._v("，像UnpooledHeapByteBuf这种分配在堆内的对象得益于JVM的GC管理，无需额外操心，而UnpooledDirectByteBuf是在堆外分配的，它的内部基于DirectByteBuffer，DirectByteBuffer会先向Bits类申请一个额度（Bits还拥有一个全局变量totalCapacity，记录了所有DirectByteBuffer总大小），每次申请前都会查看是否已经超过-XX:MaxDirectMemorySize所设置的上限，"),t("strong",[n._v("如果超限就会尝试调用System.gc()")]),n._v("，"),t("strong",[n._v("以试图回收一部分内存，然后休眠100毫秒，如果内存还是不足，则只能抛出OOM异常")]),n._v("。堆外内存的回收虽然有了这么一层保障，但为了提高性能与使用率，主动回收也是很有必要的。由于Netty还实现了ByteBuf的池化，像PooledHeapByteBuf和PooledDirectByteBuf就必须"),t("strong",[n._v("依赖于手动的方式来进行回收")]),n._v("（放回池中）。")]),n._v(" "),t("p",[n._v("Netty使用了"),t("strong",[n._v("引用计数器的方式来追踪那些不活跃的对象")]),n._v("。引用计数的接口为"),t("strong",[n._v("ReferenceCounted")]),n._v("，它的思想很简单，只要ByteBuf对象的"),t("strong",[n._v("引用计数大于0")]),n._v("，就保证该对象"),t("strong",[n._v("不会被释放回收")]),n._v("，可以通过"),t("strong",[n._v("手动调用release()与retain()"),t("strong",[n._v("方法来操作该对象的引用计数值")]),n._v("递减或递增")]),n._v("。用户也可以通过自定义一个ReferenceCounted的实现类，以满足自定义的规则。")]),n._v(" "),t("pre",[n._v("package io.netty.buffer;\npublic abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {\n// 由于ByteBuf的实例对象会非常多,所以这里没有将refCnt包装为AtomicInteger\n// 而是使用一个全局的AtomicIntegerFieldUpdater来负责操作refCnt\nprivate static final AtomicIntegerFieldUpdater"),t("AbstractReferenceCountedByteBuf",[n._v(' refCntUpdater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");\n// 每个ByteBuf的初始引用值都为1\nprivate volatile int refCnt = 1;\npublic int refCnt() {\nreturn this.refCnt;\n}\nprotected final void setRefCnt(int refCnt) {\nthis.refCnt = refCnt;\n}\npublic ByteBuf retain() {\nreturn this.retain0(1);\n}\n// 引用计数值递增increment，increment必须大于0\npublic ByteBuf retain(int increment) {\nreturn this.retain0(ObjectUtil.checkPositive(increment, "increment"));\n}\npublic static int checkPositive(int i, String name) {\nif(i <= 0) {\nthrow new IllegalArgumentException(name + ": " + i + " (expected: > 0)");\n} else {\nreturn i;\n} \n}\n// 使用CAS操作不断尝试更新值\nprivate ByteBuf retain0(int increment) {\nint refCnt;\nint nextCnt;\ndo {\nrefCnt = this.refCnt;\nnextCnt = refCnt + increment;\nif(nextCnt <= increment) {\nthrow new IllegalReferenceCountException(refCnt, increment);\n}\n} while(!refCntUpdater.compareAndSet(this, refCnt, nextCnt));\nreturn this;\n}\npublic boolean release() {\nreturn this.release0(1);\n}\npublic boolean release(int decrement) {\nreturn this.release0(ObjectUtil.checkPositive(decrement, "decrement"));\n}\nprivate boolean release0(int decrement) {\nint refCnt;\ndo {\nrefCnt = this.refCnt;\nif(refCnt < decrement) {\nthrow new IllegalReferenceCountException(refCnt, -decrement);\n}\n} while(!refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement));\nif(refCnt == decrement) {\nthis.deallocate();\nreturn true;\n} else {\nreturn false;\n}\n}\nprotected abstract void deallocate();\n}\n')])],1),n._v(" "),t("h3",{attrs:{id:"channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[n._v("#")]),n._v(" Channel")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("Netty中的Channel与Java NIO的概念一样，都是对"),t("strong",[n._v("一个实体或连接的抽象")]),n._v("，但"),t("strong",[n._v("Netty提供了一套更加通用的API")]),n._v("。就以网络套接字为例，在Java中OIO与NIO是截然不同的两套API，假设你之前使用的是OIO而又想更改为NIO实现，那么几乎需要重写所有代码。而在Netty中，只需要更改短短几行代码（更改Channel与EventLoop的实现类，如把OioServerSocketChannel替换为NioServerSocketChannel），就可以完成OIO与NIO（或其他）之间的转换。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx2.sinaimg.cn/large/63503acbly1fm103i127ej20xe0f074y.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx2.sinaimg.cn/large/63503acbly1fm103i127ej20xe0f074y.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("每个Channel最终都会被分配一个"),t("strong",[n._v("ChannelPipeline")]),n._v("和"),t("strong",[n._v("ChannelConfig")]),n._v("，前者持有所有负责"),t("strong",[n._v("处理入站与出站数据")]),n._v("以及"),t("strong",[n._v("事件")]),n._v("的ChannelHandler，后者包含了该Channel的"),t("strong",[n._v("所有配置设置")]),n._v("，并且"),t("strong",[n._v("支持热更新")]),n._v("，由于不同的传输类型可能具有其特别的配置，所以该类可能会实现为ChannelConfig的不同子类。")]),n._v(" "),t("p",[t("strong",[n._v("Channel是线程安全的")]),n._v("（与之后要讲的线程模型有关），因此你完全可以在多个线程中复用同一个Channel，就像如下代码所示。")]),n._v(" "),t("pre",[n._v('final Channel channel = ...\nfinal ByteBuf buffer = Unpooled.copiedBuffer("Hello,World!", CharsetUtil.UTF_8).retain();\nRunnable writer = new Runnable() {\n@Override\npublic void run() {\nchannel.writeAndFlush(buffer.duplicate());\n}\n};\nExecutor executor = Executors.newCachedThreadPool();\nexecutor.execute(writer);\nexecutor.execute(writer);\n.......\n')]),n._v(" "),t("p",[n._v("Netty除了支持常见的NIO与OIO，还内置了其他的传输类型。")]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[n._v("Nmae")]),n._v(" "),t("th",[n._v("Package")]),n._v(" "),t("th",[n._v("Description")])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("NIO")]),n._v(" "),t("td",[n._v("io.netty.channel.socket.nio")]),n._v(" "),t("td",[n._v("以Java NIO为基础实现")])]),n._v(" "),t("tr",[t("td",[n._v("OIO")]),n._v(" "),t("td",[n._v("io.netty.channel.socket.oio")]),n._v(" "),t("td",[n._v("以java.net为基础实现，使用阻塞I/O模型")])]),n._v(" "),t("tr",[t("td",[n._v("Epoll")]),n._v(" "),t("td",[n._v("io.netty.channel.epoll")]),n._v(" "),t("td",[n._v("由JNI驱动epoll()实现的更高性能的非阻塞I/O，它"),t("strong",[n._v("只能使用在Linux")])])]),n._v(" "),t("tr",[t("td",[n._v("Local")]),n._v(" "),t("td",[n._v("io.netty.channel.local")]),n._v(" "),t("td",[t("strong",[n._v("本地传输")]),n._v("，在JVM内部通过"),t("strong",[n._v("管道")]),n._v("进行通信")])]),n._v(" "),t("tr",[t("td",[n._v("Embedded")]),n._v(" "),t("td",[n._v("io.netty.channel.embedded")]),n._v(" "),t("td",[n._v("允许在不需要真实网络传输的环境下使用ChannelHandler，主要用于对ChannelHandler进行"),t("strong",[n._v("测试")])])])])]),n._v(" "),t("p",[n._v("NIO、OIO、Epoll我们应该已经很熟悉了，下面主要说说Local与Embedded。")]),n._v(" "),t("p",[n._v("Local传输用于在"),t("strong",[n._v("同一个JVM中")]),n._v("运行的客户端和服务器程序之间的"),t("strong",[n._v("异步通信")]),n._v("，与服务器Channel相关联的SocketAddress并没有绑定真正的物理网络地址，它会被存储在注册表中，并在Channel关闭时注销。因此Local传输不会接受真正的网络流量，也就是说它不能与其他传输实现进行互操作。")]),n._v(" "),t("p",[n._v("Embedded传输主要用于对ChannelHandler进行"),t("strong",[n._v("单元测试")]),n._v("，ChannelHandler是用于"),t("strong",[n._v("处理消息的逻辑组件")]),n._v("，Netty通过将入站消息与出站消息都写入到EmbeddedChannel中的方式（提供了write/readInbound()与write/readOutbound()来读写入站与出站消息）来实现对ChannelHandler的单元测试。")]),n._v(" "),t("h3",{attrs:{id:"channelhandler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler"}},[n._v("#")]),n._v(" ChannelHandler")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("ChannelHandler充当了处理"),t("strong",[n._v("入站")]),n._v("和"),t("strong",[n._v("出站")]),n._v("数据的应用程序"),t("strong",[n._v("逻辑的容器")]),n._v("，该类是基于"),t("strong",[n._v("事件驱动")]),n._v("的，它会"),t("strong",[n._v("响应相关的事件")]),n._v("然后去"),t("strong",[n._v("调用其关联的回调函数")]),n._v("，例如当一个新的连接"),t("strong",[n._v("被建立")]),n._v("时，ChannelHandler的"),t("strong",[n._v("channelActive")]),n._v("()方法将"),t("strong",[n._v("会被调用")]),n._v("。")]),n._v(" "),t("p",[n._v("关于入站消息和出站消息的数据流向定义，如果以客户端为主视角来说的话，那么从"),t("strong",[n._v("客户端")]),n._v("流向"),t("strong",[n._v("服务器")]),n._v("的数据被称为"),t("strong",[n._v("出站")]),n._v("，反之为入站。")]),n._v(" "),t("p",[n._v("入站事件是可能被"),t("strong",[n._v("入站数据或者相关的状态更改而触发的事件")]),n._v("，包括：连接已被激活、连接失活、读取入站数据、用户事件、发生异常等。")]),n._v(" "),t("p",[n._v("出站事件是"),t("strong",[n._v("未来将会触发的某个动作的结果的事件")]),n._v("，这些动作包括：打开或关闭远程节点的连接、将数据写（或冲刷）到套接字。")]),n._v(" "),t("p",[n._v("ChannelHandler的主要用途包括：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("对"),t("strong",[n._v("入站与出站数据")]),n._v("的业务"),t("strong",[n._v("逻辑处理")])])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("记录日志")])])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("将数据从一种格式转换为另一种格式")]),n._v("，实现编解码器。以一次HTTP协议（或者其他应用层协议）的流程为例，数据在网络传输时的单位为字节，当客户端发送请求到服务器时，服务器需要通过解码器（处理入站消息）将字节解码为协议的消息内容，服务器在发送响应的时候（处理出站消息），还需要通过编码器将消息内容编码为字节。")])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("捕获异常")])])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("提供Channel生命周期内的通知")]),n._v("，如Channel活动时与非活动时")])])]),n._v(" "),t("p",[n._v("Netty中到处都充满了异步与事件驱动，而"),t("strong",[n._v("回调函数")]),n._v("正是用于"),t("strong",[n._v("响应事件之后的操作")]),n._v("。由于异步会直接返回一个结果，所以Netty提供了ChannelFuture（实现了java.util.concurrent.Future）来作为异步调用返回的占位符，真正的结果会在未来的某个时刻完成，到时候就可以通过ChannelFuture对其进行访问，每个Netty的出站I/O操作都将会返回一个ChannelFuture。")]),n._v(" "),t("p",[n._v("Netty还提供了"),t("strong",[n._v("ChannelFutureListener")]),n._v("接口来"),t("strong",[n._v("监听ChannelFuture")]),n._v("是否成功，并采取对应的操作。")]),n._v(" "),t("pre",[n._v('Channel channel = ...\nChannelFuture future = channel.connect(new InetSocketAddress("192.168.0.1",6666));\n// 注册一个监听器\nfuture.addListener(new ChannelFutureListener() {\n@Override\npublic void operationComplete(ChannelFuture future) {\nif (future.isSuccess()) {\n// do something....\n} else {\n// 输出错误信息\nThrowable cause = future.cause();\ncause.printStackTrace();\n// do something....\n}\n}\n});\n')]),n._v(" "),t("p",[n._v("ChannelFutureListener接口中还提供了几个简单的默认实现，方便我们使用。")]),n._v(" "),t("pre",[n._v("package io.netty.channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.util.concurrent.GenericFutureListener;\npublic interface ChannelFutureListener extends GenericFutureListener"),t("ChannelFuture",[n._v(" {\n// 在Future完成时关闭\nChannelFutureListener CLOSE = new ChannelFutureListener() {\npublic void operationComplete(ChannelFuture future) {\nfuture.channel().close();\n}\n};\n// 如果失败则关闭\nChannelFutureListener CLOSE_ON_FAILURE = new ChannelFutureListener() {\npublic void operationComplete(ChannelFuture future) {\nif(!future.isSuccess()) {\nfuture.channel().close();\n}\n}\n};\n// 将异常信息传递给下一个ChannelHandler\nChannelFutureListener FIRE_EXCEPTION_ON_FAILURE = new ChannelFutureListener() {\npublic void operationComplete(ChannelFuture future) {\nif(!future.isSuccess()) {\nfuture.channel().pipeline().fireExceptionCaught(future.cause());\n}\n}\n};\n}\n")])],1),n._v(" "),t("p",[n._v("ChannelHandler接口"),t("strong",[n._v("定义了对它生命周期进行监听的回调函数")]),n._v("，在ChannelHandler被添加到ChannelPipeline或者被移除时都会调用这些函数。")]),n._v(" "),t("pre",[n._v("package io.netty.channel;\npublic interface ChannelHandler {\nvoid handlerAdded(ChannelHandlerContext var1) throws Exception;\nvoid handlerRemoved(ChannelHandlerContext var1) throws Exception;\n/** @deprecated */\n@Deprecated\nvoid exceptionCaught(ChannelHandlerContext var1, Throwable var2) throws Exception;\n// 该注解表明这个ChannelHandler可被其他线程复用\n@Inherited\n@Documented\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Sharable {\n}\n}\n\n")]),n._v(" "),t("p",[t("strong",[n._v("入站消息与出站消息")]),n._v("由其对应的接口"),t("strong",[n._v("ChannelInboundHandler与ChannelOutboundHandle")]),n._v("r负责，这两个接口定义了监听Channel的"),t("strong",[n._v("生命周期的状态改变事件")]),n._v("的回调函数。")]),n._v(" "),t("pre",[n._v("package io.netty.channel;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\npublic interface ChannelInboundHandler extends ChannelHandler {\n// 当channel被注册到EventLoop时被调用\nvoid channelRegistered(ChannelHandlerContext var1) throws Exception;\n// 当channel已经被创建，但还未注册到EventLoop（或者从EventLoop中注销）被调用\nvoid channelUnregistered(ChannelHandlerContext var1) throws Exception;\n// 当channel处于活动状态（连接到远程节点）被调用\nvoid channelActive(ChannelHandlerContext var1) throws Exception;\n// 当channel处于非活动状态（没有连接到远程节点）被调用\nvoid channelInactive(ChannelHandlerContext var1) throws Exception;\n// 当从channel读取数据时被调用\nvoid channelRead(ChannelHandlerContext var1, Object var2) throws Exception;\n// 当channel的上一个读操作完成时被调用\nvoid channelReadComplete(ChannelHandlerContext var1) throws Exception;\n// 当ChannelInboundHandler.fireUserEventTriggered()方法被调用时被调用\nvoid userEventTriggered(ChannelHandlerContext var1, Object var2) throws Exception;\n// 当channel的可写状态发生改变时被调用\nvoid channelWritabilityChanged(ChannelHandlerContext var1) throws Exception;\n// 当处理过程中发生异常时被调用\nvoid exceptionCaught(ChannelHandlerContext var1, Throwable var2) throws Exception;\n}\n\npackage io.netty.channel;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelPromise;\nimport java.net.SocketAddress;\npublic interface ChannelOutboundHandler extends ChannelHandler {\n// 当请求将Channel绑定到一个地址时被调用\n// ChannelPromise是ChannelFuture的一个子接口，定义了如setSuccess(),setFailure()等方法\nvoid bind(ChannelHandlerContext var1, SocketAddress var2, ChannelPromise var3) throws Exception;\n// 当请求将Channel连接到远程节点时被调用\nvoid connect(ChannelHandlerContext var1, SocketAddress var2, SocketAddress var3, ChannelPromise var4) throws Exception;\n// 当请求将Channel从远程节点断开时被调用\nvoid disconnect(ChannelHandlerContext var1, ChannelPromise var2) throws Exception;\n// 当请求关闭Channel时被调用\nvoid close(ChannelHandlerContext var1, ChannelPromise var2) throws Exception;\n// 当请求将Channel从它的EventLoop中注销时被调用\nvoid deregister(ChannelHandlerContext var1, ChannelPromise var2) throws Exception;\n// 当请求从Channel读取数据时被调用\nvoid read(ChannelHandlerContext var1) throws Exception;\n// 当请求通过Channel将数据写到远程节点时被调用\nvoid write(ChannelHandlerContext var1, Object var2, ChannelPromise var3) throws Exception;\n// 当请求通过Channel将缓冲中的数据冲刷到远程节点时被调用\nvoid flush(ChannelHandlerContext var1) throws Exception;\n}\n")]),n._v(" "),t("p",[n._v("通过实现ChannelInboundHandler或者ChannelOutboundHandler就可以完成用户自定义的应用逻辑处理程序，不过Netty已经帮你实"),t("strong",[n._v("现了一些基本操作，用户只需要继承并扩展ChannelInboundHandlerAdapter或ChannelOutboundHandlerAdapter")]),n._v("来作为自定义实现的起始点。")]),n._v(" "),t("p",[n._v("ChannelInboundHandlerAdapter与ChannelOutboundHandlerAdapter都继承于ChannelHandlerAdapter，该抽象类简单实现了ChannelHandler接口。")]),n._v(" "),t("pre",[n._v('public abstract class ChannelHandlerAdapter implements ChannelHandler {\nboolean added;\npublic ChannelHandlerAdapter() {\n}\n// 该方法不允许将此ChannelHandler共享复用\nprotected void ensureNotSharable() {\nif(this.isSharable()) {\nthrow new IllegalStateException("ChannelHandler " + this.getClass().getName() + " is not allowed to be shared");\n}\n}\n// 使用反射判断实现类有没有@Sharable注解，以确认该类是否为可共享复用的\npublic boolean isSharable() {\nClass clazz = this.getClass();\nMap cache = InternalThreadLocalMap.get().handlerSharableCache();\nBoolean sharable = (Boolean)cache.get(clazz);\nif(sharable == null) {\nsharable = Boolean.valueOf(clazz.isAnnotationPresent(Sharable.class));\ncache.put(clazz, sharable);\n}\nreturn sharable.booleanValue();\n}\npublic void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n}\npublic void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n}\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\nctx.fireExceptionCaught(cause);\n}\n}\n')]),n._v(" "),t("p",[n._v("ChannelInboundHandlerAdapter与ChannelOutboundHandlerAdapter"),t("strong",[n._v("默认只是简单地将请求传递给ChannelPipeline中的下一个ChannelHandler")]),n._v("，源码如下：")]),n._v(" "),t("pre",[n._v("public class ChannelInboundHandlerAdapter extends ChannelHandlerAdapter implements ChannelInboundHandler {\npublic ChannelInboundHandlerAdapter() {\n}\npublic void channelRegistered(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelRegistered();\n}\npublic void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelUnregistered();\n}\npublic void channelActive(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelActive();\n}\npublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelInactive();\n}\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\nctx.fireChannelRead(msg);\n}\npublic void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelReadComplete();\n}\npublic void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\nctx.fireUserEventTriggered(evt);\n}\npublic void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\nctx.fireChannelWritabilityChanged();\n}\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\nctx.fireExceptionCaught(cause);\n}\n}\npublic class ChannelOutboundHandlerAdapter extends ChannelHandlerAdapter implements ChannelOutboundHandler {\npublic ChannelOutboundHandlerAdapter() {\n}\npublic void bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise) throws Exception {\nctx.bind(localAddress, promise);\n}\npublic void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise) throws Exception {\nctx.connect(remoteAddress, localAddress, promise);\n}\npublic void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\nctx.disconnect(promise);\n}\npublic void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\nctx.close(promise);\n}\npublic void deregister(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\nctx.deregister(promise);\n}\npublic void read(ChannelHandlerContext ctx) throws Exception {\nctx.read();\n}\npublic void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\nctx.write(msg, promise);\n}\npublic void flush(ChannelHandlerContext ctx) throws Exception {\nctx.flush();\n}\n}\n")]),n._v(" "),t("p",[n._v("对于处理入站消息，另外一种选择是"),t("strong",[n._v("继承SimpleChannelInboundHandler")]),n._v("，它是Netty的一个继承于ChannelInboundHandlerAdapter的抽象类，并在其之上实现了"),t("strong",[n._v("自动释放资源的功能")]),n._v("。")]),n._v(" "),t("p",[n._v("我们在了解ByteBuf时就已经知道了"),t("strong",[n._v("Netty使用了一套自己实现的引用计数算法来主动释放资源")]),n._v("，假设你的ChannelHandler继承于ChannelInboundHandlerAdapter或ChannelOutboundHandlerAdapter，那么你就有责任去管理你所分配的ByteBuf，一般来说，一个消息对象（"),t("strong",[n._v("ByteBuf")]),n._v("）已经被消费（或丢弃）了，"),t("strong",[n._v("并不会传递给ChannelHandler链中的下一个处理器")]),n._v("（如果该消息到达了实际的传输层，那么当它被写入或Channel关闭时，都会被自动释放），所以你就需要去手动释放它。通过一个简单的工具类"),t("strong",[n._v("ReferenceCountUtil的release方法")]),n._v("，就可以做到这一点。")]),n._v(" "),t("pre",[n._v("// 这个泛型为消息对象的类型\npublic abstract class SimpleChannelInboundHandler"),t("I",[n._v(' extends ChannelInboundHandlerAdapter {\nprivate final TypeParameterMatcher matcher;\nprivate final boolean autoRelease;\nprotected SimpleChannelInboundHandler() {\n\tthis(true);\n}\n\nprotected SimpleChannelInboundHandler(boolean autoRelease) {\n        this.matcher = TypeParameterMatcher.find(this, SimpleChannelInboundHandler.class, "I");\n\t    this.autoRelease = autoRelease;\n}\n\nprotected SimpleChannelInboundHandler(Class<? extends I> inboundMessageType) {\n\t\tthis(inboundMessageType, true);\n}\n\nprotected SimpleChannelInboundHandler(Class<? extends I> inboundMessageType, boolean autoRelease) {\n            this.matcher = TypeParameterMatcher.get(inboundMessageType);\n            this.autoRelease = autoRelease;\n}\n\npublic boolean acceptInboundMessage(Object msg) throws Exception {\n\t\treturn this.matcher.match(msg);\n}\n\n// SimpleChannelInboundHandler只是替你做了ReferenceCountUtil.release()\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\nboolean release = true;\ntry {\n    if(this.acceptInboundMessage(msg)) {\n  \t\t   this.channelRead0(ctx, msg);\n    } else {\n            release = false;\n            ctx.fireChannelRead(msg);\n    }\n} finally {\n        if(this.autoRelease && release) {\n            //ByteBuf的释放\n        \tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n}\n// 这个方法才是我们需要实现的方法\nprotected abstract void channelRead0(ChannelHandlerContext var1, I var2) throws Exception;\n}\n// ReferenceCountUtil中的源码，release方法对消息对象的类型进行判断然后调用它的release()方法\npublic static boolean release(Object msg) {\nreturn msg instanceof ReferenceCounted?((ReferenceCounted)msg).release():false;\n}\n')])],1),n._v(" "),t("h3",{attrs:{id:"channelpipeline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline"}},[n._v("#")]),n._v(" ChannelPipeline")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("为了"),t("strong",[n._v("模块化与解耦合")]),n._v("，不可能由一个ChannelHandler来完成所有应用逻辑，所以Netty采用了拦截器链的设计。ChannelPipeline就是用来"),t("strong",[n._v("管理ChannelHandler实例链的容器")]),n._v("，它的职责就是"),t("strong",[n._v("保证实例链的流动")]),n._v("。")]),n._v(" "),t("p",[n._v("每一个新创建的Channel都将会被分配一个新的ChannelPipeline，这种"),t("strong",[n._v("关联关系是永久")]),n._v("性的，一个Channel一生只能对应一个ChannelPipeline。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx3.sinaimg.cn/large/63503acbly1fm1er9l4jfj213h0fcq3d.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx3.sinaimg.cn/large/63503acbly1fm1er9l4jfj213h0fcq3d.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("一个入站事件被触发时，它会先从ChannelPipeline的最左端（头部）开始一直传播到ChannelPipeline的最右端（尾部），而出站事件正好与入站事件顺序相反（从最右端一直传播到最左端）。这个"),t("strong",[n._v("顺序是定死")]),n._v("的，Netty总是将ChannelPipeline的"),t("strong",[n._v("入站口作为头部")]),n._v("，而将"),t("strong",[n._v("出站口作为尾部")]),n._v("。在事件传播的过程中，ChannelPipeline会判断下一个ChannelHandler的类型是否和事件的运动方向相匹配，如果不匹配，就跳过该ChannelHandler并继续检查下一个（保证入站事件只会被ChannelInboundHandler处理），"),t("strong",[n._v("一个")]),n._v("ChannelHandler也可以"),t("strong",[n._v("同时实现")]),n._v("ChannelInboundHandler与ChannelOutboundHandler，它在"),t("strong",[n._v("入站事件与出站事件中都会被调用。")])]),n._v(" "),t("p",[n._v("在阅读ChannelHandler的源码时，发现很多方法需要一个ChannelHandlerContext类型的参数，该接口是ChannelPipeline与ChannelHandler之间相关联的关键。ChannelHandlerContext可以通知ChannelPipeline中的当前ChannelHandler的下一个ChannelHandler，还可以动态地改变当前ChannelHandler在ChannelPipeline中的位置（通过调用ChannelPipeline中的各种方法来修改）。")]),n._v(" "),t("p",[n._v("ChannelHandlerContext负责了在同一个ChannelPipeline中的ChannelHandler与其他ChannelHandler之间的交互，每个ChannelHandlerContext都对应了一个ChannelHandler。在DefaultChannelPipeline的源码中，已经表现的很明显了。")]),n._v(" "),t("pre",[n._v("public class DefaultChannelPipeline implements ChannelPipeline {\n.........\n// 头部节点和尾部节点的引用变量\n// ChannelHandlerContext在ChannelPipeline中是以链表的形式组织的\nfinal AbstractChannelHandlerContext head;\nfinal AbstractChannelHandlerContext tail;\n.........\n// 添加一个ChannelHandler到链表尾部\npublic final ChannelPipeline addLast(String name, ChannelHandler handler) {\nreturn this.addLast((EventExecutorGroup)null, name, handler);\n}\npublic final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) {\nfinal AbstractChannelHandlerContext newCtx;\nsynchronized(this) {\n// 检查ChannelHandler是否为一个共享对象(@Sharable)\n// 如果该ChannelHandler没有@Sharable注解，并且是已被添加过的那么就抛出异常\ncheckMultiplicity(handler);\n// 返回一个DefaultChannelHandlerContext，注意该对象持有了传入的ChannelHandler\nnewCtx = this.newContext(group, this.filterName(name, handler), handler);\nthis.addLast0(newCtx);\n// 如果当前ChannelPipeline没有被注册，那么就先加到未决链表中\nif(!this.registered) {\nnewCtx.setAddPending();\nthis.callHandlerCallbackLater(newCtx, true);\nreturn this;\n}\n// 否则就调用ChannelHandler中的handlerAdded()\nEventExecutor executor = newCtx.executor();\nif(!executor.inEventLoop()) {\nnewCtx.setAddPending();\nexecutor.execute(new Runnable() {\npublic void run() {\nDefaultChannelPipeline.this.callHandlerAdded0(newCtx);\n}\n});\nreturn this;\n}\n}\nthis.callHandlerAdded0(newCtx);\nreturn this;\n}\n// 将新的ChannelHandlerContext插入到尾部与尾部之前的节点之间\nprivate void addLast0(AbstractChannelHandlerContext newCtx) {\nAbstractChannelHandlerContext prev = this.tail.prev;\nnewCtx.prev = prev;\nnewCtx.next = this.tail;\nprev.next = newCtx;\nthis.tail.prev = newCtx;\n}\n.....\n}\n")]),n._v(" "),t("p",[n._v("ChannelHandlerContext还定义了许多与Channel和ChannelPipeline重合的方法（像read()、write()、connect()这些用于出站的方法或者如fireChannelXXXX()这样用于"),t("strong",[n._v("入站的方法")]),n._v("），不同之处在于"),t("strong",[n._v("调用Channel或者ChannelPipeline上的这些方法，它们将会从头沿着整个ChannelHandler实例链进行传播，而调用位于ChannelHandlerContext上的相同方法，则会从当前所关联的ChannelHandler开始，且只会传播给实例链中的下一个ChannelHandler")]),n._v("。而且，"),t("strong",[n._v("事件之间的移动")]),n._v("（从一个ChannelHandler到下一个ChannelHandler）也是"),t("strong",[n._v("通过ChannelHandlerContext中的方法调用完成")]),n._v("的。")]),n._v(" "),t("h2",{attrs:{id:"public-class-defaultchannelpipeline-implements-channelpipeline-public-final-channelpipeline-firechannelread-object-msg-注意这里将头节点传入了进去abstractchannelhandlercontext-invokechannelread-this-head-msg-return-this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public-class-defaultchannelpipeline-implements-channelpipeline-public-final-channelpipeline-firechannelread-object-msg-注意这里将头节点传入了进去abstractchannelhandlercontext-invokechannelread-this-head-msg-return-this"}},[n._v("#")]),n._v(" "),t("pre",[n._v("public class DefaultChannelPipeline implements ChannelPipeline {\npublic final ChannelPipeline fireChannelRead(Object msg) {\n// 注意这里将头节点传入了进去\nAbstractChannelHandlerContext.invokeChannelRead(this.head, msg);\nreturn this;\n}\n}")])]),n._v(" "),t("p",[n._v('abstract class AbstractChannelHandlerContext extends DefaultAttributeMap implements ChannelHandlerContext, ResourceLeakHint {\nstatic void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\nfinal Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, "msg"), next);\nEventExecutor executor = next.executor();\nif(executor.inEventLoop()) {\nnext.invokeChannelRead(m);\n} else {\nexecutor.execute(new Runnable() {\npublic void run() {\nnext.invokeChannelRead(m);\n}\n});\n}\n}\nprivate void invokeChannelRead(Object msg) {\nif(this.invokeHandler()) {\ntry {\n((ChannelInboundHandler)this.handler()).channelRead(this, msg);\n} catch (Throwable var3) {\nthis.notifyHandlerException(var3);\n}\n} else {\n// 寻找下一个ChannelHandler\nthis.fireChannelRead(msg);\n}\n}\npublic ChannelHandlerContext fireChannelRead(Object msg) {\ninvokeChannelRead(this.findContextInbound(), msg);\nreturn this;\n}\nprivate AbstractChannelHandlerContext findContextInbound() {\nAbstractChannelHandlerContext ctx = this;\ndo {\nctx = ctx.next;\n} while(!ctx.inbound); // 直到找到一个ChannelInboundHandler\nreturn ctx;\n}\n}\n')]),n._v(" "),t("h3",{attrs:{id:"eventloop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[n._v("#")]),n._v(" EventLoop")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("为了最大限度地提供高性能和可维护性，Netty设计了一套强大又易用的线程模型。在一个网络框架中，最重要的能力是能够快速高效地"),t("strong",[n._v("处理在连接的生命周期内发生的各种事件")]),n._v("，与之相匹配的程序构造被称为"),t("strong",[n._v("事件循环")]),n._v("，Netty定义了接口EventLoop来负责这项工作。")]),n._v(" "),t("p",[n._v("如果是经常用Java进行多线程开发的童鞋想必经常会使用到线程池，也就是Executor这套API。Netty就是从Executor（java.util.concurrent）之上扩展了自己的EventExecutorGroup（io.netty.util.concurrent），同时为了与Channel的事件进行交互，还扩展了EventLoopGroup接口（io.netty.channel）。在io.netty.util.concurrent包下的EventExecutorXXX负责实现"),t("strong",[n._v("线程并发")]),n._v("相关的工作，而在io.netty.channel包下的EventLoopXXX负责"),t("strong",[n._v("实现网络编程")]),n._v("相关的工作（处理Channel中的事件）。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://wx3.sinaimg.cn/large/63503acbly1fm296hz0p9j20ff0kc3z2.jpg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://wx3.sinaimg.cn/large/63503acbly1fm296hz0p9j20ff0kc3z2.jpg",alt:""}}),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("在Netty的线程模型中，一个EventLoop将由一个永远不会改变的Thread驱动，而一个Channel一生只会使用一个EventLoop（但是一个EventLoop可能会被指派用于服务多个Channel），在Channel中的所有I/O操作和事件都由EventLoop中的线程处理，也就是说"),t("strong",[n._v("一个Channel的一生之中都只会使用到一个线程")]),n._v("。不过在Netty3，只有入站事件会被EventLoop处理，所有出站事件都会由调用线程处理，这种设计导致了ChannelHandler的线程安全问题。Netty4简化了线程模型，通过在同一个线程处理所有事件，既解决了这个问题，还提供了一个更加简单的架构。")]),n._v(" "),t("pre",[n._v('package io.netty.channel;\npublic abstract class SingleThreadEventLoop extends SingleThreadEventExecutor implements EventLoop {\nprotected static final int DEFAULT_MAX_PENDING_TASKS = Math.max(16, SystemPropertyUtil.getInt("io.netty.eventLoop.maxPendingTasks", 2147483647));\n    //内部队列\nprivate final Queue'),t("Runnable",[n._v(' tailTasks;\nprotected SingleThreadEventLoop(EventLoopGroup parent, ThreadFactory threadFactory, boolean addTaskWakesUp) {\nthis(parent, threadFactory, addTaskWakesUp, DEFAULT_MAX_PENDING_TASKS, RejectedExecutionHandlers.reject());\n}\nprotected SingleThreadEventLoop(EventLoopGroup parent, Executor executor, boolean addTaskWakesUp) {\nthis(parent, executor, addTaskWakesUp, DEFAULT_MAX_PENDING_TASKS, RejectedExecutionHandlers.reject());\n}\nprotected SingleThreadEventLoop(EventLoopGroup parent, ThreadFactory threadFactory, boolean addTaskWakesUp, int maxPendingTasks, RejectedExecutionHandler rejectedExecutionHandler) {\nsuper(parent, threadFactory, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);\nthis.tailTasks = this.newTaskQueue(maxPendingTasks);\n}\nprotected SingleThreadEventLoop(EventLoopGroup parent, Executor executor, boolean addTaskWakesUp, int maxPendingTasks, RejectedExecutionHandler rejectedExecutionHandler) {\nsuper(parent, executor, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);\nthis.tailTasks = this.newTaskQueue(maxPendingTasks);\n}\n// 返回它所在的EventLoopGroup\npublic EventLoopGroup parent() {\nreturn (EventLoopGroup)super.parent();\n}\npublic EventLoop next() {\nreturn (EventLoop)super.next();\n}\n// 注册Channel,这里ChannelPromise和Channel关联到了一起\npublic ChannelFuture register(Channel channel) {\nreturn this.register((ChannelPromise)(new DefaultChannelPromise(channel, this)));\n}\npublic ChannelFuture register(ChannelPromise promise) {\nObjectUtil.checkNotNull(promise, "promise");\npromise.channel().unsafe().register(this, promise);\nreturn promise;\n}\n// 剩下这些函数都是用于调度任务\npublic final void executeAfterEventLoopIteration(Runnable task) {\nObjectUtil.checkNotNull(task, "task");\nif(this.isShutdown()) {\nreject();\n}\nif(!this.tailTasks.offer(task)) {\nthis.reject(task);\n}\nif(this.wakesUpForTask(task)) {\nthis.wakeup(this.inEventLoop());\n}\n}\nfinal boolean removeAfterEventLoopIterationTask(Runnable task) {\nreturn this.tailTasks.remove(ObjectUtil.checkNotNull(task, "task"));\n}\nprotected boolean wakesUpForTask(Runnable task) {\nreturn !(task instanceof SingleThreadEventLoop.NonWakeupRunnable);\n}\nprotected void afterRunningAllTasks() {\nthis.runAllTasksFrom(this.tailTasks);\n}\nprotected boolean hasTasks() {\nreturn super.hasTasks() || !this.tailTasks.isEmpty();\n}\npublic int pendingTasks() {\nreturn super.pendingTasks() + this.tailTasks.size();\n}\ninterface NonWakeupRunnable extends Runnable {\n}\n}\n')])],1),n._v(" "),t("p",[n._v("为了确保一个Channel的整个生命周期中的I/O事件会被一个EventLoop负责，Netty通过"),t("strong",[n._v("inEventLoop()"),t("strong",[n._v("方法来")]),n._v("判断当前执行的线程的身份")]),n._v("，确定它是否是分配给当前Channel以及它的EventLoop的那一个线程。")]),n._v(" "),t("p",[n._v("如果当前（调用）线程正是EventLoop中的线程，那么所提交的任务将会被**(true)直接执行**，否则，EventLoop将调度该任务以便**(false)稍后执行**，并将它"),t("strong",[n._v("放入内部的任务队列")]),n._v("（每个EventLoop都有它自己的任务队列，SingleThreadEventLoop的源码就能发现很多用于调度内部任务队列的方法），在下次处理它的事件时，将会执行队列中的那些任务。这种设计可以让任何线程与Channel直接交互，而无需在ChannelHandler中进行额外的同步。")]),n._v(" "),t("p",[n._v("从性能上来考虑，千万"),t("strong",[n._v("不要将一个需要长时间来运行的任务放入到任务队列中")]),n._v("，它会影响到该队列中的其他任务的执行。"),t("strong",[n._v("解决方案")]),n._v("是"),t("strong",[n._v("使用一个专门的EventExecutor来执行它")]),n._v("（ChannelPipeline提供了带有EventExecutorGroup参数的addXXX()方法，该方法可以"),t("strong",[n._v("将传入的ChannelHandler绑定到你传入的EventExecutor之中")]),n._v("），这样它就会在另一条线程中执行，与其他任务隔离。")]),n._v(" "),t("pre",[n._v('public abstract class SingleThreadEventExecutor extends AbstractScheduledEventExecutor implements OrderedEventExecutor {\n.....\npublic void execute(Runnable task) {\nif(task == null) {\nthrow new NullPointerException("task");\n} else {\nboolean inEventLoop = this.inEventLoop();\nif(inEventLoop) {\nthis.addTask(task);\n} else {\nthis.startThread();\nthis.addTask(task);\nif(this.isShutdown() && this.removeTask(task)) {\nreject();\n}\n}\nif(!this.addTaskWakesUp && this.wakesUpForTask(task)) {\nthis.wakeup(inEventLoop);\n}\n}\n}\npublic boolean inEventLoop(Thread thread) {\nreturn thread == this.thread;\n}\n.....\n}\n')]),n._v(" "),t("p",[n._v("EventLoopGroup"),t("strong",[n._v("负责管理和分配EventLoop（创建EventLoop和为每个新创建的Channel分配EventLoop），根据不同的传输类型，EventLoop的创建和分配方式也不同")]),n._v("。例如，使用NIO传输类型，EventLoopGroup就会只使用较少的EventLoop（一个EventLoop服务于多个Channel），这是因为NIO基于I/O多路复用，一个线程可以处理多个连接，而如果使用的是OIO，那么新创建一个Channel（连接）就需要分配一个EventLoop（线程）。")]),n._v(" "),t("h3",{attrs:{id:"bootstrap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap"}},[n._v("#")]),n._v(" Bootstrap")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("在深入了解地Netty的核心组件之后，发现它们的"),t("strong",[n._v("设计")]),n._v("都很"),t("strong",[n._v("模块化")]),n._v("，如果想要实现你自己的应用程序，就需要"),t("strong",[n._v("将这些组件组装到一起")]),n._v("。Netty通过Bootstrap类，以对一个Netty应用程序进行配置（"),t("strong",[n._v("组装各个组件")]),n._v("），并最终使它运行起来。对于客户端程序和服务器程序所使用到的Bootstrap类是不同的，后者需要使用ServerBootstrap，这样设计是因为，在如TCP这样有连接的协议中，服务器程序往往需要一个以上的Channel，通过父Channel来接受来自客户端的连接，然后创建子Channel用于它们之间的通信，而像UDP这样无连接的协议，它不需要每个连接都创建子Channel，只需要一个Channel即可。")]),n._v(" "),t("p",[n._v("一个比较明显的差异就是Bootstrap与ServerBootstrap的group()方法，后者提供了一个接收2个EventLoopGroup的版本。")]),n._v(" "),t("pre",[n._v('// 该方法在Bootstrap的父类AbstractBootstrap中，泛型B为它当前子类的类型（为了链式调用）\npublic B group(EventLoopGroup group) {\nif(group == null) {\nthrow new NullPointerException("group");\n} else if(this.group != null) {\nthrow new IllegalStateException("group set already");\n} else {\nthis.group = group;\nreturn this;\n}\n}\n// ServerBootstrap中的实现，它也支持只用一个EventLoopGroup\npublic ServerBootstrap group(EventLoopGroup group) {\nreturn this.group(group, group);\n}\npublic ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup) {\nsuper.group(parentGroup);\nif(childGroup == null) {\nthrow new NullPointerException("childGroup");\n} else if(this.childGroup != null) {\nthrow new IllegalStateException("childGroup set already");\n} else {\nthis.childGroup = childGroup;\nreturn this;\n}\n}\n')]),n._v(" "),t("p",[n._v("Bootstrap其实没有什么可以好说的，它就只是一个"),t("strong",[n._v("装配工")]),n._v("，将各个组件拼装组合到一起，然后进行一些配置，有关它的详细API请参考"),t("a",{attrs:{href:"http://netty.io/4.1/api/index.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Netty JavaDoc"),t("OutboundLink")],1),n._v("。")]),n._v(" "),t("h3",{attrs:{id:"echo示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#echo示例"}},[n._v("#")]),n._v(" Echo示例")]),n._v(" "),t("p",[n._v("下面我们将通过一个经典的Echo客户端与服务器的例子，来梳理一遍创建Netty应用的流程。")]),n._v(" "),t("p",[n._v("首先实现的是服务器，我们先实现一个EchoServerInboundHandler，处理入站消息。")]),n._v(" "),t("pre",[n._v('public class EchoServerInboundHandler extends ChannelInboundHandlerAdapter {\n@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\nByteBuf in = (ByteBuf) msg;\nSystem.out.printf("Server received: %s \\n", in.toString(CharsetUtil.UTF_8));\n// 由于读事件不是一次性就能把完整消息发送过来的，这里并没有调用writeAndFlush\nctx.write(in); // 直接把消息写回给客户端(会被出站消息处理器处理,不过我们的应用没有实现任何出站消息处理器)\n}\n@Override\npublic void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n// 等读事件已经完成时,冲刷之前写数据的缓冲区\n// 然后添加了一个监听器，它会在Future完成时进行关闭该Channel.\nctx.writeAndFlush(Unpooled.EMPTY_BUFFER)\n.addListener(ChannelFutureListener.CLOSE);\n}\n// 处理异常，输出异常信息，然后关闭Channel\n@Override\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\ncause.printStackTrace();\nctx.close();\n}\n}\n')]),n._v(" "),t("p",[n._v("服务器的应用逻辑只有这么多，剩下就是用ServerBootstrap进行配置了。")]),n._v(" "),t("pre",[n._v("public class EchoServer {\nprivate final int port;\npublic EchoServer(int port) {\nthis.port = port;\n}\npublic void start() throws Exception {\nfinal EchoServerInboundHandler serverHandler = new EchoServerInboundHandler();\nEventLoopGroup group = new NioEventLoopGroup(); // 传输类型使用NIO\ntry {\nServerBootstrap b = new ServerBootstrap();\nb.group(group) // 配置EventLoopGroup\n.channel(NioServerSocketChannel.class) // 配置Channel的类型\n.localAddress(new InetSocketAddress(port)) // 配置端口号\n.childHandler(new ChannelInitializer"),t("SocketChannel",[n._v('() {\n// 实现一个ChannelInitializer，它可以方便地添加多个ChannelHandler\n@Override\nprotected void initChannel(SocketChannel socketChannel) throws Exception {\nsocketChannel.pipeline().addLast(serverHandler);\n}\n});\n// 绑定地址，同步等待它完成\nChannelFuture f = b.bind().sync();\n// 关闭这个Future\nf.channel().closeFuture().sync();\n} finally {\n// 关闭应用程序，一般来说Netty应用只需要调用这个方法就够了\ngroup.shutdownGracefully().sync();\n}\n}\npublic static void main(String[] args) throws Exception {\nif (args.length != 1) {\nSystem.err.printf(\n"Usage: %s '),t("port",[n._v(' \\n",\nEchoServer.class.getSimpleName()\n);\nreturn;\n}\nint port = Integer.parseInt(args[0]);\nnew EchoServer(port).start();\n}\n}\n')])],1)],1),n._v(" "),t("p",[n._v("接下来实现客户端，同样需要先实现一个入站消息处理器。")]),n._v(" "),t("pre",[n._v("public class EchoClientInboundHandler extends SimpleChannelInboundHandler"),t("ByteBuf",[n._v(' {\n/**\n* 我们在Channel连接到远程节点直接发送一条消息给服务器\n*/\n@Override\npublic void channelActive(ChannelHandlerContext ctx) throws Exception {\nctx.writeAndFlush(Unpooled.copiedBuffer("Hello, Netty!", CharsetUtil.UTF_8));\n}\n@Override\nprotected void channelRead0(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf) throws Exception {\n// 输出从服务器Echo的消息\nSystem.out.printf("Client received: %s \\n", byteBuf.toString(CharsetUtil.UTF_8));\n}\n@Override\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\ncause.printStackTrace();\nctx.close();\n}\n}\n')])],1),n._v(" "),t("p",[n._v("然后配置客户端。")]),n._v(" "),t("pre",[n._v("public class EchoClient {\nprivate final String host;\nprivate final int port;\npublic EchoClient(String host, int port) {\nthis.host = host;\nthis.port = port;\n}\npublic void start() throws Exception {\nEventLoopGroup group = new NioEventLoopGroup();\ntry {\nBootstrap b = new Bootstrap();\nb.group(group)\n.channel(NioSocketChannel.class)\n.remoteAddress(new InetSocketAddress(host, port)) // 服务器的地址\n.handler(new ChannelInitializer"),t("SocketChannel",[n._v('() {\n@Override\nprotected void initChannel(SocketChannel socketChannel) throws Exception {\nsocketChannel.pipeline().addLast(new EchoClientInboundHandler());\n}\n});\nChannelFuture f = b.connect().sync(); // 连接到服务器\nf.channel().closeFuture().sync();\n} finally {\ngroup.shutdownGracefully().sync();\n}\n}\npublic static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.err.printf("Usage: %s '),t("host",[n._v(" "),t("port",[n._v(' \\n", EchoClient.class.getSimpleName());\nreturn;\n}\nString host = args[0];\nint port = Integer.parseInt(args[1]);\nnew EchoClient(host, port).start();\n}\n}\n')])],1)],1)],1),n._v(" "),t("p",[n._v("实现一个Netty应用程序就是如此简单，用户大多数都是在编写各种应用逻辑的ChannelHandler（或者使用Netty内置的各种实用ChannelHandler），然后只需要将它们全部添加到ChannelPipeline即可。")]),n._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[n._v("#")]),n._v(" 参考文献")]),n._v(" "),t("hr"),n._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://netty.io/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Netty: Home"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://notes.shichao.io/unp/ch6/#io-multiplexing-model",target:"_blank",rel:"noopener noreferrer"}},[n._v("Chapter 6. I/O Multiplexing: The select and poll Functions - Shichao’s Notes"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/epoll.7.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("epoll(7) - Linux manual page"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://tutorials.jenkov.com/java-nio/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Java NIO"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://netty.io/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Netty: Home"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://notes.shichao.io/unp/ch6/#io-multiplexing-model",target:"_blank",rel:"noopener noreferrer"}},[n._v("Chapter 6. I/O Multiplexing: The select and poll Functions - Shichao’s Notes"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/epoll.7.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("epoll(7) - Linux manual page"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://tutorials.jenkov.com/java-nio/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Java NIO"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=a.exports}}]);