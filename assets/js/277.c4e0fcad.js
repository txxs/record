(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{662:function(n,e,s){"use strict";s.r(e);var a=s(13),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"table-of-contents"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#redis%E9%85%8D%E7%BD%AE"}},[n._v("Redis配置")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%EF%BC%88%E6%AF%AB%E7%A7%92%EF%BC%89"}},[n._v("连接超时时间（毫秒）")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BA-caching-%E9%85%8D%E7%BD%AE%E7%B1%BB"}},[n._v("一、创建 Caching 配置类")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%E9%9C%80%E8%A6%81%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E7%B1%BB"}},[n._v("二、创建需要缓存数据的类")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95"}},[n._v("三、测试方法")])])])])]),n._v(" "),s("p",[n._v("本文内容参考网络，侵删")]),n._v(" "),s("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),s("blockquote",[s("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),s("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),s("p",[n._v("本文也将同步到我的个人博客：")]),n._v(" "),s("blockquote",[s("p",[n._v("www.how2playlife.com")])]),n._v(" "),s("p",[n._v("更多Java技术文章将陆续在微信公众号【Java技术江湖】更新，敬请关注。")]),n._v(" "),s("p",[n._v("该系列博文会告诉你什么是分布式系统，这对后端工程师来说是很重要的一门学问，我们会逐步了解常见的分布式技术、以及一些较为常见的分布式系统概念，同时也需要进一步了解zookeeper、分布式事务、分布式锁、负载均衡等技术，以便让你更完整地了解分布式技术的具体实战方法，为真正应用分布式技术做好准备。")]),n._v(" "),s("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),n._v(" "),s("p",[n._v("本文转载自 linkedkeeper.com")]),n._v(" "),s("p",[n._v("Spring Boot 熟悉后，集成一个外部扩展是一件很容易的事，集成Redis也很简单，看下面步骤配置：")]),n._v(" "),s("p",[n._v("一、添加pom依赖")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-redis</artifactId>\n    </dependency>\n")])])]),s("p",[n._v("二、创建 RedisClient.java\n注意该类存放的package")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('package org.springframework.data.redis.connection.jedis;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.UnsupportedEncodingException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Protocol;\nimport redis.clients.jedis.exceptions.JedisException;\n\n/**\n * 工具类 RedisClient\n * 因为本类中获取JedisPool调用的是JedisConnectionFactory中protected修饰的方法fetchJedisConnector()\n * 所以该类需要与JedisConnectionFactory在同一个package中\n *\n * @author 单红宇(CSDN CATOOP)\n * @create 2017年4月9日\n */\npublic class RedisClient {\n\n    private static Logger logger = LoggerFactory.getLogger(RedisClient.class);\n\n    private JedisConnectionFactory factory;\n\n    public RedisClient(JedisConnectionFactory factory) {\n        super();\n        this.factory = factory;\n    }\n\n    /**\n     * put操作（存储序列化对象）+ 生效时间\n     * \n     * @param key\n     * @param value\n     * @return\n     */\n    public void putObject(final String key, final Object value, final int cacheSeconds) {\n        if (StringUtils.isNotBlank(key)) {\n            redisTemplete(key, new RedisExecute<Object>() {\n                @Override\n                public Object doInvoker(Jedis jedis) {\n                    try {\n                        jedis.setex(key.getBytes(Protocol.CHARSET), cacheSeconds, serialize(value));\n                    } catch (UnsupportedEncodingException e) {\n                    }\n\n                    return null;\n                }\n            });\n        }\n    }\n\n    /**\n     * get操作（获取序列化对象）\n     * \n     * @param key\n     * @return\n     */\n    public Object getObject(final String key) {\n        return redisTemplete(key, new RedisExecute<Object>() {\n            @Override\n            public Object doInvoker(Jedis jedis) {\n                try {\n                    byte[] byteKey = key.getBytes(Protocol.CHARSET);\n                    byte[] byteValue = jedis.get(byteKey);\n                    if (byteValue != null) {\n                        return deserialize(byteValue);\n                    }\n                } catch (UnsupportedEncodingException e) {\n                    return null;\n                }\n                return null;\n            }\n        });\n    }\n\n    /**\n     * setex操作\n     * \n     * @param key\n     *            键\n     * @param value\n     *            值\n     * @param cacheSeconds\n     *            超时时间，0为不超时\n     * @return\n     */\n    public String set(final String key, final String value, final int cacheSeconds) {\n        return redisTemplete(key, new RedisExecute<String>() {\n            @Override\n            public String doInvoker(Jedis jedis) {\n                if (cacheSeconds == 0) {\n                    return jedis.set(key, value);\n                }\n                return jedis.setex(key, cacheSeconds, value);\n            }\n        });\n    }\n\n    /**\n     * get操作\n     * \n     * @param key\n     *            键\n     * @return 值\n     */\n    public String get(final String key) {\n        return redisTemplete(key, new RedisExecute<String>() {\n            @Override\n            public String doInvoker(Jedis jedis) {\n                String value = jedis.get(key);\n                return StringUtils.isNotBlank(value) && !"nil".equalsIgnoreCase(value) ? value : null;\n            }\n        });\n    }\n\n    /**\n     * del操作\n     * \n     * @param key\n     *            键\n     * @return\n     */\n    public long del(final String key) {\n        return redisTemplete(key, new RedisExecute<Long>() {\n            @Override\n            public Long doInvoker(Jedis jedis) {\n                return jedis.del(key);\n            }\n        });\n    }\n\n    /**\n     * 获取资源\n     * \n     * @return\n     * @throws JedisException\n     */\n    public Jedis getResource() throws JedisException {\n        Jedis jedis = null;\n        try {\n            jedis = factory.fetchJedisConnector();\n        } catch (JedisException e) {\n            logger.error("getResource.", e);\n            returnBrokenResource(jedis);\n            throw e;\n        }\n        return jedis;\n    }\n\n    /**\n     * 获取资源\n     * \n     * @return\n     * @throws JedisException\n     */\n    public Jedis getJedis() throws JedisException {\n        return getResource();\n    }\n\n    /**\n     * 归还资源\n     * \n     * @param jedis\n     * @param isBroken\n     */\n    public void returnBrokenResource(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    /**\n     * 释放资源\n     * \n     * @param jedis\n     * @param isBroken\n     */\n    public void returnResource(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    /**\n     * 操作jedis客户端模板\n     * \n     * @param key\n     * @param execute\n     * @return\n     */\n    public <R> R redisTemplete(String key, RedisExecute<R> execute) {\n        Jedis jedis = null;\n        try {\n            jedis = getResource();\n            if (jedis == null) {\n                return null;\n            }\n\n            return execute.doInvoker(jedis);\n        } catch (Exception e) {\n            logger.error("operator redis api fail,{}", key, e);\n        } finally {\n            returnResource(jedis);\n        }\n        return null;\n    }\n\n    /**\n     * 功能简述: 对实体Bean进行序列化操作.\n     * \n     * @param source\n     *            待转换的实体\n     * @return 转换之后的字节数组\n     * @throws Exception\n     */\n    public static byte[] serialize(Object source) {\n        ByteArrayOutputStream byteOut = null;\n        ObjectOutputStream ObjOut = null;\n        try {\n            byteOut = new ByteArrayOutputStream();\n            ObjOut = new ObjectOutputStream(byteOut);\n            ObjOut.writeObject(source);\n            ObjOut.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != ObjOut) {\n                    ObjOut.close();\n                }\n            } catch (IOException e) {\n                ObjOut = null;\n            }\n        }\n        return byteOut.toByteArray();\n    }\n\n    /**\n     * 功能简述: 将字节数组反序列化为实体Bean.\n     * \n     * @param source\n     *            需要进行反序列化的字节数组\n     * @return 反序列化后的实体Bean\n     * @throws Exception\n     */\n    public static Object deserialize(byte[] source) {\n        ObjectInputStream ObjIn = null;\n        Object retVal = null;\n        try {\n            ByteArrayInputStream byteIn = new ByteArrayInputStream(source);\n            ObjIn = new ObjectInputStream(byteIn);\n            retVal = ObjIn.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != ObjIn) {\n                    ObjIn.close();\n                }\n            } catch (IOException e) {\n                ObjIn = null;\n            }\n        }\n        return retVal;\n    }\n\n    interface RedisExecute<T> {\n        T doInvoker(Jedis jedis);\n    }\n}\n')])])]),s("p",[n._v("三、创建Redis配置类\nRedisConfig.java")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('package com.shanhy.example.redis;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.RedisClient;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n/**\n * Redis配置\n * \n * @author 单红宇(CSDN catoop)\n * @create 2016年9月12日\n */\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(JedisConnectionFactory factory) {\n        RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();\n        template.setConnectionFactory(factory);\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new RedisObjectSerializer());\n        template.afterPropertiesSet();\n        return template;\n    }\n\n    @Bean\n    public RedisClient redisClient(JedisConnectionFactory factory){\n        return new RedisClient(factory);\n    }\n}\n\nRedisObjectSerializer.java\n\npackage com.shanhy.example.redis;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.serializer.support.DeserializingConverter;\nimport org.springframework.core.serializer.support.SerializingConverter;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.SerializationException;\n\n/**\n * 实现对象的序列化接口\n * @author   单红宇(365384722)\n * @myblog  http://blog.csdn.net/catoop/\n * @create    2017年4月9日\n */\npublic class RedisObjectSerializer implements RedisSerializer<Object> {\n\n    private Converter<Object, byte[]> serializer = new SerializingConverter();\n    private Converter<byte[], Object> deserializer = new DeserializingConverter();\n\n    static final byte[] EMPTY_ARRAY = new byte[0];\n\n    @Override\n    public Object deserialize(byte[] bytes) {\n        if (isEmpty(bytes)) {\n            return null;\n        }\n\n        try {\n            return deserializer.convert(bytes);\n        } catch (Exception ex) {\n            throw new SerializationException("Cannot deserialize", ex);\n        }\n    }\n\n    @Override\n    public byte[] serialize(Object object) {\n        if (object == null) {\n            return EMPTY_ARRAY;\n        }\n\n        try {\n            return serializer.convert(object);\n        } catch (Exception ex) {\n            return EMPTY_ARRAY;\n        }\n    }\n\n    private boolean isEmpty(byte[] data) {\n        return (data == null || data.length == 0);\n    }\n\n}\n')])])]),s("p",[n._v("四、创建测试方法\n下面代码随便放一个Controller里")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('@Autowired\nprivate RedisTemplate<String, Object> redisTemplate;\n\n/**\n * 缓存测试\n *\n * @return\n * @author  SHANHY\n * @create  2016年9月12日\n */\n@RequestMapping("/redisTest")\npublic String redisTest() {\n    try {\n        redisTemplate.opsForValue().set("test-key", "redis测试内容", 2, TimeUnit.SECONDS);// 缓存有效期2秒\n\n        logger.info("从Redis中读取数据：" + redisTemplate.opsForValue().get("test-key").toString());\n\n        TimeUnit.SECONDS.sleep(3);\n\n        logger.info("等待3秒后尝试读取过期的数据：" + redisTemplate.opsForValue().get("test-key"));\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    return "OK";\n}\n')])])]),s("p",[n._v("五、配置文件配置Redis\napplication.yml")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("spring:\n  # Redis配置\n  redis:\n    host: 192.168.1.101\n    port: 6379\n    password:\n    # 连接超时时间（毫秒）\n    timeout: 10000\n    pool:\n      max-idle: 20\n      min-idle: 5\n      max-active: 20\n      max-wait: 2\n")])])]),s("p",[n._v("这样就完成了Redis的配置，可以正常使用 redisTemplate 了。")]),n._v(" "),s("p",[n._v("atoop/article/details/71275331")]),n._v(" "),s("h3",{attrs:{id:"一、创建-caching-配置类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、创建-caching-配置类"}},[n._v("#")]),n._v(" 一、创建 Caching 配置类")]),n._v(" "),s("p",[n._v("RedisKeys.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package com.shanhy.example.redis;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.annotation.PostConstruct;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * 方法缓存key常量\n * \n * @author SHANHY\n */\n@Component\npublic class RedisKeys {\n\n    // 测试 begin\n    public static final String _CACHE_TEST = "_cache_test";// 缓存key\n    public static final Long _CACHE_TEST_SECOND = 20L;// 缓存时间\n    // 测试 end\n\n    // 根据key设定具体的缓存时间\n    private Map<String, Long> expiresMap = null;\n\n    @PostConstruct\n    public void init(){\n        expiresMap = new HashMap<>();\n        expiresMap.put(_CACHE_TEST, _CACHE_TEST_SECOND);\n    }\n\n    public Map<String, Long> getExpiresMap(){\n        return this.expiresMap;\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])]),s("p",[n._v("CachingConfig.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package com.shanhy.example.redis;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.interceptor.KeyGenerator;\nimport org.springframework.cache.interceptor.SimpleKeyGenerator;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * 注解式环境管理\n * \n * @author 单红宇(CSDN catoop)\n * @create 2016年9月12日\n */\n@Configuration\n@EnableCaching\npublic class CachingConfig extends CachingConfigurerSupport {\n\n    /**\n     * 在使用@Cacheable时，如果不指定key，则使用找个默认的key生成器生成的key\n     *\n     * @return\n     * \n     * @author 单红宇(CSDN CATOOP)\n     * @create 2017年3月11日\n     */\n    @Override\n    public KeyGenerator keyGenerator() {\n        return new SimpleKeyGenerator() {\n\n            /**\n             * 对参数进行拼接后MD5\n             */\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(".").append(method.getName());\n\n                StringBuilder paramsSb = new StringBuilder();\n                for (Object param : params) {\n                    // 如果不指定，默认生成包含到键值中\n                    if (param != null) {\n                        paramsSb.append(param.toString());\n                    }\n                }\n\n                if (paramsSb.length() > 0) {\n                    sb.append("_").append(paramsSb);\n                }\n                return sb.toString();\n            }\n\n        };\n\n    }\n\n    /**\n     * 管理缓存\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public CacheManager cacheManager(RedisTemplate<String, Object> redisTemplate, RedisKeys redisKeys) {\n        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n        // 设置缓存默认过期时间（全局的）\n        rcm.setDefaultExpiration(1800);// 30分钟\n\n        // 根据key设定具体的缓存时间，key统一放在常量类RedisKeys中\n        rcm.setExpires(redisKeys.getExpiresMap());\n\n        List<String> cacheNames = new ArrayList<String>(redisKeys.getExpiresMap().keySet());\n        rcm.setCacheNames(cacheNames);\n\n        return rcm;\n    }\n\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br")])]),s("h3",{attrs:{id:"二、创建需要缓存数据的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、创建需要缓存数据的类"}},[n._v("#")]),n._v(" 二、创建需要缓存数据的类")]),n._v(" "),s("p",[n._v("TestService.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package com.shanhy.example.service;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\nimport com.shanhy.example.redis.RedisKeys;\n\n@Service\npublic class TestService {\n\n    /**\n     * 固定key\n     *\n     * @return\n     * @author SHANHY\n     * @create  2017年4月9日\n     */\n    @Cacheable(value = RedisKeys._CACHE_TEST, key = "\'" + RedisKeys._CACHE_TEST + "\'")\n    public String testCache() {\n        return RandomStringUtils.randomNumeric(4);\n    }\n\n    /**\n     * 存储在Redis中的key自动生成，生成规则详见CachingConfig.keyGenerator()方法\n     *\n     * @param str1\n     * @param str2\n     * @return\n     * @author SHANHY\n     * @create  2017年4月9日\n     */\n    @Cacheable(value = RedisKeys._CACHE_TEST)\n    public String testCache2(String str1, String str2) {\n        return RandomStringUtils.randomNumeric(4);\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("p",[n._v("说明一下，其中 @Cacheable 中的 value 值是在 CachingConfig的cacheManager 中配置的，那里是为了配置我们的缓存有效时间。其中 methodKeyGenerator 为 CachingConfig 中声明的 KeyGenerator。\n另外，Cache 相关的注解还有几个，大家可以了解下，不过我们常用的就是 @Cacheable，一般情况也可以满足我们的大部分需求了。还有 @Cacheable 也可以配置表达式根据我们传递的参数值判断是否需要缓存。\n注： TestService 中 testCache 中的 mapper.get 大家不用关心，这里面我只是访问了一下数据库而已，你只需要在这里做自己的业务代码即可。")]),n._v(" "),s("h3",{attrs:{id:"三、测试方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、测试方法"}},[n._v("#")]),n._v(" 三、测试方法")]),n._v(" "),s("p",[n._v("下面代码，随便放一个 Controller 中")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package com.shanhy.example.controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.connection.jedis.RedisClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.shanhy.example.service.TestService;\n\n/**\n * 测试Controller\n * \n * @author 单红宇(365384722)\n * @myblog http://blog.csdn.net/catoop/\n * @create 2017年4月9日\n */\n@RestController\n@RequestMapping("/test")\npublic class TestController {\n\n    private static final Logger LOG = LoggerFactory.getLogger(TestController.class);\n\n    @Autowired\n    private RedisClient redisClient;\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping("/redisCache")\n    public String redisCache() {\n        redisClient.set("shanhy", "hello,shanhy", 100);\n        LOG.info("getRedisValue = {}", redisClient.get("shanhy"));\n        testService.testCache2("aaa", "bbb");\n        return testService.testCache();\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("p",[n._v("至此完毕！")]),n._v(" "),s("p",[n._v("最后说一下，这个 @Cacheable 基本是可以放在所有方法上的，Controller 的方法上也是可以的（这个我没有测试 ^_^）。")])])}),[],!1,null,null,null);e.default=r.exports}}]);