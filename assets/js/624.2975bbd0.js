(window.webpackJsonp=window.webpackJsonp||[]).push([[624],{1017:function(n,s,e){"use strict";e.r(s);var a=e(13),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F-io"}},[n._v("阻塞模式 IO")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E9%9D%9E%E9%98%BB%E5%A1%9E-io"}},[n._v("非阻塞 IO")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#nio2-%E5%BC%82%E6%AD%A5-io"}},[n._v("NIO.2 异步 IO")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#1%E3%80%81%E8%BF%94%E5%9B%9E-future-%E5%AE%9E%E4%BE%8B"}},[n._v("1、返回 Future 实例")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#2%E3%80%81%E6%8F%90%E4%BE%9B-completionhandler-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0"}},[n._v("2、提供 CompletionHandler 回调函数")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#asynchronousfilechannel"}},[n._v("AsynchronousFileChannel")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#asynchronousserversocketchannel"}},[n._v("AsynchronousServerSocketChannel")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#asynchronoussocketchannel"}},[n._v("AsynchronousSocketChannel")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#asynchronous-channel-groups"}},[n._v("Asynchronous Channel Groups")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B0%8F%E7%BB%93"}},[n._v("小结")])])]),n._v(" "),e("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),e("blockquote",[e("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),e("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),e("p",[n._v("文章将同步到我的个人博客：")]),n._v(" "),e("blockquote",[e("p",[n._v("www.how2playlife.com")])]),n._v(" "),e("p",[n._v("本文是微信公众号【Java技术江湖】的《不可轻视的Java网络编程》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),n._v(" "),e("p",[n._v("该系列博文会告诉你如何从计算机网络的基础知识入手，一步步地学习Java网络基础，从socket到nio、bio、aio和netty等网络编程知识，并且进行实战，网络编程是每一个Java后端工程师必须要学习和理解的知识点，进一步来说，你还需要掌握Linux中的网络编程原理，包括IO模型、网络编程框架netty的进阶原理，才能更完整地了解整个Java网络编程的知识体系，形成自己的知识框架。")]),n._v(" "),e("p",[n._v("为了更好地总结和检验你的学习成果，本系列文章也会提供部分知识点对应的面试题以及参考答案。")]),n._v(" "),e("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),n._v(" "),e("p",[n._v("上一篇文章介绍了 Java NIO 中 Buffer、Channel 和 Selector 的基本操作，主要是一些接口操作，比较简单。")]),n._v(" "),e("p",[n._v("本文将介绍"),e("strong",[n._v("非阻塞 IO")]),n._v(" 和"),e("strong",[n._v("异步 IO")]),n._v("，也就是大家耳熟能详的 NIO 和 AIO。很多初学者可能分不清楚异步和非阻塞的区别，只是在各种场合能听到"),e("strong",[n._v("异步非阻塞")]),n._v("这个词。")]),n._v(" "),e("p",[n._v("本文会先介绍并演示阻塞模式，然后引入非阻塞模式来对阻塞模式进行优化，最后再介绍 JDK7 引入的异步 IO，由于网上关于异步 IO 的介绍相对较少，所以这部分内容我会介绍得具体一些。")]),n._v(" "),e("p",[n._v("希望看完本文，读者可以对非阻塞 IO 和异步 IO 的迷雾看得更清晰些，或者为初学者解开一丝丝疑惑也是好的。")]),n._v(" "),e("h2",{attrs:{id:"阻塞模式-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阻塞模式-io"}},[n._v("#")]),n._v(" 阻塞模式 IO")]),n._v(" "),e("p",[n._v("我们已经介绍过使用 Java NIO 包组成一个简单的"),e("strong",[n._v("客户端-服务端")]),n._v("网络通讯所需要的 ServerSocketChannel、SocketChannel 和 Buffer，我们这里整合一下它们，给出一个完整的可运行的例子：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Server {\n\n    public static void main(String[] args) throws IOException {\n\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\n        // 监听 8080 端口进来的 TCP 链接\n        serverSocketChannel.socket().bind(new InetSocketAddress(8080));\n\n        while (true) {\n\n            // 这里会阻塞，直到有一个请求的连接进来\n            SocketChannel socketChannel = serverSocketChannel.accept();\n\n            // 开启一个新的线程来处理这个请求，然后在 while 循环中继续监听 8080 端口\n            SocketHandler handler = new SocketHandler(socketChannel);\n            new Thread(handler).start();\n        }\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br")])]),e("p",[n._v("这里看一下新的线程需要做什么，SocketHandler：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class SocketHandler implements Runnable {\n\n    private SocketChannel socketChannel;\n\n    public SocketHandler(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }\n\n    @Override\n    public void run() {\n\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        try {\n            // 将请求数据读入 Buffer 中\n            int num;\n            while ((num = socketChannel.read(buffer)) > 0) {\n                // 读取 Buffer 内容之前先 flip 一下\n                buffer.flip();\n\n                // 提取 Buffer 中的数据\n                byte[] bytes = new byte[num];\n                buffer.get(bytes);\n\n                String re = new String(bytes, "UTF-8");\n                System.out.println("收到请求：" + re);\n\n                // 回应客户端\n                ByteBuffer writeBuffer = ByteBuffer.wrap(("我已经收到你的请求，你的请求内容是：" + re).getBytes());\n                socketChannel.write(writeBuffer);\n\n                buffer.clear();\n            }\n        } catch (IOException e) {\n            IOUtils.closeQuietly(socketChannel);\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br")])]),e("p",[n._v("最后，贴一下客户端 SocketChannel 的使用，客户端比较简单：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class SocketChannelTest {\n    public static void main(String[] args) throws IOException {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.connect(new InetSocketAddress("localhost", 8080));\n\n        // 发送请求\n        ByteBuffer buffer = ByteBuffer.wrap("1234567890".getBytes());\n        socketChannel.write(buffer);\n\n        // 读取响应\n        ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n        int num;\n        if ((num = socketChannel.read(readBuffer)) > 0) {\n            readBuffer.flip();\n\n            byte[] re = new byte[num];\n            readBuffer.get(re);\n\n            String result = new String(re, "UTF-8");\n            System.out.println("返回值: " + result);\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])]),e("p",[n._v("上面介绍的阻塞模式的代码应该很好理解：来一个新的连接，我们就新开一个线程来处理这个连接，之后的操作全部由那个线程来完成。")]),n._v(" "),e("p",[n._v("那么，这个模式下的性能瓶颈在哪里呢？")]),n._v(" "),e("ol",[e("li",[n._v("首先，每次来一个连接都开一个新的线程这肯定是不合适的。当活跃连接数在几十几百的时候当然是可以这样做的，但如果活跃连接数是几万几十万的时候，这么多线程明显就不行了。每个线程都需要一部分内存，内存会被迅速消耗，同时，线程切换的开销非常大。")]),n._v(" "),e("li",[n._v("其次，阻塞操作在这里也是一个问题。首先，accept() 是一个阻塞操作，当 accept() 返回的时候，代表有一个连接可以使用了，我们这里是马上就新建线程来处理这个 SocketChannel 了，但是，但是这里不代表对方就将数据传输过来了。所以，SocketChannel#read 方法将阻塞，等待数据，明显这个等待是不值得的。同理，write 方法也需要等待通道可写才能执行写入操作，这边的阻塞等待也是不值得的。")])]),n._v(" "),e("h2",{attrs:{id:"非阻塞-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞-io"}},[n._v("#")]),n._v(" 非阻塞 IO")]),n._v(" "),e("p",[n._v("说完了阻塞模式的使用及其缺点以后，我们这里就可以介绍非阻塞 IO 了。")]),n._v(" "),e("p",[n._v("非阻塞 IO 的核心在于使用一个 Selector 来管理多个通道，可以是 SocketChannel，也可以是 ServerSocketChannel，将各个通道注册到 Selector 上，指定监听的事件。")]),n._v(" "),e("p",[n._v("之后可以只用一个线程来轮询这个 Selector，看看上面是否有通道是准备好的，当通道准备好可读或可写，然后才去开始真正的读写，这样速度就很快了。我们就完全没有必要给每个通道都起一个线程。")]),n._v(" "),e("p",[n._v("NIO 中 Selector 是对底层操作系统实现的一个抽象，管理通道状态其实都是底层系统实现的，这里简单介绍下在不同系统下的实现。")]),n._v(" "),e("p",[e("strong",[n._v("select")]),n._v("：上世纪 80 年代就实现了，它支持注册 FD_SETSIZE(1024) 个 socket，在那个年代肯定是够用的，不过现在嘛，肯定是不行了。")]),n._v(" "),e("p",[e("strong",[n._v("poll")]),n._v("：1997 年，出现了 poll 作为 select 的替代者，最大的区别就是，poll 不再限制 socket 数量。")]),n._v(" "),e("p",[n._v("select 和 poll 都有一个共同的问题，那就是"),e("strong",[n._v("它们都只会告诉你有几个通道准备好了，但是不会告诉你具体是哪几个通道")]),n._v("。所以，一旦知道有通道准备好以后，自己还是需要进行一次扫描，显然这个不太好，通道少的时候还行，一旦通道的数量是几十万个以上的时候，扫描一次的时间都很可观了，时间复杂度 O(n)。所以，后来才催生了以下实现。")]),n._v(" "),e("p",[e("strong",[n._v("epoll")]),n._v("：2002 年随 Linux 内核 2.5.44 发布，epoll 能直接返回具体的准备好的通道，时间复杂度 O(1)。")]),n._v(" "),e("p",[n._v("除了 Linux 中的 epoll，2000 年 FreeBSD 出现了 "),e("strong",[n._v("Kqueue")]),n._v("，还有就是，Solaris 中有 "),e("strong",[n._v("/dev/poll")]),n._v("。")]),n._v(" "),e("blockquote",[e("p",[n._v("前面说了那么多实现，但是没有出现 Windows，Windows 平台的非阻塞 IO 使用 select，我们也不必觉得 Windows 很落后，在 Windows 中 IOCP 提供的异步 IO 是比较强大的。")])]),n._v(" "),e("p",[n._v("我们回到 Selector，毕竟 JVM 就是这么一个屏蔽底层实现的平台，"),e("strong",[n._v("我们面向 Selector 编程就可以了")]),n._v("。")]),n._v(" "),e("p",[n._v("之前在介绍 Selector 的时候已经了解过了它的基本用法，这边来一个可运行的实例代码，大家不妨看看：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class SelectorServer {\n\n    public static void main(String[] args) throws IOException {\n        Selector selector = Selector.open();\n\n        ServerSocketChannel server = ServerSocketChannel.open();\n        server.socket().bind(new InetSocketAddress(8080));\n\n        // 将其注册到 Selector 中，监听 OP_ACCEPT 事件\n        server.configureBlocking(false);\n        server.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            int readyChannels = selector.select();\n            if (readyChannels == 0) {\n                continue;\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            // 遍历\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n\n                if (key.isAcceptable()) {\n                    // 有已经接受的新的到服务端的连接\n                    SocketChannel socketChannel = server.accept();\n\n                    // 有新的连接并不代表这个通道就有数据，\n                    // 这里将这个新的 SocketChannel 注册到 Selector，监听 OP_READ 事件，等待数据\n                    socketChannel.configureBlocking(false);\n                    socketChannel.register(selector, SelectionKey.OP_READ);\n                } else if (key.isReadable()) {\n                    // 有数据可读\n                    // 上面一个 if 分支中注册了监听 OP_READ 事件的 SocketChannel\n                    SocketChannel socketChannel = (SocketChannel) key.channel();\n                    ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n                    int num = socketChannel.read(readBuffer);\n                    if (num > 0) {\n                        // 处理进来的数据...\n                        System.out.println("收到数据：" + new String(readBuffer.array()).trim());\n                        ByteBuffer buffer = ByteBuffer.wrap("返回给客户端的数据...".getBytes());\n                        socketChannel.write(buffer);\n                    } else if (num == -1) {\n                        // -1 代表连接已经关闭\n                        socketChannel.close();\n                    }\n                }\n            }\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br")])]),e("p",[n._v("至于客户端，大家可以继续使用上一节介绍阻塞模式时的客户端进行测试。")]),n._v(" "),e("h2",{attrs:{id:"nio-2-异步-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio-2-异步-io"}},[n._v("#")]),n._v(" NIO.2 异步 IO")]),n._v(" "),e("p",[n._v("More New IO，或称 NIO.2，随 JDK 1.7 发布，包括了引入异步 IO 接口和 Paths 等文件访问接口。")]),n._v(" "),e("p",[n._v("异步这个词，我想对于绝大多数开发者来说都很熟悉，很多场景下我们都会使用异步。")]),n._v(" "),e("p",[n._v("通常，我们会有一个线程池用于执行异步任务，提交任务的线程将任务提交到线程池就可以立马返回，不必等到任务真正完成。如果想要知道任务的执行结果，通常是通过传递一个回调函数的方式，任务结束后去调用这个函数。")]),n._v(" "),e("p",[n._v("同样的原理，Java 中的异步 IO 也是一样的，都是由一个线程池来负责执行任务，然后使用回调或自己去查询结果。")]),n._v(" "),e("p",[n._v("大部分开发者都知道为什么要这么设计了，这里再啰嗦一下。异步 IO 主要是为了控制线程数量，减少过多的线程带来的内存消耗和 CPU 在线程调度上的开销。")]),n._v(" "),e("p",[e("strong",[n._v("在 Unix/Linux 等系统中，JDK 使用了并发包中的线程池来管理任务")]),n._v("，具体可以查看 AsynchronousChannelGroup 的源码。")]),n._v(" "),e("p",[n._v("在 Windows 操作系统中，提供了一个叫做 "),e("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365198.aspx",target:"_blank",rel:"noopener noreferrer"}},[n._v("I/O Completion Ports"),e("OutboundLink")],1),n._v(" 的方案，通常简称为 "),e("strong",[n._v("IOCP")]),n._v("，操作系统负责管理线程池，其性能非常优异，所以"),e("strong",[n._v("在 Windows 中 JDK 直接采用了 IOCP 的支持")]),n._v("，使用系统支持，把更多的操作信息暴露给操作系统，也使得操作系统能够对我们的 IO 进行一定程度的优化。")]),n._v(" "),e("blockquote",[e("p",[n._v("在 Linux 中其实也是有异步 IO 系统实现的，但是限制比较多，性能也一般，所以 JDK 采用了自建线程池的方式。")])]),n._v(" "),e("p",[n._v("本文还是以实用为主，想要了解更多信息请自行查找其他资料，下面对 Java 异步 IO 进行实践性的介绍。")]),n._v(" "),e("p",[n._v("总共有三个类需要我们关注，分别是 "),e("strong",[n._v("AsynchronousSocketChannel")]),n._v("，"),e("strong",[n._v("AsynchronousServerSocketChannel")]),n._v(" 和 "),e("strong",[n._v("AsynchronousFileChannel")]),n._v("，只不过是在之前介绍的 FileChannel、SocketChannel 和 ServerSocketChannel 的类名上加了个前缀 "),e("strong",[n._v("Asynchronous")]),n._v("。")]),n._v(" "),e("p",[n._v("Java 异步 IO 提供了两种使用方式，分别是返回 Future 实例和使用回调函数。")]),n._v(" "),e("h3",{attrs:{id:"_1、返回-future-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、返回-future-实例"}},[n._v("#")]),n._v(" 1、返回 Future 实例")]),n._v(" "),e("p",[n._v("返回 java.util.concurrent.Future 实例的方式我们应该很熟悉，JDK 线程池就是这么使用的。Future 接口的几个方法语义在这里也是通用的，这里先做简单介绍。")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("future.isDone();")]),n._v(" "),e("p",[n._v("判断操作是否已经完成，包括了"),e("strong",[n._v("正常完成、异常抛出、取消")])])]),n._v(" "),e("li",[e("p",[n._v("future.cancel(true);")]),n._v(" "),e("p",[n._v("取消操作，方式是中断。参数 true 说的是，即使这个任务正在执行，也会进行中断。")])]),n._v(" "),e("li",[e("p",[n._v("future.isCancelled();")]),n._v(" "),e("p",[n._v("是否被取消，只有在任务正常结束之前被取消，这个方法才会返回 true")])]),n._v(" "),e("li",[e("p",[n._v("future.get();")]),n._v(" "),e("p",[n._v("这是我们的老朋友，获取执行结果，阻塞。")])]),n._v(" "),e("li",[e("p",[n._v("future.get(10, TimeUnit.SECONDS);")]),n._v(" "),e("p",[n._v("如果上面的 get() 方法的阻塞你不满意，那就设置个超时时间。")])])]),n._v(" "),e("h3",{attrs:{id:"_2、提供-completionhandler-回调函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、提供-completionhandler-回调函数"}},[n._v("#")]),n._v(" 2、提供 CompletionHandler 回调函数")]),n._v(" "),e("p",[n._v("java.nio.channels.CompletionHandler 接口定义：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface CompletionHandler<V,A> {\n\n    void completed(V result, A attachment);\n\n    void failed(Throwable exc, A attachment);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("blockquote",[e("p",[n._v("注意，参数上有个 attachment，虽然不常用，我们可以在各个支持的方法中传递这个参数值")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("AsynchronousServerSocketChannel listener = AsynchronousServerSocketChannel.open().bind(null);\n\n// accept 方法的第一个参数可以传递 attachment\nlistener.accept(attachment, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n    public void completed(\n      AsynchronousSocketChannel client, Object attachment) {\n          // \n      }\n    public void failed(Throwable exc, Object attachment) {\n          // \n      }\n});\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("h3",{attrs:{id:"asynchronousfilechannel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronousfilechannel"}},[n._v("#")]),n._v(" AsynchronousFileChannel")]),n._v(" "),e("p",[n._v("网上关于 Non-Blocking IO 的介绍文章很多，但是 Asynchronous IO 的文章相对就少得多了，所以我这边会多介绍一些相关内容。")]),n._v(" "),e("p",[n._v("首先，我们就来关注异步的文件 IO，前面我们说了，文件 IO 在所有的操作系统中都不支持非阻塞模式，但是我们可以对文件 IO 采用异步的方式来提高性能。")]),n._v(" "),e("p",[n._v("下面，我会介绍 AsynchronousFileChannel 里面的一些重要的接口，都很简单，读者要是觉得无趣，直接滑到下一个标题就可以了。")]),n._v(" "),e("p",[n._v("实例化：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('AsynchronousFileChannel channel = AsynchronousFileChannel.open(Paths.get("/Users/hongjie/test.txt"));\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("一旦实例化完成，我们就可以着手准备将数据读入到 Buffer 中：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("ByteBuffer buffer = ByteBuffer.allocate(1024);\nFuture<Integer> result = channel.read(buffer, 0);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("blockquote",[e("p",[n._v("异步文件通道的读操作和写操作都需要提供一个文件的开始位置，文件开始位置为 0")])]),n._v(" "),e("p",[n._v("除了使用返回 Future 实例的方式，也可以采用回调函数进行操作，接口如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract <A> void read(ByteBuffer dst,\n                              long position,\n                              A attachment,\n                              CompletionHandler<Integer,? super A> handler);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("顺便也贴一下写操作的两个版本的接口：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract Future<Integer> write(ByteBuffer src, long position);\n\npublic abstract <A> void write(ByteBuffer src,\n                               long position,\n                               A attachment,\n                               CompletionHandler<Integer,? super A> handler);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("我们可以看到，AIO 的读写主要也还是与 Buffer 打交道，这个与 NIO 是一脉相承的。")]),n._v(" "),e("p",[n._v("另外，还提供了用于将内存中的数据刷入到磁盘的方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract void force(boolean metaData) throws IOException;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("blockquote",[e("p",[n._v("因为我们对文件的写操作，操作系统并不会直接针对文件操作，系统会缓存，然后周期性地刷入到磁盘。如果希望将数据及时写入到磁盘中，以免断电引发部分数据丢失，可以调用此方法。参数如果设置为 true，意味着同时也将文件属性信息更新到磁盘。")])]),n._v(" "),e("p",[n._v("还有，还提供了对文件的锁定功能，我们可以锁定文件的部分数据，这样可以进行排他性的操作。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract Future<FileLock> lock(long position, long size, boolean shared);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("blockquote",[e("p",[n._v("position 是要锁定内容的开始位置，size 指示了要锁定的区域大小，shared 指示需要的是共享锁还是排他锁")])]),n._v(" "),e("p",[n._v("当然，也可以使用回调函数的版本：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract <A> void lock(long position,\n                              long size,\n                              boolean shared,\n                              A attachment,\n                              CompletionHandler<FileLock,? super A> handler);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("文件锁定功能上还提供了 tryLock 方法，此方法会快速返回结果：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract FileLock tryLock(long position, long size, boolean shared)\n    throws IOException;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("blockquote",[e("p",[n._v("这个方法很简单，就是尝试去获取锁，如果该区域已被其他线程或其他应用锁住，那么立刻返回 null，否则返回 FileLock 对象。")])]),n._v(" "),e("p",[n._v("AsynchronousFileChannel 操作大体上也就以上介绍的这些接口，还是比较简单的，这里就少一些废话早点结束好了。")]),n._v(" "),e("h3",{attrs:{id:"asynchronousserversocketchannel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronousserversocketchannel"}},[n._v("#")]),n._v(" AsynchronousServerSocketChannel")]),n._v(" "),e("p",[n._v("这个类对应的是非阻塞 IO 的 ServerSocketChannel，大家可以类比下使用方式。")]),n._v(" "),e("p",[n._v("我们就废话少说，用代码说事吧：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.javadoop.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\n\npublic class Server {\n\n    public static void main(String[] args) throws IOException {\n\n          // 实例化，并监听端口\n        AsynchronousServerSocketChannel server =\n                AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(8080));\n\n        // 自己定义一个 Attachment 类，用于传递一些信息\n        Attachment att = new Attachment();\n        att.setServer(server);\n\n        server.accept(att, new CompletionHandler<AsynchronousSocketChannel, Attachment>() {\n            @Override\n            public void completed(AsynchronousSocketChannel client, Attachment att) {\n                try {\n                    SocketAddress clientAddr = client.getRemoteAddress();\n                    System.out.println("收到新的连接：" + clientAddr);\n\n                    // 收到新的连接后，server 应该重新调用 accept 方法等待新的连接进来\n                    att.getServer().accept(att, this);\n\n                    Attachment newAtt = new Attachment();\n                    newAtt.setServer(server);\n                    newAtt.setClient(client);\n                    newAtt.setReadMode(true);\n                    newAtt.setBuffer(ByteBuffer.allocate(2048));\n\n                    // 这里也可以继续使用匿名实现类，不过代码不好看，所以这里专门定义一个类\n                    client.read(newAtt.getBuffer(), newAtt, new ChannelHandler());\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                }\n            }\n\n            @Override\n            public void failed(Throwable t, Attachment att) {\n                System.out.println("accept failed");\n            }\n        });\n        // 为了防止 main 线程退出\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br")])]),e("p",[n._v("看一下 ChannelHandler 类：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.javadoop.aio;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.CompletionHandler;\nimport java.nio.charset.Charset;\n\npublic class ChannelHandler implements CompletionHandler<Integer, Attachment> {\n\n    @Override\n    public void completed(Integer result, Attachment att) {\n        if (att.isReadMode()) {\n            // 读取来自客户端的数据\n            ByteBuffer buffer = att.getBuffer();\n            buffer.flip();\n            byte bytes[] = new byte[buffer.limit()];\n            buffer.get(bytes);\n            String msg = new String(buffer.array()).toString().trim();\n            System.out.println("收到来自客户端的数据: " + msg);\n\n            // 响应客户端请求，返回数据\n            buffer.clear();\n            buffer.put("Response from server!".getBytes(Charset.forName("UTF-8")));\n            att.setReadMode(false);\n            buffer.flip();\n            // 写数据到客户端也是异步\n            att.getClient().write(buffer, att, this);\n        } else {\n            // 到这里，说明往客户端写数据也结束了，有以下两种选择:\n            // 1\\. 继续等待客户端发送新的数据过来\n//            att.setReadMode(true);\n//            att.getBuffer().clear();\n//            att.getClient().read(att.getBuffer(), att, this);\n            // 2\\. 既然服务端已经返回数据给客户端，断开这次的连接\n            try {\n                att.getClient().close();\n            } catch (IOException e) {\n            }\n        }\n    }\n\n    @Override\n    public void failed(Throwable t, Attachment att) {\n        System.out.println("连接断开");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br")])]),e("p",[n._v("顺便再贴一下自定义的 Attachment 类：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Attachment {\n    private AsynchronousServerSocketChannel server;\n    private AsynchronousSocketChannel client;\n    private boolean isReadMode;\n    private ByteBuffer buffer;\n    // getter & setter\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("这样，一个简单的服务端就写好了，接下来可以接收客户端请求了。上面我们用的都是回调函数的方式，读者要是感兴趣，可以试试写个使用 Future 的。")]),n._v(" "),e("h3",{attrs:{id:"asynchronoussocketchannel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronoussocketchannel"}},[n._v("#")]),n._v(" AsynchronousSocketChannel")]),n._v(" "),e("p",[n._v("其实，说完上面的 AsynchronousServerSocketChannel，基本上读者也就知道怎么使用 AsynchronousSocketChannel 了，和非阻塞 IO 基本类似。")]),n._v(" "),e("p",[n._v("这边做个简单演示，这样读者就可以配合之前介绍的 Server 进行测试使用了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.javadoop.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\n\npublic class Client {\n\n    public static void main(String[] args) throws Exception {\n        AsynchronousSocketChannel client = AsynchronousSocketChannel.open();\n          // 来个 Future 形式的\n        Future<?> future = client.connect(new InetSocketAddress(8080));\n        // 阻塞一下，等待连接成功\n        future.get();\n\n        Attachment att = new Attachment();\n        att.setClient(client);\n        att.setReadMode(false);\n        att.setBuffer(ByteBuffer.allocate(2048));\n        byte[] data = "I am obot!".getBytes();\n        att.getBuffer().put(data);\n        att.getBuffer().flip();\n\n        // 异步发送数据到服务端\n        client.write(att.getBuffer(), att, new ClientChannelHandler());\n\n        // 这里休息一下再退出，给出足够的时间处理数据\n        Thread.sleep(2000);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br")])]),e("p",[n._v("往里面看下 ClientChannelHandler 类：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.javadoop.aio;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.CompletionHandler;\nimport java.nio.charset.Charset;\n\npublic class ClientChannelHandler implements CompletionHandler<Integer, Attachment> {\n\n    @Override\n    public void completed(Integer result, Attachment att) {\n        ByteBuffer buffer = att.getBuffer();\n        if (att.isReadMode()) {\n            // 读取来自服务端的数据\n            buffer.flip();\n            byte[] bytes = new byte[buffer.limit()];\n            buffer.get(bytes);\n            String msg = new String(bytes, Charset.forName("UTF-8"));\n            System.out.println("收到来自服务端的响应数据: " + msg);\n\n            // 接下来，有以下两种选择:\n            // 1\\. 向服务端发送新的数据\n//            att.setReadMode(false);\n//            buffer.clear();\n//            String newMsg = "new message from client";\n//            byte[] data = newMsg.getBytes(Charset.forName("UTF-8"));\n//            buffer.put(data);\n//            buffer.flip();\n//            att.getClient().write(buffer, att, this);\n            // 2\\. 关闭连接\n            try {\n                att.getClient().close();\n            } catch (IOException e) {\n            }\n        } else {\n            // 写操作完成后，会进到这里\n            att.setReadMode(true);\n            buffer.clear();\n            att.getClient().read(buffer, att, this);\n        }\n    }\n\n    @Override\n    public void failed(Throwable t, Attachment att) {\n        System.out.println("服务器无响应");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br")])]),e("p",[n._v("以上代码都是可以运行调试的，如果读者碰到问题，请在评论区留言。")]),n._v(" "),e("h3",{attrs:{id:"asynchronous-channel-groups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-channel-groups"}},[n._v("#")]),n._v(" Asynchronous Channel Groups")]),n._v(" "),e("p",[n._v("为了知识的完整性，有必要对 group 进行介绍，其实也就是介绍 AsynchronousChannelGroup 这个类。之前我们说过，异步 IO 一定存在一个线程池，这个线程池负责接收任务、处理 IO 事件、回调等。这个线程池就在 group 内部，group 一旦关闭，那么相应的线程池就会关闭。")]),n._v(" "),e("p",[n._v("AsynchronousServerSocketChannels 和 AsynchronousSocketChannels 是属于 group 的，当我们调用 AsynchronousServerSocketChannel 或 AsynchronousSocketChannel 的 open() 方法的时候，相应的 channel 就属于默认的 group，这个 group 由 JVM 自动构造并管理。")]),n._v(" "),e("p",[n._v("如果我们想要配置这个默认的 group，可以在 JVM 启动参数中指定以下系统变量：")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("java.nio.channels.DefaultThreadPool.threadFactory")]),n._v(" "),e("p",[n._v("此系统变量用于设置 ThreadFactory，它应该是 java.util.concurrent.ThreadFactory 实现类的全限定类名。一旦我们指定了这个 ThreadFactory 以后，group 中的线程就会使用该类产生。")])]),n._v(" "),e("li",[e("p",[n._v("java.nio.channels.DefaultThreadPool.initialSize")]),n._v(" "),e("p",[n._v("此系统变量也很好理解，用于设置线程池的初始大小。")])])]),n._v(" "),e("p",[n._v("可能你会想要使用自己定义的 group，这样可以对其中的线程进行更多的控制，使用以下几个方法即可：")]),n._v(" "),e("ul",[e("li",[n._v("AsynchronousChannelGroup.withCachedThreadPool(ExecutorService executor, int initialSize)")]),n._v(" "),e("li",[n._v("AsynchronousChannelGroup.withFixedThreadPool(int nThreads, ThreadFactory threadFactory)")]),n._v(" "),e("li",[n._v("AsynchronousChannelGroup.withThreadPool(ExecutorService executor)")])]),n._v(" "),e("p",[n._v("熟悉线程池的读者对这些方法应该很好理解，它们都是 AsynchronousChannelGroup 中的静态方法。")]),n._v(" "),e("p",[n._v("至于 group 的使用就很简单了，代码一看就懂：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("AsynchronousChannelGroup group = AsynchronousChannelGroup\n        .withFixedThreadPool(10, Executors.defaultThreadFactory());\nAsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open(group);\nAsynchronousSocketChannel client = AsynchronousSocketChannel.open(group);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[e("strong",[n._v("AsynchronousFileChannels 不属于 group")]),n._v("。但是它们也是关联到一个线程池的，如果不指定，会使用系统默认的线程池，如果想要使用指定的线程池，可以在实例化的时候使用以下方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public static AsynchronousFileChannel open(Path file,\n                                           Set<? extends OpenOption> options,\n                                           ExecutorService executor,\n                                           FileAttribute<?>... attrs) {\n    ...\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("到这里，异步 IO 就算介绍完成了。")]),n._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),e("p",[n._v("我想，本文应该是说清楚了非阻塞 IO 和异步 IO 了，对于异步 IO，由于网上的资料比较少，所以不免篇幅多了些。")]),n._v(" "),e("p",[n._v("我们也要知道，看懂了这些，确实可以学到一些东西，多了解一些知识，但是我们还是很少在工作中将这些知识变成工程代码。一般而言，我们需要在网络应用中使用 NIO 或 AIO 来提升性能，但是，在工程上，绝不是了解了一些概念，知道了一些接口就可以的，需要处理的细节还非常多。")]),n._v(" "),e("p",[n._v("这也是为什么 Netty/Mina 如此盛行的原因，因为它们帮助封装好了很多细节，提供给我们用户友好的接口，后面有时间我也会对 Netty 进行介绍。")]),n._v(" "),e("p",[n._v("（全文完）")])])}),[],!1,null,null,null);s.default=t.exports}}]);