(window.webpackJsonp=window.webpackJsonp||[]).push([[618],{1011:function(n,s,e){"use strict";e.r(s);var t=e(13),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%89%8D%E8%A8%80"}},[n._v("前言")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87"}},[n._v("源码环境准备")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#endpoint"}},[n._v("endpoint")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#init-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90"}},[n._v("init 过程分析")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#start-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90"}},[n._v("start 过程分析")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#acceptor"}},[n._v("Acceptor")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#poller"}},[n._v("Poller")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#processkey"}},[n._v("processKey")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[n._v("总结")])])]),n._v(" "),e("p",[n._v("本文转载 https://www.javadoop.com")]),n._v(" "),e("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),e("blockquote",[e("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),e("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),e("p",[n._v("文章将同步到我的个人博客：")]),n._v(" "),e("blockquote",[e("p",[n._v("www.how2playlife.com")])]),n._v(" "),e("p",[n._v("本文是微信公众号【Java技术江湖】的《不可轻视的Java网络编程》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),n._v(" "),e("p",[n._v("该系列博文会告诉你如何从计算机网络的基础知识入手，一步步地学习Java网络基础，从socket到nio、bio、aio和netty等网络编程知识，并且进行实战，网络编程是每一个Java后端工程师必须要学习和理解的知识点，进一步来说，你还需要掌握Linux中的网络编程原理，包括IO模型、网络编程框架netty的进阶原理，才能更完整地了解整个Java网络编程的知识体系，形成自己的知识框架。")]),n._v(" "),e("p",[n._v("为了更好地总结和检验你的学习成果，本系列文章也会提供部分知识点对应的面试题以及参考答案。")]),n._v(" "),e("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("之前写了两篇关于 NIO 的文章，第一篇介绍了 NIO 的 Channel、Buffer、Selector 使用，第二篇介绍了非阻塞 IO 和异步 IO，并展示了简单的用例。")]),n._v(" "),e("p",[n._v("本文将介绍 Tomcat 中的 NIO 使用，使大家对 Java NIO 的生产使用有更加直观的认识。")]),n._v(" "),e("p",[n._v("虽然本文的源码篇幅也不短，但是 Tomcat 的源码毕竟不像 Doug Lea 的并发源码那么“变态”，对于大部分读者来说，阅读难度比之前介绍的其他并发源码要简单一些，所以读者不要觉得有什么压力。")]),n._v(" "),e("p",[n._v("本文基于 Tomcat 当前（2018-03-20）"),e("strong",[n._v("最新版本 9.0.6")]),n._v("。")]),n._v(" "),e("p",[n._v("先简单画一张图示意一下本文的主要内容：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.javadoop.com/blogimages/tomcat-nio/0.png",alt:"0"}})]),n._v(" "),e("p",[e("strong",[n._v("目录")])]),n._v(" "),e("h2",{attrs:{id:"源码环境准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码环境准备"}},[n._v("#")]),n._v(" 源码环境准备")]),n._v(" "),e("p",[n._v("Tomcat 9.0.6 下载地址："),e("a",{attrs:{href:"https://tomcat.apache.org/download-90.cgi",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://tomcat.apache.org/download-90.cgi"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("由于上面下载的 tomcat 的源码并没有使用 maven 进行组织，不方便我们看源码，也不方便我们进行调试。这里我们将使用 maven 仓库中的 tomcat-embed-core，自己编写代码进行启动的方式来进行调试。")]),n._v(" "),e("p",[n._v("首先，创建一个空的 maven 工程，然后添加以下依赖。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<dependency>\n    <groupId>org.apache.tomcat.embed</groupId>\n    tomcat-embed-core\n    <version>9.0.6</version>\n</dependency>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("blockquote",[e("p",[n._v("上面的依赖，只会将 tomcat-embed-core-9.0.6.jar 和 tomcat-annotations-api-9.0.6.jar 两个包引进来，对于本文来说，已经足够了，如果你需要其他功能，需要额外引用其他的依赖，如 Jasper。")])]),n._v(" "),e("p",[n._v("然后，使用以下启动方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static void main(String[] args) throws LifecycleException {\n\n   Tomcat tomcat = new Tomcat();\n\n   Connector connector = new Connector("HTTP/1.1");\n   connector.setPort(8080);\n   tomcat.setConnector(connector);\n\n   tomcat.start();\n   tomcat.getServer().await();\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("经过以上的代码，我们的 Tomcat 就启动起来了。")]),n._v(" "),e("blockquote",[e("p",[n._v("Tomcat 中的其他接口感兴趣的读者请自行探索，如设置 webapp 目录，设置 resources 等")])]),n._v(" "),e("p",[n._v("这里，介绍第一个重要的概念："),e("strong",[n._v("Connector")]),n._v("。在 Tomcat 中，使用 Connector 来处理连接，一个 Tomcat 可以配置多个 Connector，分别用于监听不同端口，或处理不同协议。")]),n._v(" "),e("p",[n._v("在 Connector 的构造方法中，我们可以传 "),e("code",[n._v("HTTP/1.1")]),n._v(" 或 "),e("code",[n._v("AJP/1.3")]),n._v(" 用于指定协议，也可以传入相应的协议处理类，毕竟协议不是重点，将不同端口进来的连接对应不同处理类才是正道。典型地，我们可以指定以下几个协议处理类：")]),n._v(" "),e("ul",[e("li",[n._v("org.apache.coyote.http11.Http11NioProtocol：对应非阻塞 IO")]),n._v(" "),e("li",[n._v("org.apache.coyote.http11.Http11Nio2Protocol：对应异步 IO")]),n._v(" "),e("li",[n._v("org.apache.coyote.http2.Http2Protocol：对应 http2 协议，对 http2 感兴趣的读者，赶紧看起来吧。")])]),n._v(" "),e("p",[n._v("本文的重点当然是非阻塞 IO 了，之前已经介绍过"),e("code",[n._v("异步 IO")]),n._v("的基础知识了，读者看完本文后，如果对异步 IO 的处理流程感兴趣，可以自行去分析一遍。")]),n._v(" "),e("blockquote",[e("p",[n._v("如果你使用 9.0 以前的版本，Tomcat 在启动的时候是会自动配置一个 connector 的，我们可以不用显示配置。")]),n._v(" "),e("p",[n._v("9.0 版本的 Tomcat#start() 方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void start() throws LifecycleException {\n    getServer();\n    server.start();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("8.5 及之前版本的 Tomcat#start() 方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void start() throws LifecycleException {\n    getServer();\n    // 自动配置一个使用非阻塞 IO 的 connector\n    getConnector();\n    server.start();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])])]),n._v(" "),e("h2",{attrs:{id:"endpoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#endpoint"}},[n._v("#")]),n._v(" endpoint")]),n._v(" "),e("p",[n._v("前面我们说过一个 Connector 对应一个协议，当然这描述也不太对，NIO 和 NIO2 就都是处理 HTTP/1.1 的，只不过一个使用非阻塞，一个使用异步。进到指定 protocol 代码，我们就会发现，它们的代码及其简单，只不过是指定了特定的 "),e("strong",[n._v("endpoint")]),n._v("。")]),n._v(" "),e("p",[n._v("打开 "),e("code",[n._v("Http11NioProtocol")]),n._v(" 和 "),e("code",[n._v("Http11Nio2Protocol")]),n._v("源码，我们可以看到，在构造方法中，它们分别指定了 NioEndpoint 和 Nio2Endpoint。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 非阻塞模式\npublic class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {\n    public Http11NioProtocol() {\n        // NioEndpoint\n        super(new NioEndpoint());\n    }\n    ...\n}\n// 异步模式\npublic class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel> {\n\n    public Http11Nio2Protocol() {\n        // Nio2Endpoint\n        super(new Nio2Endpoint());\n    }\n    ...\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("这里介绍第二个重要的概念："),e("strong",[n._v("endpoint")]),n._v("。Tomcat 使用不同的 endpoint 来处理不同的协议请求，今天我们的重点是 "),e("strong",[n._v("NioEndpoint")]),n._v("，其使用"),e("strong",[n._v("非阻塞 IO")]),n._v(" 来进行处理 HTTP/1.1 协议的请求。")]),n._v(" "),e("p",[e("strong",[n._v("NioEndpoint")]),n._v(" 继承 => "),e("strong",[n._v("AbstractJsseEndpoint")]),n._v(" 继承 => "),e("strong",[n._v("AbstractEndpoint")]),n._v("。中间的 AbstractJsseEndpoint 主要是提供了一些关于 "),e("code",[n._v("HTTPS")]),n._v(" 的方法，这块我们暂时忽略它，后面所有关于 HTTPS 的我们都直接忽略，感兴趣的读者请自行分析。")]),n._v(" "),e("h2",{attrs:{id:"init-过程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#init-过程分析"}},[n._v("#")]),n._v(" init 过程分析")]),n._v(" "),e("p",[n._v("下面，我们看看从 tomcat.start() 一直到 NioEndpoint 的过程。")]),n._v(" "),e("p",[e("strong",[n._v("1. AbstractProtocol")]),n._v(" # "),e("strong",[n._v("init")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Override\npublic void init() throws Exception {\n    ...\n    String endpointName = getName();\n    endpoint.setName(endpointName.substring(1, endpointName.length()-1));\n    endpoint.setDomain(domain);\n    // endpoint 的 name=http-nio-8089,domain=Tomcat\n    endpoint.init();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[e("strong",[n._v("2. AbstractEndpoint")]),n._v(" # "),e("strong",[n._v("init")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public final void init() throws Exception {\n    if (bindOnInit) {\n        bind(); // 这里对应的当然是子类 NioEndpoint 的 bind() 方法\n        bindState = BindState.BOUND_ON_INIT;\n    }\n    ...\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[e("strong",[n._v("3. NioEndpoint")]),n._v(" # "),e("strong",[n._v("bind")])]),n._v(" "),e("p",[n._v("这里就到我们的 NioEndpoint 了，要使用到我们之前学习的 NIO 的知识了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Override\npublic void bind() throws Exception {\n    // initServerSocket(); 原代码是这行，我们 “内联” 过来一起说\n\n    // 开启 ServerSocketChannel\n    serverSock = ServerSocketChannel.open();\n    socketProperties.setProperties(serverSock.socket());\n\n    // getPort() 会返回我们最开始设置的 8080，得到我们的 address 是 0.0.0.0:8080\n    InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));\n\n    // ServerSocketChannel 绑定地址、端口，\n    // 第二个参数 backlog 默认为 100，超过 100 的时候，新连接会被拒绝(不过源码注释也说了，这个值的真实语义取决于具体实现)\n    serverSock.socket().bind(addr,getAcceptCount());\n\n    // ※※※ 设置 ServerSocketChannel 为阻塞模式 ※※※\n    serverSock.configureBlocking(true);\n\n    // 设置 acceptor 和 poller 的数量，至于它们是什么角色，待会说\n    // acceptorThreadCount 默认为 1\n    if (acceptorThreadCount == 0) {\n        // FIXME: Doesn't seem to work that well with multiple accept threads\n        // 作者想表达的意思应该是：使用多个 acceptor 线程并不见得性能会更好\n        acceptorThreadCount = 1;\n    }\n\n    // poller 线程数，默认值定义如下，所以在多核模式下，默认为 2\n    // pollerThreadCount = Math.min(2,Runtime.getRuntime().availableProcessors());\n    if (pollerThreadCount <= 0) {\n        pollerThreadCount = 1;\n    }\n\n    // \n    setStopLatch(new CountDownLatch(pollerThreadCount));\n\n    // 初始化 ssl，我们忽略 ssl\n    initialiseSsl();\n\n    // 打开 NioSelectorPool，先忽略它\n    selectorPool.open();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br")])]),e("ol",[e("li",[n._v("ServerSocketChannel 已经打开，并且绑定要了之前指定的 8080 端口，设置成了"),e("strong",[n._v("阻塞模式")]),n._v("。")]),n._v(" "),e("li",[n._v("设置了 acceptor 的线程数为 1")]),n._v(" "),e("li",[n._v("设置了 poller 的线程数，单核 CPU 为 1，多核为 2")]),n._v(" "),e("li",[n._v("打开了一个 SelectorPool，我们先忽略这个")])]),n._v(" "),e("p",[n._v("到这里，我们还不知道 Acceptor 和 Poller 是什么东西，我们只是设置了它们的数量，我们先来看看最后面提到的 SelectorPool。")]),n._v(" "),e("h2",{attrs:{id:"start-过程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-过程分析"}},[n._v("#")]),n._v(" start 过程分析")]),n._v(" "),e("p",[n._v("刚刚我们分析完了 init() 过程，下面是启动过程 start() 分析。")]),n._v(" "),e("p",[n._v("AbstractProtocol # start")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\npublic void start() throws Exception {\n    ...\n    // 调用 endpoint 的 start 方法\n    endpoint.start();\n\n    // Start async timeout thread\n    asyncTimeout = new AsyncTimeout();\n    Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + "-AsyncTimeout");\n    int priority = endpoint.getThreadPriority();\n    if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {\n        priority = Thread.NORM_PRIORITY;\n    }\n    timeoutThread.setPriority(priority);\n    timeoutThread.setDaemon(true);\n    timeoutThread.start();\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("AbstractEndpoint # start")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public final void start() throws Exception {\n    // 按照我们的流程，刚刚 init 的时候，已经把 bindState 改为 BindState.BOUND_ON_INIT 了，\n    // 所以下面的 if 分支我们就不进去了\n    if (bindState == BindState.UNBOUND) {\n        bind();\n        bindState = BindState.BOUND_ON_START;\n    }\n    // 往里看 NioEndpoint 的实现\n    startInternal();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("下面这个方法还是比较重要的，这里会创建前面说过的 acceptor 和 poller。")]),n._v(" "),e("p",[n._v("NioEndpoint # startInternal")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\npublic void startInternal() throws Exception {\n\n    if (!running) {\n        running = true;\n        paused = false;\n\n        // 以下几个是缓存用的，之后我们也会看到很多这样的代码，为了减少 new 很多对象出来\n        processorCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                socketProperties.getProcessorCache());\n        eventCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                        socketProperties.getEventCache());\n        nioChannels = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                socketProperties.getBufferPool());\n\n        // 创建【工作线程池】，Tomcat 自己包装了一下 ThreadPoolExecutor，\n        // 1\\. 为了在创建线程池以后，先启动 corePoolSize 个线程(这个属于线程池的知识了，不熟悉的读者可以看看我之前的文章)\n        // 2\\. 自己管理线程池的增长方式（默认 corePoolSize 10, maxPoolSize 200），不是本文重点，不分析\n        if ( getExecutor() == null ) {\n            createExecutor();\n        }\n\n        // 设置一个栅栏（tomcat 自定义了类 LimitLatch），控制最大的连接数，默认是 10000\n        initializeConnectionLatch();\n\n        // 开启 poller 线程\n        // 还记得之前 init 的时候，默认地设置了 poller 的数量为 2，所以这里启动 2 个 poller 线程\n        pollers = new Poller[getPollerThreadCount()];\n        for (int i=0; i<pollers.length; i++) {\n            pollers[i] = new Poller();\n            Thread pollerThread = new Thread(pollers[i], getName() + "-ClientPoller-"+i);\n            pollerThread.setPriority(threadPriority);\n            pollerThread.setDaemon(true);\n            pollerThread.start();\n        }\n\n        // 开启 acceptor 线程，和开启 poller 线程组差不多。\n        // init 的时候，默认地，acceptor 的线程数是 1\n        startAcceptorThreads();\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br")])]),e("p",[n._v("到这里，我们启动了"),e("strong",[n._v("工作线程池")]),n._v("、 "),e("strong",[n._v("poller 线程组")]),n._v("、"),e("strong",[n._v("acceptor 线程组")]),n._v("。同时，工作线程池初始就已经启动了 10 个线程。我们用 "),e("strong",[n._v("jconsole")]),n._v(" 来看看此时的线程，请看下图：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.javadoop.com/blogimages/tomcat-nio/1.png",alt:"1"}})]),n._v(" "),e("p",[n._v("从 jconsole 中，我们可以看到，此时启动了 BlockPoller、worker、poller、acceptor、AsyncTimeout，大家应该都已经清楚了每个线程是哪里启动的吧。")]),n._v(" "),e("blockquote",[e("p",[n._v("Tomcat 中并没有 Worker 这个类，此名字是我瞎编。")])]),n._v(" "),e("p",[n._v("此时，我们还是不知道 acceptor、poller 甚至 worker 到底是干嘛的，下面，我们从 acceptor 线程开始看起。")]),n._v(" "),e("h2",{attrs:{id:"acceptor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#acceptor"}},[n._v("#")]),n._v(" Acceptor")]),n._v(" "),e("p",[n._v("它的结构非常简单，在构造函数中，已经把 endpoint 传进来了，此外就只有 threadName 和 state 两个简单的属性。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private final AbstractEndpoint<?,U> endpoint;\nprivate String threadName;\nprotected volatile AcceptorState state = AcceptorState.NEW;\n\npublic Acceptor(AbstractEndpoint<?,U> endpoint) {\n    this.endpoint = endpoint;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[e("strong",[n._v("threadName")]),n._v(" 就是一个线程名字而已，Acceptor 的状态 "),e("strong",[n._v("state")]),n._v(" 主要是随着 endpoint 来的。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public enum AcceptorState {\n    NEW, RUNNING, PAUSED, ENDED\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("我们直接来看 acceptor 的 run 方法吧：")]),n._v(" "),e("p",[n._v("Acceptor # run")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Override\npublic void run() {\n\n    int errorDelay = 0;\n\n    // 只要 endpoint 处于 running，这里就一直循环\n    while (endpoint.isRunning()) {\n\n        // 如果 endpoint 处于 pause 状态，这边 Acceptor 用一个 while 循环将自己也挂起\n        while (endpoint.isPaused() && endpoint.isRunning()) {\n            state = AcceptorState.PAUSED;\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                // Ignore\n            }\n        }\n        // endpoint 结束了，Acceptor 自然也要结束嘛\n        if (!endpoint.isRunning()) {\n            break;\n        }\n        state = AcceptorState.RUNNING;\n\n        try {\n            // 如果此时达到了最大连接数(之前我们说过，默认是10000)，就等待\n            endpoint.countUpOrAwaitConnection();\n\n            // Endpoint might have been paused while waiting for latch\n            // If that is the case, don't accept new connections\n            if (endpoint.isPaused()) {\n                continue;\n            }\n\n            U socket = null;\n            try {\n                // 这里就是接收下一个进来的 SocketChannel\n                // 之前我们设置了 ServerSocketChannel 为阻塞模式，所以这边的 accept 是阻塞的\n                socket = endpoint.serverSocketAccept();\n            } catch (Exception ioe) {\n                // We didn't get a socket\n                endpoint.countDownConnection();\n                if (endpoint.isRunning()) {\n                    // Introduce delay if necessary\n                    errorDelay = handleExceptionWithDelay(errorDelay);\n                    // re-throw\n                    throw ioe;\n                } else {\n                    break;\n                }\n            }\n            // accept 成功，将 errorDelay 设置为 0\n            errorDelay = 0;\n\n            if (endpoint.isRunning() && !endpoint.isPaused()) {\n                // setSocketOptions() 是这里的关键方法，也就是说前面千辛万苦都是为了能到这里进行处理\n                if (!endpoint.setSocketOptions(socket)) {\n                    // 如果上面的方法返回 false，关闭 SocketChannel\n                    endpoint.closeSocket(socket);\n                }\n            } else {\n                // 由于 endpoint 不 running 了，或者处于 pause 了，将此 SocketChannel 关闭\n                endpoint.destroySocket(socket);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            String msg = sm.getString(\"endpoint.accept.fail\");\n            // APR specific.\n            // Could push this down but not sure it is worth the trouble.\n            if (t instanceof Error) {\n                Error e = (Error) t;\n                if (e.getError() == 233) {\n                    // Not an error on HP-UX so log as a warning\n                    // so it can be filtered out on that platform\n                    // See bug 50273\n                    log.warn(msg, t);\n                } else {\n                    log.error(msg, t);\n                }\n            } else {\n                    log.error(msg, t);\n            }\n        }\n    }\n    state = AcceptorState.ENDED;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br")])]),e("p",[n._v("大家应该发现了，Acceptor 绕来绕去，都是在调用 NioEndpoint 的方法，我们简单分析一下这个。")]),n._v(" "),e("p",[n._v("在 NioEndpoint init 的时候，我们开启了一个 ServerSocketChannel，后来 start 的时候，我们开启多个 acceptor（实际上，默认是 1 个），每个 acceptor 启动以后就开始循环调用 ServerSocketChannel 的 accept() 方法获取新的连接，然后调用 endpoint.setSocketOptions(socket) 处理新的连接，之后再进入循环 accept 下一个连接。")]),n._v(" "),e("p",[n._v("到这里，大家应该也就知道了，为什么这个叫 acceptor 了吧？接下来，我们来看看 setSocketOptions 方法到底做了什么。")]),n._v(" "),e("p",[n._v("NioEndpoint # setSocketOptions")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\nprotected boolean setSocketOptions(SocketChannel socket) {\n    try {\n        // 设置该 SocketChannel 为非阻塞模式\n        socket.configureBlocking(false);\n        Socket sock = socket.socket();\n        // 设置 socket 的一些属性\n        socketProperties.setProperties(sock);\n\n        // 还记得 startInternal 的时候，说过了 nioChannels 是缓存用的。\n        // 限于篇幅，这里的 NioChannel 就不展开了，它包括了 socket 和 buffer\n        NioChannel channel = nioChannels.pop();\n        if (channel == null) {\n            // 主要是创建读和写的两个 buffer，默认地，读和写 buffer 都是 8192 字节，8k\n            SocketBufferHandler bufhandler = new SocketBufferHandler(\n                    socketProperties.getAppReadBufSize(),\n                    socketProperties.getAppWriteBufSize(),\n                    socketProperties.getDirectBuffer());\n            if (isSSLEnabled()) {\n                channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n            } else {\n                channel = new NioChannel(socket, bufhandler);\n            }\n        } else {\n            channel.setIOChannel(socket);\n            channel.reset();\n        }\n\n        // getPoller0() 会选取所有 poller 中的一个 poller\n        getPoller0().register(channel);\n    } catch (Throwable t) {\n        ExceptionUtils.handleThrowable(t);\n        try {\n            log.error("",t);\n        } catch (Throwable tt) {\n            ExceptionUtils.handleThrowable(tt);\n        }\n        // Tell to close the socket\n        return false;\n    }\n    return true;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br")])]),e("p",[n._v("我们看到，这里又没有进行实际的处理，而是将这个 SocketChannel "),e("strong",[n._v("注册")]),n._v("到了其中一个 poller 上。因为我们知道，acceptor 应该尽可能的简单，只做 accept 的工作，简单处理下就往后面扔。acceptor 还得回到之前的循环去 accept 新的连接呢。")]),n._v(" "),e("p",[n._v("我们只需要明白，此时，往 poller 中注册了一个 NioChannel 实例，此实例包含客户端过来的 SocketChannel 和一个 SocketBufferHandler 实例。")]),n._v(" "),e("h2",{attrs:{id:"poller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poller"}},[n._v("#")]),n._v(" Poller")]),n._v(" "),e("p",[n._v("之前我们看到 acceptor 将一个 NioChannel 实例 register 到了一个 poller 中。在看 register 方法之前，我们需要先对 poller 要有个简单的认识。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Poller implements Runnable {\n\n    public Poller() throws IOException {\n        // 每个 poller 开启一个 Selector\n        this.selector = Selector.open();\n    }\n    private Selector selector;\n    // events 队列，此类的核心\n    private final SynchronizedQueue<PollerEvent> events =\n            new SynchronizedQueue<>();\n\n    private volatile boolean close = false;\n    private long nextExpiration = 0;//optimize expiration handling\n\n    // 这个值后面有用，记住它的初始值为 0\n    private AtomicLong wakeupCounter = new AtomicLong(0);\n\n    private volatile int keyCount = 0;\n\n    ...\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("blockquote",[e("p",[n._v("敲重点：每个 poller 关联了一个 Selector。")])]),n._v(" "),e("p",[n._v("Poller 内部围着一个 events 队列转，来看看其 events() 方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public boolean events() {\n    boolean result = false;\n\n    PollerEvent pe = null;\n    for (int i = 0, size = events.size(); i < size && (pe = events.poll()) != null; i++ ) {\n        result = true;\n        try {\n            // 逐个执行 event.run()\n            pe.run();\n            // 该 PollerEvent 还得给以后用，这里 reset 一下(还是之前说过的缓存)\n            pe.reset();\n            if (running && !paused) {\n                eventCache.push(pe);\n            }\n        } catch ( Throwable x ) {\n            log.error("",x);\n        }\n    }\n    return result;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br")])]),e("p",[n._v("events() 方法比较简单，就是取出当前队列中的 PollerEvent 对象，逐个执行 event.run() 方法。")]),n._v(" "),e("p",[n._v("然后，现在来看 Poller 的 run() 方法，该方法会一直循环，直到 poller.destroy() 被调用。")]),n._v(" "),e("p",[n._v("Poller # run")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public void run() {\n    while (true) {\n\n        boolean hasEvents = false;\n\n        try {\n            if (!close) {\n                // 执行 events 队列中每个 event 的 run() 方法\n                hasEvents = events();\n                // wakeupCounter 的初始值为 0，这里设置为 -1\n                if (wakeupCounter.getAndSet(-1) > 0) {\n                    //if we are here, means we have other stuff to do\n                    //do a non blocking select\n                    keyCount = selector.selectNow();\n                } else {\n                    // timeout 默认值 1 秒\n                    keyCount = selector.select(selectorTimeout);\n                }\n                wakeupCounter.set(0);\n            }\n            // 篇幅所限，我们就不说 close 的情况了\n            if (close) {\n                events();\n                timeout(0, false);\n                try {\n                    selector.close();\n                } catch (IOException ioe) {\n                    log.error(sm.getString("endpoint.nio.selectorCloseFail"), ioe);\n                }\n                break;\n            }\n        } catch (Throwable x) {\n            ExceptionUtils.handleThrowable(x);\n            log.error("",x);\n            continue;\n        }\n        //either we timed out or we woke up, process events first\n        // 这里没什么好说的，顶多就再执行一次 events() 方法\n        if ( keyCount == 0 ) hasEvents = (hasEvents | events());\n\n        // 如果刚刚 select 有返回 ready keys，进行处理\n        Iterator<SelectionKey> iterator =\n            keyCount > 0 ? selector.selectedKeys().iterator() : null;\n        // Walk through the collection of ready keys and dispatch\n        // any active event.\n        while (iterator != null && iterator.hasNext()) {\n            SelectionKey sk = iterator.next();\n            NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();\n            // Attachment may be null if another thread has called\n            // cancelledKey()\n            if (attachment == null) {\n                iterator.remove();\n            } else {\n                iterator.remove();\n                // ※※※※※ 处理 ready key ※※※※※\n                processKey(sk, attachment);\n            }\n        }//while\n\n        //process timeouts\n        timeout(keyCount,hasEvents);\n    }//while\n\n    getStopLatch().countDown();\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br")])]),e("p",[n._v("poller 的 run() 方法主要做了调用 events() 方法和处理注册到 Selector 上的 ready key，这里我们暂时不展开 processKey 方法，因为此方法必定是及其复杂的。")]),n._v(" "),e("p",[n._v("我们回过头来看之前从 acceptor 线程中调用的 register 方法。")]),n._v(" "),e("p",[n._v("Poller # register")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void register(final NioChannel socket) {\n    socket.setPoller(this);\n    NioSocketWrapper ka = new NioSocketWrapper(socket, NioEndpoint.this);\n    socket.setSocketWrapper(ka);\n    ka.setPoller(this);\n    ka.setReadTimeout(getConnectionTimeout());\n    ka.setWriteTimeout(getConnectionTimeout());\n    ka.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n    ka.setSecure(isSSLEnabled());\n\n    PollerEvent r = eventCache.pop();\n    ka.interestOps(SelectionKey.OP_READ);//this is what OP_REGISTER turns into.\n\n    // 注意第三个参数值 OP_REGISTER\n    if ( r==null) r = new PollerEvent(socket,ka,OP_REGISTER);\n    else r.reset(socket,ka,OP_REGISTER);\n\n    // 添加 event 到 poller 中\n    addEvent(r);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br")])]),e("p",[n._v("这里将这个 socket（包含 socket 和 buffer 的 NioChannel 实例） 包装为一个 PollerEvent，然后添加到 events 中，此时调用此方法的 acceptor 结束返回，去处理新的 accepted 连接了。")]),n._v(" "),e("p",[n._v("接下来，我们已经知道了，poller 线程在循环过程中会不断调用 events() 方法，那么 PollerEvent 的 run() 方法很快就会被执行，我们就来看看刚刚这个新的连接被"),e("strong",[n._v("注册")]),n._v("到这个 poller 后，会发生什么。")]),n._v(" "),e("p",[n._v("PollerEvent # run")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\npublic void run() {\n    // 对于新来的连接，前面我们说过，interestOps == OP_REGISTER\n    if (interestOps == OP_REGISTER) {\n        try {\n            // 这步很关键！！！\n            // 将这个新连接 SocketChannel 注册到该 poller 的 Selector 中，\n            // 设置监听 OP_READ 事件，\n            // 将 socketWrapper 设置为 attachment 进行传递(这个对象可是什么鬼都有，往上看就知道了)\n            socket.getIOChannel().register(\n                    socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);\n        } catch (Exception x) {\n            log.error(sm.getString("endpoint.nio.registerFail"), x);\n        }\n    } else {\n        /* else 这块不介绍，省得大家头大 */\n\n        final SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());\n        try {\n            if (key == null) {\n                // The key was cancelled (e.g. due to socket closure)\n                // and removed from the selector while it was being\n                // processed. Count down the connections at this point\n                // since it won\'t have been counted down when the socket\n                // closed.\n                socket.socketWrapper.getEndpoint().countDownConnection();\n            } else {\n                final NioSocketWrapper socketWrapper = (NioSocketWrapper) key.attachment();\n                if (socketWrapper != null) {\n                    //we are registering the key to start with, reset the fairness counter.\n                    int ops = key.interestOps() | interestOps;\n                    socketWrapper.interestOps(ops);\n                    key.interestOps(ops);\n                } else {\n                    socket.getPoller().cancelledKey(key);\n                }\n            }\n        } catch (CancelledKeyException ckx) {\n            try {\n                socket.getPoller().cancelledKey(key);\n            } catch (Exception ignore) {}\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br")])]),e("p",[n._v("到这里，我们再回顾一下：刚刚在 PollerEvent 的 run() 方法中，我们看到，新的 SocketChannel 注册到了 Poller 内部的 Selector 中，监听 OP_READ 事件，然后我们再回到 Poller 的 run() 看下，一旦该 SocketChannel 是 readable 的状态，那么就会进入到 poller 的 processKey 方法。")]),n._v(" "),e("h2",{attrs:{id:"processkey"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processkey"}},[n._v("#")]),n._v(" processKey")]),n._v(" "),e("p",[n._v("Poller # processKey")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('protected void processKey(SelectionKey sk, NioSocketWrapper attachment) {\n    try {\n        if ( close ) {\n            cancelledKey(sk);\n        } else if ( sk.isValid() && attachment != null ) {\n            if (sk.isReadable() || sk.isWritable() ) {\n                // 忽略 sendfile\n                if ( attachment.getSendfileData() != null ) {\n                    processSendfile(sk,attachment, false);\n                } else {\n                    // unregister 相应的 interest set，\n                    // 如接下来是处理 SocketChannel 进来的数据，那么就不再监听该 channel 的 OP_READ 事件\n                    unreg(sk, attachment, sk.readyOps());\n                    boolean closeSocket = false;\n                    // Read goes before write\n                    if (sk.isReadable()) {\n                        // 处理读\n                        if (!processSocket(attachment, SocketEvent.OPEN_READ, true)) {\n                            closeSocket = true;\n                        }\n                    }\n                    if (!closeSocket && sk.isWritable()) {\n                        // 处理写\n                        if (!processSocket(attachment, SocketEvent.OPEN_WRITE, true)) {\n                            closeSocket = true;\n                        }\n                    }\n                    if (closeSocket) {\n                        cancelledKey(sk);\n                    }\n                }\n            }\n        } else {\n            //invalid key\n            cancelledKey(sk);\n        }\n    } catch ( CancelledKeyException ckx ) {\n        cancelledKey(sk);\n    } catch (Throwable t) {\n        ExceptionUtils.handleThrowable(t);\n        log.error("",t);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br")])]),e("p",[n._v("接下来是 processSocket 方法，注意第三个参数，上面进来的时候是 true。")]),n._v(" "),e("p",[n._v("AbstractEndpoint # processSocket")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public boolean processSocket(SocketWrapperBase<S> socketWrapper,\n        SocketEvent event, boolean dispatch) {\n    try {\n        if (socketWrapper == null) {\n            return false;\n        }\n        SocketProcessorBase<S> sc = processorCache.pop();\n        if (sc == null) {\n            // 创建一个 SocketProcessor 的实例\n            sc = createSocketProcessor(socketWrapper, event);\n        } else {\n            sc.reset(socketWrapper, event);\n        }\n        Executor executor = getExecutor();\n        if (dispatch && executor != null) {\n            // 将任务放到之前建立的 worker 线程池中执行\n            executor.execute(sc);\n        } else {\n            sc.run(); // ps: 如果 dispatch 为 false，那么就当前线程自己执行\n        }\n    } catch (RejectedExecutionException ree) {\n        getLog().warn(sm.getString("endpoint.executor.fail", socketWrapper) , ree);\n        return false;\n    } catch (Throwable t) {\n        ExceptionUtils.handleThrowable(t);\n        // This means we got an OOM or similar creating a thread, or that\n        // the pool and its queue are full\n        getLog().error(sm.getString("endpoint.process.fail"), t);\n        return false;\n    }\n    return true;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br")])]),e("p",[n._v("NioEndpoint # createSocketProcessor")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Override\nprotected SocketProcessorBase<NioChannel> createSocketProcessor(\n        SocketWrapperBase<NioChannel> socketWrapper, SocketEvent event) {\n    return new SocketProcessor(socketWrapper, event);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("我们看到，提交到 worker 线程池中的是 NioEndpoint.SocketProcessor 的实例，至于它的 run() 方法之后的逻辑，我们就不再继续往里分析了。")]),n._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("最后，再祭出文章开始的那张图来总结一下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.javadoop.com/blogimages/tomcat-nio/0.png",alt:"0"}})]),n._v(" "),e("p",[n._v("这里简单梳理下前面我们说的流程，帮大家回忆一下：")]),n._v(" "),e("ol",[e("li",[n._v("指定 Protocol，初始化相应的 Endpoint，我们分析的是 NioEndpoint；")]),n._v(" "),e("li",[n._v("init 过程：在 NioEndpoint 中做 bind 操作；")]),n._v(" "),e("li",[n._v("start 过程：启动 worker 线程池，启动 1 个 Acceptor 和 2 个 Poller，当然它们都是默认值，可配；")]),n._v(" "),e("li",[n._v("Acceptor 获取到新的连接后，getPoller0() 获取其中一个 Poller，然后 register 到 Poller 中；")]),n._v(" "),e("li",[n._v("Poller 循环 selector.select(xxx)，如果有通道 readable，那么在 processKey 中将其放到 worker 线程池中。")])]),n._v(" "),e("p",[n._v("后续的流程，感兴趣的读者请自行分析，本文就说到这里了。")]),n._v(" "),e("p",[n._v("（全文完）")])])}),[],!1,null,null,null);s.default=a.exports}}]);