(window.webpackJsonp=window.webpackJsonp||[]).push([[609],{1009:function(_,v,a){"use strict";a.r(v);var t=a(13),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[_._v("#")]),_._v(" Table of Contents")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E6%A6%82%E8%BF%B0"}},[_._v("1 概述")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E7%BB%8F%E6%AD%BB%E4%BA%A1%EF%BC%9F"}},[_._v("2 对象已经死亡？")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95"}},[_._v("2.1引用计数法")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#22%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95"}},[_._v("2.2可达性分析算法")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#23-%E5%86%8D%E8%B0%88%E5%BC%95%E7%94%A8"}},[_._v("2.3 再谈引用")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#24-%E7%94%9F%E5%AD%98%E8%BF%98%E6%98%AF%E6%AD%BB%E4%BA%A1"}},[_._v("2.4 生存还是死亡")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#25-%E5%9B%9E%E6%94%B6%E6%96%B9%E6%B3%95%E5%8C%BA"}},[_._v("2.5 回收方法区")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#3-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95"}},[_._v("3 垃圾收集算法")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#31-%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95"}},[_._v("3.1 标记-清除算法")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#32-%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95"}},[_._v("3.2 复制算法")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#33-%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95"}},[_._v("3.3 标记-整理算法")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#34%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95"}},[_._v("3.4分代收集算法")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4 垃圾收集器")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#41-serial%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.1 Serial收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#42-parnew%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.2 ParNew收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#43-parallel-scavenge%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.3 Parallel Scavenge收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#44serial-old%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.4.Serial Old收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#45-parallel-old%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.5 Parallel Old收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#46-cms%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.6 CMS收集器")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#47-g1%E6%94%B6%E9%9B%86%E5%99%A8"}},[_._v("4.7 G1收集器")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#5-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5"}},[_._v("5 内存分配与回收策略")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#51%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%85%88%E5%9C%A8eden%E5%8C%BA%E5%88%86%E9%85%8D"}},[_._v("5.1对象优先在Eden区分配")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#52-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3"}},[_._v("5.2 大对象直接进入老年代")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#53%E9%95%BF%E6%9C%9F%E5%AD%98%E6%B4%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%B0%86%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3"}},[_._v("5.3长期存活的对象将进入老年代")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#54-%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1%E5%B9%B4%E9%BE%84%E5%88%A4%E5%AE%9A"}},[_._v("5.4 动态对象年龄判定")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93%EF%BC%9A"}},[_._v("总结：")])])]),_._v(" "),a("p",[_._v("本文转自：https://www.cnblogs.com/snailclimb/p/9086341.html")]),_._v(" "),a("p",[_._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),_._v(" "),a("blockquote",[a("p",[_._v("https://github.com/h2pl/Java-Tutorial")])]),_._v(" "),a("p",[_._v("喜欢的话麻烦点下Star哈")]),_._v(" "),a("p",[_._v("文章将同步到我的个人博客：")]),_._v(" "),a("blockquote",[a("p",[_._v("www.how2playlife.com")])]),_._v(" "),a("p",[_._v("本文是微信公众号【Java技术江湖】的《深入理解JVM虚拟机》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),_._v(" "),a("p",[_._v("该系列博文会告诉你如何从入门到进阶，一步步地学习JVM基础知识，并上手进行JVM调优实战，JVM是每一个Java工程师必须要学习和理解的知识点，你必须要掌握其实现原理，才能更完整地了解整个Java技术体系，形成自己的知识框架。")]),_._v(" "),a("p",[_._v("为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),_._v(" "),a("p",[_._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),_._v(" "),a("p",[a("strong",[_._v("本节常见面试题（推荐带着问题阅读，问题答案在文中都有提到）：")])]),_._v(" "),a("p",[_._v("如何判断对象是否死亡（两种方法）。")]),_._v(" "),a("p",[_._v("简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。")]),_._v(" "),a("p",[_._v("垃圾收集有哪些算法，各自的特点？")]),_._v(" "),a("p",[_._v("HotSpot为什么要分为新生代和老年代？")]),_._v(" "),a("p",[_._v("常见的垃圾回收器有那些？")]),_._v(" "),a("p",[_._v("介绍一下CMS,G1收集器。")]),_._v(" "),a("p",[_._v("Minor Gc和Full GC 有什么不同呢？")]),_._v(" "),a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1 概述")]),_._v(" "),a("p",[_._v("首先所需要考虑：")]),_._v(" "),a("ul",[a("li",[_._v("那些垃圾需要回收？")]),_._v(" "),a("li",[_._v("什么时候回收？")]),_._v(" "),a("li",[_._v("如何回收？")])]),_._v(" "),a("p",[_._v("当需要排查各种 内存溢出问题、当垃圾收集称为系统达到更高并发的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。")]),_._v(" "),a("h2",{attrs:{id:"_2-对象已经死亡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象已经死亡"}},[_._v("#")]),_._v(" 2 对象已经死亡？")]),_._v(" "),a("p",[_._v("堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断那些对象已经死亡（即不能再被任何途径使用的对象）")]),_._v(" "),a("h3",{attrs:{id:"_2-1引用计数法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1引用计数法"}},[_._v("#")]),_._v(" 2.1引用计数法")]),_._v(" "),a("p",[_._v("给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。")]),_._v(" "),a("p",[_._v("这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。")]),_._v(" "),a("h3",{attrs:{id:"_2-2可达性分析算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2可达性分析算法"}},[_._v("#")]),_._v(" 2.2可达性分析算法")]),_._v(" "),a("p",[_._v("这个算法的基本思想就是通过一系列的称为 "),a("strong",[_._v("“GC Roots”")]),_._v(" 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连的话，则证明此对象是不可用的。\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630be33dd8c8e32?w=807&h=485&f=png&s=223006",alt:"可达性分析算法"}})]),_._v(" "),a("h3",{attrs:{id:"_2-3-再谈引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-再谈引用"}},[_._v("#")]),_._v(" 2.3 再谈引用")]),_._v(" "),a("p",[_._v("JDK1.2以后，Java对引用的感念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）")]),_._v(" "),a("p",[a("strong",[_._v("1．强引用")])]),_._v(" "),a("p",[_._v("以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于"),a("strong",[_._v("必不可少的生活用品")]),_._v("，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。")]),_._v(" "),a("p",[a("strong",[_._v("2．软引用（SoftReference）")])]),_._v(" "),a("p",[_._v("如果一个对象只具有软引用，那就类似于"),a("strong",[_._v("可有可物的生活用品")]),_._v("。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。")]),_._v(" "),a("p",[_._v("软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。")]),_._v(" "),a("p",[a("strong",[_._v("3．弱引用（WeakReference）")])]),_._v(" "),a("p",[_._v("如果一个对象只具有弱引用，那就类似于"),a("strong",[_._v("可有可物的生活用品")]),_._v("。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。")]),_._v(" "),a("p",[_._v("弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。")]),_._v(" "),a("p",[a("strong",[_._v("4．虚引用（PhantomReference）")])]),_._v(" "),a("p",[_._v("“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。")]),_._v(" "),a("p",[a("strong",[_._v("虚引用主要用来跟踪对象被垃圾回收的活动")]),_._v("。")]),_._v(" "),a("p",[a("strong",[_._v("虚引用与软引用和弱引用的一个区别在于：")]),_._v(" 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。")]),_._v(" "),a("p",[_._v("特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为"),a("strong",[_._v("软引用可以加速JVM对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"_2-4-生存还是死亡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-生存还是死亡"}},[_._v("#")]),_._v(" 2.4 生存还是死亡")]),_._v(" "),a("p",[_._v("即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize方法。当对象没有覆盖finalize方法，或finalize方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。")]),_._v(" "),a("h3",{attrs:{id:"_2-5-回收方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-回收方法区"}},[_._v("#")]),_._v(" 2.5 回收方法区")]),_._v(" "),a("p",[_._v("方法区（或Hotspot虚拟中的永久代）的垃圾收集主要回收两部分内容："),a("strong",[_._v("废弃常量和无用的类。")])]),_._v(" "),a("p",[_._v("判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面3个条件才能算是 "),a("strong",[_._v("“无用的类”")]),_._v(" ：")]),_._v(" "),a("ul",[a("li",[_._v("该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。")]),_._v(" "),a("li",[_._v("加载该类的ClassLoader已经被回收。")]),_._v(" "),a("li",[_._v("该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),_._v(" "),a("h2",{attrs:{id:"_3-垃圾收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集算法"}},[_._v("#")]),_._v(" 3 垃圾收集算法")]),_._v(" "),a("h3",{attrs:{id:"_3-1-标记-清除算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-标记-清除算法"}},[_._v("#")]),_._v(" 3.1 标记-清除算法")]),_._v(" "),a("p",[_._v("算法分为“标记”和“清除”阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它是最基础的收集算法，会带来两个明显的问题；1：效率问题和2：空间问题（标记清除后会产生大量不连续的碎片）\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630bedcd37144b0?w=809&h=438&f=png&s=143686",alt:"标记-清除算法"}})]),_._v(" "),a("h3",{attrs:{id:"_3-2-复制算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-复制算法"}},[_._v("#")]),_._v(" 3.2 复制算法")]),_._v(" "),a("p",[_._v("为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630bee78552641e?w=829&h=420&f=png&s=188338",alt:"复制算法"}})]),_._v(" "),a("h3",{attrs:{id:"_3-3-标记-整理算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-标记-整理算法"}},[_._v("#")]),_._v(" 3.3 标记-整理算法")]),_._v(" "),a("p",[_._v("根据老年代的特点特出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一段移动，然后直接清理掉端边界以外的内存。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630bef38f362a98?w=816&h=459&f=png&s=147162",alt:"标记-整理算法"}})]),_._v(" "),a("h3",{attrs:{id:"_3-4分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4分代收集算法"}},[_._v("#")]),_._v(" 3.4分代收集算法")]),_._v(" "),a("p",[_._v("当前虚拟机的垃圾手机都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。")]),_._v(" "),a("p",[_._v("比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的所以我们可以选择“标记-清理”或“标记-整理”算法进行垃圾收集。")]),_._v(" "),a("p",[a("strong",[_._v("延伸面试问题：")]),_._v(" HotSpot为什么要分为新生代和老年代？")]),_._v(" "),a("p",[_._v("根据上面的对分代收集算法的介绍回答。")]),_._v(" "),a("h2",{attrs:{id:"_4-垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-垃圾收集器"}},[_._v("#")]),_._v(" 4 垃圾收集器")]),_._v(" "),a("p",[a("strong",[_._v("如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。")]),_._v("\n虽然我们对各个收集器进行比较，但并非了挑选出一个最好的收集器。因为知道现在位置还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，"),a("strong",[_._v("我们能做的就是根据具体应用场景选择适合自己的垃圾收集器")]),_._v("。试想一下：如果有一种四海之内、任何场景下都适用的完美收集器存在，那么我们的HotSpot虚拟机就不会实现那么多不同的垃圾收集器了。")]),_._v(" "),a("h3",{attrs:{id:"_4-1-serial收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-serial收集器"}},[_._v("#")]),_._v(" 4.1 Serial收集器")]),_._v(" "),a("p",[_._v("Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 "),a("strong",[_._v("“单线程”")]),_._v(" 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "),a("strong",[_._v("“Stop The World”")]),_._v(" 了解一下），直到它收集结束。\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630c032627e6728?w=767&h=177&f=png&s=80000",alt:"Serial收集器"}})]),_._v(" "),a("p",[_._v("虚拟机的设计者们当然知道Stop The World带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。")]),_._v(" "),a("p",[_._v("但是Serial收集器有没有优于其他垃圾收集器的地方呢？当然有，它"),a("strong",[_._v("简单而高效（与其他收集器的单线程相比）")]),_._v("。Serial收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial收集器对于运行在Client模式下的虚拟机来说是个不错的选择。")]),_._v(" "),a("h3",{attrs:{id:"_4-2-parnew收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-parnew收集器"}},[_._v("#")]),_._v(" 4.2 ParNew收集器")]),_._v(" "),a("p",[a("strong",[_._v("ParNew收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和Serial收集器完全一样。")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630c07412c5e73a?w=785&h=187&f=png&s=87246",alt:"ParNew收集器"}}),_._v("\n它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，只有它能与CMS收集器（真正意义上的并发收集器，后面会介绍到）配合工作。")]),_._v(" "),a("p",[a("strong",[_._v("并行和并发概念补充：")])]),_._v(" "),a("ul",[a("li",[a("p",[a("strong",[_._v("并行（Parallel）")]),_._v(" ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。")])]),_._v(" "),a("li",[a("p",[a("strong",[_._v("并发（Concurrent）")]),_._v("：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个CPU上。")])])]),_._v(" "),a("h3",{attrs:{id:"_4-3-parallel-scavenge收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-parallel-scavenge收集器"}},[_._v("#")]),_._v(" 4.3 Parallel Scavenge收集器")]),_._v(" "),a("p",[_._v("Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的的多线程收集器。。。那么它有什么特别之处呢？")]),_._v(" "),a("p",[a("strong",[_._v("Parallel Scavenge收集器关注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。")]),_._v(" Parallel Scavenge收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。")]),_._v(" "),a("h3",{attrs:{id:"_4-4-serial-old收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-serial-old收集器"}},[_._v("#")]),_._v(" 4.4.Serial Old收集器")]),_._v(" "),a("p",[a("strong",[_._v("Serial收集器的老年代版本")]),_._v("，它同样是一个单线程收集器。它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案。")]),_._v(" "),a("h3",{attrs:{id:"_4-5-parallel-old收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-parallel-old收集器"}},[_._v("#")]),_._v(" 4.5 Parallel Old收集器")]),_._v(" "),a("p",[a("strong",[_._v("Parallel Scavenge收集器的老年代版本")]),_._v("。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。")]),_._v(" "),a("h3",{attrs:{id:"_4-6-cms收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-cms收集器"}},[_._v("#")]),_._v(" 4.6 CMS收集器")]),_._v(" "),a("p",[a("strong",[_._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它而非常符合在注重用户体验的应用上使用。")])]),_._v(" "),a("p",[_._v("从名字中的"),a("strong",[_._v("Mark Sweep")]),_._v("这两个词可以看出，CMS收集器是一种 "),a("strong",[_._v("“标记-清除”算法")]),_._v("实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("初始标记：")]),_._v(" 暂停所有的其他线程，并记录下直接与root相连的对象，速度很快 ；")]),_._v(" "),a("li",[a("strong",[_._v("并发标记：")]),_._v(" 同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。")]),_._v(" "),a("li",[a("strong",[_._v("重新标记：")]),_._v(" 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短")]),_._v(" "),a("li",[a("strong",[_._v("并发清除：")]),_._v(" 开启用户线程，同时GC线程开始对为标记的区域做清扫。")])]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630c17fcd5f9497?w=816&h=210&f=png&s=91490",alt:"CMS收集器"}})]),_._v(" "),a("p",[_._v("从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点："),a("strong",[_._v("并发收集、低停顿")]),_._v("。但是它有下面三个明显的缺点：\n- "),a("strong",[_._v("对CPU资源敏感；")]),_._v("\n- "),a("strong",[_._v("无法处理浮动垃圾；")]),_._v("\n- "),a("strong",[_._v("它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。")])]),_._v(" "),a("h3",{attrs:{id:"_4-7-g1收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-g1收集器"}},[_._v("#")]),_._v(" 4.7 G1收集器")]),_._v(" "),a("p",[_._v("上一代的垃圾收集器(串行serial, 并行parallel, 以及CMS)都把堆内存划分为固定大小的三个部分: 年轻代(young generation), 年老代(old generation), 以及持久代(permanent generation).")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630c1b1b3b95713?w=960&h=513&f=png&s=24990",alt:"年轻代(young generation), 年老代(old generation), 以及持久代(permanent generation)"}})]),_._v(" "),a("p",[a("strong",[_._v("G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征.")])]),_._v(" "),a("p",[_._v("被视为JDK1.7中HotSpot虚拟机的一个重要进化特征。它具备一下特点：\n- "),a("strong",[_._v("并行与并发")]),_._v("：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n- "),a("strong",[_._v("分代收集")]),_._v("：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但是还是保留了分代的概念。\n- "),a("strong",[_._v("空间整合")]),_._v("：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。\n- "),a("strong",[_._v("可预测的停顿")]),_._v("：这是G1相对于CMS的另一个大优势，降低停顿时间是G1和ＣＭＳ共同的关注点，但Ｇ１除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内。")]),_._v(" "),a("p",[a("strong",[_._v("G1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的Region(这也就是它的名字Garbage-First的由来)")]),_._v("。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了GF收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。")]),_._v(" "),a("p",[_._v("G1收集器的运作大致分为以下几个步骤：\n- "),a("strong",[_._v("初始标记")]),_._v("\n- "),a("strong",[_._v("并发标记")]),_._v("\n- "),a("strong",[_._v("最终标记")]),_._v("\n- "),a("strong",[_._v("筛选回收")])]),_._v(" "),a("p",[_._v("上面几个步骤的运作过程和CMS有很多相似之处。初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS的值，让下一个阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这一阶段需要停顿线程，但是耗时很短，并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段时耗时较长，但可与用户程序并发执行。而最终标记阶段则是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remenbered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这一阶段需要停顿线程，但是可并行执行。最后在筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/28/1630c1e0bb4557d8?w=814&h=206&f=png&s=98459",alt:"G1收集器"}})]),_._v(" "),a("h2",{attrs:{id:"_5-内存分配与回收策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-内存分配与回收策略"}},[_._v("#")]),_._v(" 5 内存分配与回收策略")]),_._v(" "),a("h3",{attrs:{id:"_5-1对象优先在eden区分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1对象优先在eden区分配"}},[_._v("#")]),_._v(" 5.1对象优先在Eden区分配")]),_._v(" "),a("p",[_._v("大多数情况下，对象在新生代中Eden区分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC.")]),_._v(" "),a("p",[a("strong",[_._v("Minor Gc和Full GC 有什么不同呢？")])]),_._v(" "),a("p",[a("strong",[_._v("新生代GC（Minor GC）")]),_._v(":指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。")]),_._v(" "),a("p",[a("strong",[_._v("老年代GC（Major GC/Full GC）")]),_._v(":指发生在老年代的GC，出现了Major GC经常会伴随至少一次的Minor GC（并非绝对），Major GC的速度一般会比Minor GC的慢10倍以上。")]),_._v(" "),a("h3",{attrs:{id:"_5-2-大对象直接进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-大对象直接进入老年代"}},[_._v("#")]),_._v(" 5.2 大对象直接进入老年代")]),_._v(" "),a("p",[_._v("大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。")]),_._v(" "),a("h3",{attrs:{id:"_5-3长期存活的对象将进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3长期存活的对象将进入老年代"}},[_._v("#")]),_._v(" 5.3长期存活的对象将进入老年代")]),_._v(" "),a("p",[_._v("既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别那些对象应放在新生代，那些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。")]),_._v(" "),a("h3",{attrs:{id:"_5-4-动态对象年龄判定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-动态对象年龄判定"}},[_._v("#")]),_._v(" 5.4 动态对象年龄判定")]),_._v(" "),a("p",[_._v("为了更好的适应不同程序的内存情况，虚拟机不是永远要求对象年龄必须达到了某个值才能进入老年代，如果Survivor 空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需达到要求的年龄。")]),_._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结：")]),_._v(" "),a("p",[_._v("本节介绍了垃圾收集算法，几款JDK1.7中提供的垃圾收集器特点以及运作原理。\n内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及大量调节参数，是因为只有根据实际应用的需求、实现方式选择最优的收集方式才能获取最高的性能。没有固定收集器、参数组合、也没有最优的调优方法，那么必须了解每一个具体收集器的行为、优势和劣势、调节参数。")])])}),[],!1,null,null,null);v.default=r.exports}}]);