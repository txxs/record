(window.webpackJsonp=window.webpackJsonp||[]).push([[571],{963:function(t,e,n){"use strict";n.r(e);var a=n(13),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#arraylist"}},[t._v("ArrayList")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#arraylist%E6%A6%82%E8%BF%B0"}},[t._v("ArrayList概述")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#arraylist%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB"}},[t._v("ArrayList的继承关系")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"}},[t._v("底层数据结构")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5"}},[t._v("增删改查")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#modcount"}},[t._v("modCount")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%92%8C%E6%89%A9%E5%AE%B9%E6%96%B9%E5%BC%8F"}},[t._v("初始容量和扩容方式")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8"}},[t._v("线程安全")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#vector"}},[t._v("Vector")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#vector%E7%AE%80%E4%BB%8B"}},[t._v("Vector简介")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-1"}},[t._v("增删改查")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%AE%B9%E9%87%8F%E5%92%8C%E6%89%A9%E5%AE%B9"}},[t._v("初始容量和扩容")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-1"}},[t._v("线程安全")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#stack"}},[t._v("Stack")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#stack-1"}},[t._v("Stack")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%89%E4%B8%AA%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("三个集合类之间的区别")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[t._v("参考文章")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[t._v("微信公众号")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[t._v("Java技术江湖")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[t._v("个人公众号：黄小斜")])])])])])])]),t._v(" "),n("p",[t._v("本文参考多篇优质技术博客，参考文章请在文末查看")]),t._v(" "),n("p",[t._v("《Java集合详解系列》是我在完成夯实Java基础篇的系列博客后准备开始整理的新系列文章。\n为了更好地诠释知识点，形成体系文章，本系列文章整理了很多优质的博客内容，如有侵权请联系我，一定删除。")]),t._v(" "),n("p",[t._v("这些文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),t._v(" "),n("p",[t._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),t._v(" "),n("blockquote",[n("p",[t._v("https://github.com/h2pl/Java-Tutorial")])]),t._v(" "),n("p",[t._v("喜欢的话麻烦点下Star、fork哈")]),t._v(" "),n("p",[t._v("本系列文章将整理于我的个人博客：")]),t._v(" "),n("blockquote",[n("p",[t._v("www.how2playlife.com")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//一般讨论集合类无非就是。这里的两种数组类型更是如此\n// 1底层数据结构\n// 2增删改查方式\n// 3初始容量，扩容方式，扩容时机。\n// 4线程安全与否\n// 5是否允许空，是否允许重复，是否有序 \n")])])]),n("h2",{attrs:{id:"arraylist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),n("h3",{attrs:{id:"arraylist概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist概述"}},[t._v("#")]),t._v(" ArrayList概述")]),t._v(" "),n("p",[t._v("ArrayList是实现List接口的动态数组，所谓动态就是它的大小是可变的。实现了所有可选列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。")]),t._v(" "),n("p",[t._v("每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。默认初始容量为10。随着ArrayList中元素的增加，它的容量也会不断的自动增长。")]),t._v(" "),n("p",[t._v("在每次添加新的元素时，ArrayList都会检查是否需要进行扩容操作，扩容操作带来数据向新数组的重新拷贝，所以如果我们知道具体业务数据量，在构造ArrayList时可以给ArrayList指定一个初始容量，这样就会减少扩容时数据的拷贝问题。当然在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。")]),t._v(" "),n("p",[t._v("注意，ArrayList实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。所以为了保证同步，最好的办法是在创建时完成，以防止意外对列表进行不同步的访问：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    List list = Collections.synchronizedList(new ArrayList(...)); \n")])])]),n("h3",{attrs:{id:"arraylist的继承关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist的继承关系"}},[t._v("#")]),t._v(" ArrayList的继承关系")]),t._v(" "),n("p",[t._v("ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdn.net/2018081819553095?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNjM3ODkxNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"底层数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层数据结构"}},[t._v("#")]),t._v(" 底层数据结构")]),t._v(" "),n("p",[t._v("ArrayList的底层是一个object数组，并且由trasient修饰。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//transient Object[] elementData; //\n")])])]),n("p",[t._v("non-private to simplify nested class access\n//ArrayList底层数组不会参与序列化，而是使用另外的序列化方式。")]),t._v(" "),n("p",[t._v("//使用writeobject方法进行序列化,具体为什么这么做欢迎查看我之前的关于序列化的文章")]),t._v(" "),n("p",[t._v("//总结一下就是只复制数组中有值的位置，其他未赋值的位置不进行序列化，可以节省空间。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        private void writeObject(java.io.ObjectOutputStream s)\n//        throws java.io.IOException{\n//            // Write out element count, and any hidden stuff\n//            int expectedModCount = modCount;\n//            s.defaultWriteObject();\n//\n//            // Write out size as capacity for behavioural compatibility with clone()\n//            s.writeInt(size);\n//\n//            // Write out all elements in the proper order.\n//            for (int i=0; i<size; i++) {\n//                s.writeObject(elementData[i]);\n//            }\n//\n//            if (modCount != expectedModCount) {\n//                throw new ConcurrentModificationException();\n//            }\n//        }\n")])])]),n("h3",{attrs:{id:"增删改查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增删改查"}},[t._v("#")]),t._v(" 增删改查")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//增删改查\n")])])]),n("p",[t._v("添加元素时，首先判断索引是否合法，然后检测是否需要扩容，最后使用System.arraycopy方法来完成数组的复制。")]),t._v(" "),n("p",[t._v("这个方法无非就是使用System.arraycopy()方法将C集合(先准换为数组)里面的数据复制到elementData数组中。这里就稍微介绍下System.arraycopy()，因为下面还将大量用到该方法")]),t._v(" "),n("p",[t._v("。该方法的原型为：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)。\n")])])]),n("p",[t._v("它的根本目的就是进行数组元素的复制。即从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。")]),t._v(" "),n("p",[t._v("将源数组src从srcPos位置开始复制到dest数组中，复制长度为length，数据从dest的destPos位置开始粘贴。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        public void add(int index, E element) {\n//            rangeCheckForAdd(index);\n//\n//            ensureCapacityInternal(size + 1);  // Increments modCount!!\n//            System.arraycopy(elementData, index, elementData, index + 1,\n//                    size - index);\n//            elementData[index] = element;\n//            size++;\n//        }\n//\n")])])]),n("p",[t._v("删除元素时，同样判断索引是否和法，删除的方式是把被删除元素右边的元素左移，方法同样是使用System.arraycopy进行拷贝。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        public E remove(int index) {\n//            rangeCheck(index);\n//\n//            modCount++;\n//            E oldValue = elementData(index);\n//\n//            int numMoved = size - index - 1;\n//            if (numMoved > 0)\n//                System.arraycopy(elementData, index+1, elementData, index,\n//                        numMoved);\n//            elementData[--size] = null; // clear to let GC do its work\n//\n//            return oldValue;\n//        }\n")])])]),n("p",[t._v("ArrayList提供一个清空数组的办法，方法是将所有元素置为null，这样就可以让GC自动回收掉没有被引用的元素了。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//\n//        /**\n//         * Removes all of the elements from this list.  The list will\n//         * be empty after this call returns.\n//         */\n//        public void clear() {\n//            modCount++;\n//\n//            // clear to let GC do its work\n//            for (int i = 0; i < size; i++)\n//                elementData[i] = null;\n//\n//            size = 0;\n//        }\n")])])]),n("p",[t._v("修改元素时，只需要检查下标即可进行修改操作。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        public E set(int index, E element) {\n//            rangeCheck(index);\n//\n//            E oldValue = elementData(index);\n//            elementData[index] = element;\n//            return oldValue;\n//        }\n//\n//        public E get(int index) {\n//            rangeCheck(index);\n//\n//            return elementData(index);\n//        }\n//\n")])])]),n("p",[t._v("上述方法都使用了rangeCheck方法，其实就是简单地检查下标而已。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        private void rangeCheck(int index) {\n//            if (index >= size)\n//                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n//        }\n")])])]),n("h3",{attrs:{id:"modcount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#modcount"}},[t._v("#")]),t._v(" modCount")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        protected transient int modCount = 0;\n")])])]),n("p",[t._v("由以上代码可以看出，在一个迭代器初始的时候会赋予它调用这个迭代器的对象的mCount，如何在迭代器遍历的过程中，一旦发现这个对象的mcount和迭代器中存储的mcount不一样那就抛异常")]),t._v(" "),n("blockquote",[n("p",[t._v("好的，下面是这个的完整解释\nFail-Fast 机制\n我们知道 java.util.ArrayList 不是线程安全的，ArrayList，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。")]),t._v(" "),n("p",[t._v("这一策略在源码中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。")]),t._v(" "),n("p",[t._v("在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 ArrayList。")]),t._v(" "),n("p",[t._v("所以在这里和大家建议，当大家遍历那些非线程安全的数据结构时，尽量使用迭代器")])]),t._v(" "),n("h3",{attrs:{id:"初始容量和扩容方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始容量和扩容方式"}},[t._v("#")]),t._v(" 初始容量和扩容方式")]),t._v(" "),n("p",[t._v("初始容量是10，下面是扩容方法。\n首先先取")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        private static final int DEFAULT_CAPACITY = 10;\n\n扩容发生在add元素时，传入当前元素容量加一\n   public boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n\n这里给出初始化时的数组\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n这说明：如果数组还是初始数组，那么最小的扩容大小就是size+1和初始容量中较大的一个，初始容量为10。\n因为addall方法也会调用该函数，所以此时需要做判断。\nprivate void ensureCapacityInternal(int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n\n//开始精确地扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n        如果此时扩容容量大于数组长度吗，执行grow，否则不执行。\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n")])])]),n("p",[t._v("真正执行扩容的方法grow")]),t._v(" "),n("p",[t._v("扩容方式是让新容量等于旧容量的1.5被。")]),t._v(" "),n("p",[t._v("当新容量大于最大数组容量时，执行大数扩容")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        private void grow(int minCapacity) {\n//            // overflow-conscious code\n//            int oldCapacity = elementData.length;\n//            int newCapacity = oldCapacity + (oldCapacity >> 1);\n//            if (newCapacity - minCapacity < 0)\n//                newCapacity = minCapacity;\n//            if (newCapacity - MAX_ARRAY_SIZE > 0)\n//                newCapacity = hugeCapacity(minCapacity);\n//            // minCapacity is usually close to size, so this is a win:\n//            elementData = Arrays.copyOf(elementData, newCapacity);\n//        }\n")])])]),n("p",[t._v("当新容量大于最大数组长度，有两种情况，一种是溢出，抛异常，一种是没溢出，返回整数的最大值。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("private static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n")])])]),n("p",[t._v("在这里有一个疑问，为什么每次扩容处理会是1.5倍，而不是2.5、3、4倍呢？通过google查找，发现1.5倍的扩容是最好的倍数。因为一次性扩容太大(例如2.5倍)可能会浪费更多的内存(1.5倍最多浪费33%，而2.5被最多会浪费60%，3.5倍则会浪费71%……)。但是一次性扩容太小，需要多次对数组重新分配内存，对性能消耗比较严重。所以1.5倍刚刚好，既能满足性能需求，也不会造成很大的内存消耗。")]),t._v(" "),n("p",[t._v("处理这个ensureCapacity()这个扩容数组外，ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize()方法来实现。该方法可以最小化ArrayList实例的存储量。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public void trimToSize() {\n    modCount++;\n    int oldCapacity = elementData.length;\n    if (size < oldCapacity) {\n        elementData = Arrays.copyOf(elementData, size);\n    }\n}\n")])])]),n("h3",{attrs:{id:"线程安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[t._v("#")]),t._v(" 线程安全")]),t._v(" "),n("p",[t._v("ArrayList是线程不安全的。在其迭代器iteator中，如果有多线程操作导致modcount改变，会执行fastfail。抛出异常。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    final void checkForComodification() {\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n    }\n")])])]),n("h2",{attrs:{id:"vector"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" Vector")]),t._v(" "),n("h3",{attrs:{id:"vector简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vector简介"}},[t._v("#")]),t._v(" Vector简介")]),t._v(" "),n("p",[t._v("Vector可以实现可增长的对象数组。与数组一样，它包含可以使用整数索引进行访问的组件。不过，Vector的大小是可以增加或者减小的，以便适应创建Vector后进行添加或者删除操作。")]),t._v(" "),n("p",[t._v("Vector实现List接口，继承AbstractList类，所以我们可以将其看做队列，支持相关的添加、删除、修改、遍历等功能。")]),t._v(" "),n("p",[t._v("Vector实现RandmoAccess接口，即提供了随机访问功能，提供提供快速访问功能。在Vector我们可以直接访问元素。")]),t._v(" "),n("p",[t._v("Vector 实现了Cloneable接口，支持clone()方法，可以被克隆。")]),t._v(" "),n("p",[t._v("vector底层数组不加transient，序列化时会全部复制")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(' protected Object[] elementData;\n\n\n\n//        private void writeObject(java.io.ObjectOutputStream s)\n//            throws java.io.IOException {\n//            final java.io.ObjectOutputStream.PutField fields = s.putFields();\n//            final Object[] data;\n//            synchronized (this) {\n//                fields.put("capacityIncrement", capacityIncrement);\n//                fields.put("elementCount", elementCount);\n//                data = elementData.clone();\n//            }\n//            fields.put("elementData", data);\n//            s.writeFields();\n//        }\n')])])]),n("p",[t._v("Vector除了iterator外还提供Enumeration枚举方法，不过现在比较过时。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('//        public Enumeration<E> elements() {\n//            return new Enumeration<E>() {\n//                int count = 0;\n//\n//                public boolean hasMoreElements() {\n//                    return count < elementCount;\n//                }\n//\n//                public E nextElement() {\n//                    synchronized (Vector.this) {\n//                        if (count < elementCount) {\n//                            return elementData(count++);\n//                        }\n//                    }\n//                    throw new NoSuchElementException("Vector Enumeration");\n//                }\n//            };\n//        }\n//\n')])])]),n("h3",{attrs:{id:"增删改查-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增删改查-2"}},[t._v("#")]),t._v(" 增删改查")]),t._v(" "),n("p",[t._v("vector的增删改查既提供了自己的实现，也继承了abstractList抽象类的部分方法。\n下面的方法是vector自己实现的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('//\n//    public synchronized E elementAt(int index) {\n//        if (index >= elementCount) {\n//            throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);\n//        }\n//\n//        return elementData(index);\n//    }\n//\n//\n\n//    public synchronized void setElementAt(E obj, int index) {\n//        if (index >= elementCount) {\n//            throw new ArrayIndexOutOfBoundsException(index + " >= " +\n//                    elementCount);\n//        }\n//        elementData[index] = obj;\n//    }\n//\n\n\n//    public synchronized void removeElementAt(int index) {\n//        modCount++;\n//        if (index >= elementCount) {\n//            throw new ArrayIndexOutOfBoundsException(index + " >= " +\n//                    elementCount);\n//        }\n//        else if (index < 0) {\n//            throw new ArrayIndexOutOfBoundsException(index);\n//        }\n//        int j = elementCount - index - 1;\n//        if (j > 0) {\n//            System.arraycopy(elementData, index + 1, elementData, index, j);\n//        }\n//        elementCount--;\n//        elementData[elementCount] = null; /* to let gc do its work */\n//    }\n\n\n//    public synchronized void insertElementAt(E obj, int index) {\n//        modCount++;\n//        if (index > elementCount) {\n//            throw new ArrayIndexOutOfBoundsException(index\n//                    + " > " + elementCount);\n//        }\n//        ensureCapacityHelper(elementCount + 1);\n//        System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);\n//        elementData[index] = obj;\n//        elementCount++;\n//    }\n//\n\n//    public synchronized void addElement(E obj) {\n//        modCount++;\n//        ensureCapacityHelper(elementCount + 1);\n//        elementData[elementCount++] = obj;\n//    }\n')])])]),n("h3",{attrs:{id:"初始容量和扩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始容量和扩容"}},[t._v("#")]),t._v(" 初始容量和扩容")]),t._v(" "),n("p",[t._v("扩容方式与ArrayList基本一样，但是扩容时不是1.5倍扩容，而是有一个扩容增量。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//    protected int elementCount;\n\n//    protected int capacityIncrement;\n//\n//\n//    }\n//    public Vector() {\n//        this(10);\n//    }\n")])])]),n("p",[t._v("capacityIncrement：向量的大小大于其容量时，容量自动增加的量。如果在创建Vector时，指定了capacityIncrement的大小；则，每次当Vector中动态数组容量增加时>，增加的大小都是capacityIncrement。如果容量的增量小于等于零，则每次需要增大容量时，向量的容量将增大一倍。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//        public synchronized void ensureCapacity(int minCapacity) {\n//            if (minCapacity > 0) {\n//                modCount++;\n//                ensureCapacityHelper(minCapacity);\n//            }\n//        }\n//        private void ensureCapacityHelper(int minCapacity) {\n//            // overflow-conscious code\n//            if (minCapacity - elementData.length > 0)\n//                grow(minCapacity);\n//        }\n//\n//        private void grow(int minCapacity) {\n//            // overflow-conscious code\n//            int oldCapacity = elementData.length;\n//            int newCapacity = oldCapacity + ((capacityIncrement > 0) ?\n//                    capacityIncrement : oldCapacity);\n//            if (newCapacity - minCapacity < 0)\n//                newCapacity = minCapacity;\n//            if (newCapacity - MAX_ARRAY_SIZE > 0)\n//                newCapacity = hugeCapacity(minCapacity);\n//            elementData = Arrays.copyOf(elementData, newCapacity);\n//        }\n")])])]),n("p",[t._v("下面是扩容过程示意图")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdn.net/20180818200637720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNjM3ODkxNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdn.net/20180818200704724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNjM3ODkxNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdn.net/20180818200735561?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNjM3ODkxNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"线程安全-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程安全-2"}},[t._v("#")]),t._v(" 线程安全")]),t._v(" "),n("p",[t._v("vector大部分方法都使用了synchronized修饰符，所以他是线层安全的集合类。")]),t._v(" "),n("h2",{attrs:{id:"stack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),n("p",[t._v("我们最常用的数据结构之一大概就是stack了。在实际的程序执行，方法调用的过程中都离不开stack。那么，在一个成熟的类库里面，它的实现是怎么样的呢？也许平时我们实践的时候也会尝试着去写一个stack的实现玩玩。这里，我们就仔细的分析一下jdk里的详细实现。")]),t._v(" "),n("h1",{attrs:{id:"stack-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stack-2"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),n("p",[t._v("如果我们去查jdk的文档，我们会发现stack是在java.util这个包里。它对应的一个大致的类关系图如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://dl.iteye.com/upload/attachment/0081/2496/006da63f-388e-3669-b57f-1cdd1909d5f8.jpg",alt:""}})]),t._v(" "),n("p",[t._v("通过继承Vector类，Stack类可以很容易的实现他本身的功能。因为大部分的功能在Vector里面已经提供支持了。\n在Java中Stack类表示后进先出（LIFO）的对象堆栈。栈是一种非常常见的数据结构，它采用典型的先进后出的操作方式完成的。")]),t._v(" "),n("p",[t._v("Stack通过五个操作对Vector进行扩展，允许将向量视为堆栈。这个五个操作如下：")]),t._v(" "),n("blockquote",[n("p",[t._v("empty()")]),t._v(" "),n("p",[t._v("测试堆栈是否为空。")]),t._v(" "),n("p",[t._v("peek()")]),t._v(" "),n("p",[t._v("查看堆栈顶部的对象，但不从堆栈中移除它。")]),t._v(" "),n("p",[t._v("pop()")]),t._v(" "),n("p",[t._v("移除堆栈顶部的对象，并作为此函数的值返回该对象。")]),t._v(" "),n("p",[t._v("push(E item)")]),t._v(" "),n("p",[t._v("把项压入堆栈顶部。")]),t._v(" "),n("p",[t._v("search(Object o)")]),t._v(" "),n("p",[t._v("返回对象在堆栈中的位置，以 1 为基数。")])]),t._v(" "),n("p",[t._v("Stack继承Vector，他对Vector进行了简单的扩展：")]),t._v(" "),n("p",[t._v("public class Stack"),n("E",[t._v(" extends Vector"),n("E",[t._v("\nStack的实现非常简单，仅有一个构造方法，五个实现方法（从Vector继承而来的方法不算与其中），同时其实现的源码非常简单")])],1)],1),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("/**\n * 构造函数\n */\npublic Stack() {\n}\n\n/**\n *  push函数：将元素存入栈顶\n */\npublic E push(E item) {\n    // 将元素存入栈顶。\n    // addElement()的实现在Vector.java中\n    addElement(item);\n\n    return item;\n}\n\n/**\n * pop函数：返回栈顶元素，并将其从栈中删除\n */\npublic synchronized E pop() {\n    E    obj;\n    int    len = size();\n\n    obj = peek();\n    // 删除栈顶元素，removeElementAt()的实现在Vector.java中\n    removeElementAt(len - 1);\n\n    return obj;\n}\n\n/**\n * peek函数：返回栈顶元素，不执行删除操作\n */\npublic synchronized E peek() {\n    int    len = size();\n\n    if (len == 0)\n        throw new EmptyStackException();\n    // 返回栈顶元素，elementAt()具体实现在Vector.java中\n    return elementAt(len - 1);\n}\n\n/**\n * 栈是否为空\n */\npublic boolean empty() {\n    return size() == 0;\n}\n\n/**\n *  查找“元素o”在栈中的位置：由栈底向栈顶方向数\n */\npublic synchronized int search(Object o) {\n    // 获取元素索引，elementAt()具体实现在Vector.java中\n    int i = lastIndexOf(o);\n\n    if (i >= 0) {\n        return size() - i;\n    }\n    return -1;\n}\n")])])]),n("p",[t._v("Stack的源码很多都是基于Vector，所以这里不再累述")]),t._v(" "),n("h2",{attrs:{id:"三个集合类之间的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三个集合类之间的区别"}},[t._v("#")]),t._v(" 三个集合类之间的区别")]),t._v(" "),n("p",[t._v("ArrayList的优缺点")]),t._v(" "),n("p",[t._v("从上面的几个过程总结一下ArrayList的优缺点。ArrayList的优点如下：")]),t._v(" "),n("blockquote",[n("p",[t._v("1、ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快")]),t._v(" "),n("p",[t._v("2、ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已")])]),t._v(" "),n("p",[t._v("不过ArrayList的缺点也十分明显：")]),t._v(" "),n("blockquote",[n("p",[t._v("1、删除元素的时候，涉及到一次元素复制，如果要复制的元素很多，那么就会比较耗费性能")]),t._v(" "),n("p",[t._v("2、插入元素的时候，涉及到一次元素复制，如果要复制的元素很多，那么就会比较耗费性能")]),t._v(" "),n("p",[t._v("因此，ArrayList比较适合顺序添加、随机访问的场景。")])]),t._v(" "),n("p",[t._v("ArrayList和Vector的区别")]),t._v(" "),n("blockquote",[n("p",[t._v("ArrayList是线程非安全的，这很明显，因为ArrayList中所有的方法都不是同步的，在并发下一定会出现线程安全问题。那么我们想要使用ArrayList并且让它线程安全怎么办？一个方法是用Collections.synchronizedList方法把你的ArrayList变成一个线程安全的List，比如：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('List<String> synchronizedList = Collections.synchronizedList(list);\nsynchronizedList.add("aaa");\nsynchronizedList.add("bbb");\nfor (int i = 0; i < synchronizedList.size(); i++)\n{\n    System.out.println(synchronizedList.get(i));\n}\n')])])])]),t._v(" "),n("p",[t._v("另一个方法就是Vector，它是ArrayList的线程安全版本，其实现90%和ArrayList都完全一样，区别在于：")]),t._v(" "),n("blockquote",[n("p",[t._v("1、Vector是线程安全的，ArrayList是线程非安全的")]),t._v(" "),n("p",[t._v("2、Vector可以指定增长因子，如果该增长因子指定了，那么扩容的时候会每次新的数组大小会在原数组的大小基础上加上增长因子；如果不指定增长因子，那么就给原数组大小*2，源代码是这样的：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("int newCapacity = oldCapacity + ((capacityIncrement > 0) ?\n                                 capacityIncrement : oldCapacity);\n")])])]),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),n("p",[t._v("https://www.cnblogs.com/williamjie/p/11158523.html")]),t._v(" "),n("p",[t._v("https://www.cnblogs.com/shenzhichipingguo/p/10075212.html")]),t._v(" "),n("p",[t._v("https://www.cnblogs.com/rnmb/p/6553711.html")]),t._v(" "),n("p",[t._v("https://blog.csdn.net/u011419651/article/details/83831156")]),t._v(" "),n("p",[t._v("https://www.jianshu.com/p/c4027084ac43")]),t._v(" "),n("h2",{attrs:{id:"微信公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[t._v("#")]),t._v(" 微信公众号")]),t._v(" "),n("h3",{attrs:{id:"java技术江湖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[t._v("#")]),t._v(" Java技术江湖")]),t._v(" "),n("p",[t._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),t._v(" "),n("p",[n("strong",[t._v("Java工程师必备学习资源:")]),t._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),n("strong",[t._v("“Java”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),t._v(" "),n("h3",{attrs:{id:"个人公众号-黄小斜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[t._v("#")]),t._v(" 个人公众号：黄小斜")]),t._v(" "),n("p",[t._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),t._v(" "),n("p",[n("strong",[t._v("程序员3T技术学习资源：")]),t._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),n("strong",[t._v("“资料”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})]),t._v(" "),n("p",[t._v("​")])])}),[],!1,null,null,null);e.default=i.exports}}]);