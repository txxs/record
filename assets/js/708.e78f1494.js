(window.webpackJsonp=window.webpackJsonp||[]).push([[708],{1104:function(a,s,t){"use strict";t.r(s);var r=t(13),v=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("类加载器是如何定位具体的类文件并读取的呢?")]),a._v(" "),t("h1",{attrs:{id:"_1-类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-类加载器"}},[a._v("#")]),a._v(" 1 类加载器")]),a._v(" "),t("p",[a._v("在类加载器家族中存在着类似人类社会的权力等级制度：")]),a._v(" "),t("h2",{attrs:{id:"_1-1-bootstrap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-bootstrap"}},[a._v("#")]),a._v(" 1.1 "),t("code",[a._v("Bootstrap")])]),a._v(" "),t("p",[a._v("由C/C++实现，启动类加载器，属最高层，JVM启动时创建，通常由与os相关的本地代码实现，是最根基的类加载器。")]),a._v(" "),t("h3",{attrs:{id:"jdk8-时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-时"}},[a._v("#")]),a._v(" JDK8 时")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("需要注意的是")]),a._v(",Bootstrap ClassLoader智慧加载特定名称的类库,比如rt.jar.这意味我们自定义的jar扔到"),t("code",[a._v("<JAVA_HOME>\\jre\\lib")]),a._v("也不会被加载.")])]),a._v(" "),t("p",[a._v("负责将"),t("code",[a._v("<JAVA_ HOME>/jre/lib")]),a._v("或"),t("code",[a._v("- Xbootclasspath")]),a._v("参数指定的路径中的，且是虚拟机识别的类库加载到内存中(按照名字识别,比如rt.jar，对于不能识别的文件不予装载)，比如：")]),a._v(" "),t("ul",[t("li",[a._v("Object")]),a._v(" "),t("li",[a._v("System")]),a._v(" "),t("li",[a._v("String")]),a._v(" "),t("li",[a._v("Java运行时的rt.jar等jar包")]),a._v(" "),t("li",[a._v("系统属性sun.boot.class.path指定的目录中特定名称的jar包")])]),a._v(" "),t("p",[a._v("在JVM启动时，通过"),t("strong",[a._v("Bootstrap ClassLoader")]),a._v("加载"),t("code",[a._v("rt.jar")]),a._v("，并初始化"),t("code",[a._v("sun.misc.Launcher")]),a._v("从而创建"),t("strong",[a._v("Extension ClassLoader")]),a._v("和"),t("strong",[a._v("Application ClassLoader")]),a._v("的实例。\n查看Bootstrap ClassLoader到底初始化了那些类库:")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("URL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" urLs "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Launcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBootstrapClassPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getURLs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("URL urL "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" urLs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n           "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("urL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toExternalForm")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h3",{attrs:{id:"jdk9-后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk9-后"}},[a._v("#")]),a._v(" JDK9 后")]),a._v(" "),t("p",[a._v("负责加载启动时的基础模块类，比如：")]),a._v(" "),t("ul",[t("li",[a._v("java.base")]),a._v(" "),t("li",[a._v("java.management")]),a._v(" "),t("li",[a._v("java.xml")])]),a._v(" "),t("h2",{attrs:{id:"_1-2-platform-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-platform-classloader"}},[a._v("#")]),a._v(" 1.2 "),t("code",[a._v("Platform ClassLoader")])]),a._v(" "),t("h3",{attrs:{id:"jdk8-时extension-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-时extension-classloader"}},[a._v("#")]),a._v(" JDK8 时"),t("code",[a._v("Extension ClassLoader")])]),a._v(" "),t("p",[a._v("只有一个实例，由sun.misc.Launcher$ExtClassLoader实现：")]),a._v(" "),t("ul",[t("li",[a._v("负责加载"),t("code",[a._v("<JAVA_HOME>\\lib\\ext")]),a._v("或"),t("code",[a._v("java.ext.dirs")]),a._v("系统变量指定的路径中的所有类库")]),a._v(" "),t("li",[a._v("加载一些扩展的系统类，比如XML、加密、压缩相关的功能类等")])]),a._v(" "),t("h3",{attrs:{id:"jdk9时替换为平台类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk9时替换为平台类加载器"}},[a._v("#")]),a._v(" JDK9时替换为平台类加载器")]),a._v(" "),t("p",[a._v("加载一些平台相关的模块，比如"),t("code",[a._v("java.scripting")]),a._v("、"),t("code",[a._v("java.compiler*")]),a._v("、 "),t("code",[a._v("java.corba*")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"那为何-9-时废除替换了呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那为何-9-时废除替换了呢"}},[a._v("#")]),a._v(" 那为何 9 时废除替换了呢？")]),a._v(" "),t("p",[a._v("JDK8 的主要加载 jre lib 的ext，扩展 jar 包时使用，这样操作并不推荐，所以废除。而 JDK9 有了模块化，更无需这种扩展加载器。")]),a._v(" "),t("h2",{attrs:{id:"_1-3-application-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-application-classloader"}},[a._v("#")]),a._v(" 1.3 "),t("code",[a._v("Application ClassLoader")])]),a._v(" "),t("p",[a._v("只有一个实例,由"),t("code",[a._v("sun.misc.Launcher$AppClassLoader")]),a._v("实现。")]),a._v(" "),t("h3",{attrs:{id:"jdk8-时-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-时-2"}},[a._v("#")]),a._v(" JDK8 时")]),a._v(" "),t("p",[a._v("负责加载系统环境变量ClassPath或者系统属性java.class.path指定目录下的所有类库。\n如果应用程序中没有定义自己的加载器，则该加载器也就是默认的类加载器。该加载器可以通过java.lang.ClassLoader.getSystemClassLoader获取。")]),a._v(" "),t("h3",{attrs:{id:"jdk9-后-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk9-后-2"}},[a._v("#")]),a._v(" JDK9 后")]),a._v(" "),t("p",[a._v("应用程序类加载器，用于加载应用级别的模块，比如：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("jdk.compiler")])]),a._v(" "),t("li",[t("p",[a._v("jdk.jartool")])]),a._v(" "),t("li",[t("p",[a._v("jdk.jshell\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021011914324377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})])]),a._v(" "),t("li",[t("p",[a._v("classpath路径中的所有类库")])])]),a._v(" "),t("p",[a._v("第二、三层类加载器为Java语言实现，用户也可以")]),a._v(" "),t("h2",{attrs:{id:"_1-4-自定义类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-自定义类加载器"}},[a._v("#")]),a._v(" 1.4 自定义类加载器")]),a._v(" "),t("p",[a._v("用户自定义的加载器，是"),t("code",[a._v("java.lang.ClassLoader")]),a._v("的子类，用户可以定制类的加载方式;只不过自定义类加载器其加载的顺序是在所有系统类加载器的最后。")]),a._v(" "),t("h2",{attrs:{id:"_1-5-thread-context-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-thread-context-classloader"}},[a._v("#")]),a._v(" 1.5 Thread Context ClassLoader")]),a._v(" "),t("p",[a._v("每个线程都有一个类加载器(jdk 1.2后引入),称之为Thread Context ClassLoader,如果线程创建时没有设置,则默认从父线程中继承一个,如果在应用全局内都没有设置,则所有Thread Context ClassLoader为Application ClassLoader.可通过Thread.currentThread().setContextClassLoader(ClassLoader)来设置,通过Thread.currentThread().getContextClassLoader()来获取.")]),a._v(" "),t("p",[a._v("线程上下文加载器有什么用?\n该类加载器容许父类加载器通过子类加载器加载所需要的类库,也就是打破了我们下文所说的双亲委派模型。\n这有什么好处呢?\n利用线程上下文加载器，我们能够实现所有的代码热替换,热部署,Android中的热更新原理也是借鉴如此。")]),a._v(" "),t("h1",{attrs:{id:"_2-验证类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-验证类加载器"}},[a._v("#")]),a._v(" 2 验证类加载器")]),a._v(" "),t("h2",{attrs:{id:"_2-1-查看本地类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-查看本地类加载器"}},[a._v("#")]),a._v(" 2.1 查看本地类加载器")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LWM2YTlkN2YwOTEwZDNiZGMucG5n",alt:""}}),a._v("\n在JDK8环境中，执行结果如下\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LWExYjA3N2UzYTRiYzRhZjMucG5n",alt:""}}),a._v("\nAppClassLoader的Parent为Bootstrap，它是通过C/C++实现的，并不存在于JVM体系内，所以输出为 null。")]),a._v(" "),t("h1",{attrs:{id:"类加载器的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器的特点"}},[a._v("#")]),a._v(" 类加载器的特点")]),a._v(" "),t("ul",[t("li",[a._v('类加载器并不需要等到某个类"首次主动使用”的时候才加载它，JVM规范允许类加载器在预料到某个类将要被使用的时候就预先加载它。')]),a._v(" "),t("li",[a._v("Java程序不能直接引用启动类加载器，直接设置classLoader为null，默认就使用启动类加载器")]),a._v(" "),t("li",[a._v("如果在加载的时候"),t("code",[a._v(".class")]),a._v("文件缺失,会在该类首次主动使用时通知LinkageError错误，如果一直没有被使用，就不会报错\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LWQ2ZGU1NDU2OTNmNGZjYjEucG5n",alt:""}})])]),a._v(" "),t("p",[a._v("低层次的当前类加载器，不能覆盖更高层次类加载器已经加载的类\n如果低层次的类加载器想加载一个未知类，要非常礼貌地向上逐级询问:“请问，这个类已经加载了吗?”\n被询问的高层次类加载器会自问两个问题")]),a._v(" "),t("ul",[t("li",[a._v("我是否已加载过此类")]),a._v(" "),t("li",[a._v("如果没有，是否可以加载此类")])]),a._v(" "),t("p",[a._v("只有当所有高层次类加载器在两个问题的答案均为“否”时，才可以让当前类加载器加载这个未知类\n左侧绿色箭头向上逐级询问是否已加载此类，直至"),t("code",[a._v("Bootstrap ClassLoader")]),a._v(",然后向下逐级尝试是否能够加载此类，如果都加载不了，则通知发起加载请求的当前类加载器，准予加载\n在右侧的三个小标签里，列举了此层类加载器主要加载的代表性类库，事实上不止于此")]),a._v(" "),t("p",[a._v("通过如下代码可以查看Bootstrap 所有已加载类库\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LTg0MGEwNDUwNWI1Y2I1YTgucG5n",alt:""}}),a._v("\n执行结果\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LWNiNTdkZGNmZjBmZDI0ZWMucG5n",alt:""}})]),a._v(" "),t("p",[a._v("Bootstrap加载的路径可以追加，不建议修改或删除原有加载路径\n在JVM中增加如下启动参数，则能通过"),t("code",[a._v("Class.forName")]),a._v("正常读取到指定类，说明此参数可以增加Bootstrap的类加载路径:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("-Xbootclasspath/a:/Users/sss/book/ easyCoding/byJdk11/src\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果想在启动时观察加载了哪个jar包中的哪个类，可以增加")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("-XX:+TraceClassLoading\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("此参数在解决类冲突时非常实用，毕竟不同的JVM环境对于加载类的顺序并非是一致的\n有时想观察特定类的加载上下文，由于加载的类数量众多，调试时很难捕捉到指定类的加载过程，这时可以使用条件断点功能\n比如，想查看HashMap的加载过程，在loadClass处打个断点，并且在condition框内输入如图\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LTZhMjk0YjhhNzVkYWM4MTIucG5n",alt:"设置条件断点"}})]),a._v(" "),t("h3",{attrs:{id:"jvm如何确立每个类在jvm的唯一性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm如何确立每个类在jvm的唯一性"}},[a._v("#")]),a._v(" JVM如何确立每个类在JVM的唯一性")]),a._v(" "),t("p",[a._v("类的全限定名和加载这个类的类加载器的ID")]),a._v(" "),t("p",[a._v("在学习了类加载器的实现机制后，知道双亲委派模型并非强制模型，用户可以自定义类加载器，在什么情况下需要自定义类加载器呢?")]),a._v(" "),t("ul",[t("li",[a._v("隔离加载类\n在某些框架内进行中间件与应用的模块隔离，把类加载到不同的环境\n比如，阿里内某容器框架通过自定义类加载器确保应用中依赖的jar包不会影响到中间件运行时使用的jar包")]),a._v(" "),t("li",[a._v("修改类加载方式\n类的加载模型并非强制，除Bootstrap外，其他的加载并非一定要引入，或者根据实际情况在某个时间点进行按需进行动态加载")]),a._v(" "),t("li",[a._v("扩展加载源\n比如从数据库、网络，甚至是电视机机顶盒进行加载")]),a._v(" "),t("li",[a._v("防止源码泄露\nJava代码容易被编译和篡改，可以进行编译加密。那么类加载器也需要自定义，还原加密的字节码。")])]),a._v(" "),t("p",[a._v("实现自定义类加载器的步骤")]),a._v(" "),t("ul",[t("li",[a._v("继承ClassLoader")]),a._v(" "),t("li",[a._v("重写findClass()方法")]),a._v(" "),t("li",[a._v("调用defineClass()方法")])]),a._v(" "),t("p",[a._v("一个简单的类加载器实现的示例代码如下\n"),t("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80Njg1OTY4LTdiYjk1NGI1NThlOTAwMzAucG5n",alt:""}})]),a._v(" "),t("p",[a._v("由于中间件一般都有自己的依赖jar包，在同一个工程内引用多个框架时，往往被迫进行类的仲裁。按某种规则jar包的版本被统一指定， 导致某些类存在包路径、类名相同的情况，就会引起类冲突，导致应用程序出现异常。\n主流的容器类框架都会自定义类加载器，实现不同中间件之间的类隔离，有效避免了类冲突。")])])}),[],!1,null,null,null);s.default=v.exports}}]);