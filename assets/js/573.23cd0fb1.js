(window.webpackJsonp=window.webpackJsonp||[]).push([[573],{966:function(a,t,e){"use strict";e.r(t);var r=e(13),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#iterator"}},[a._v("Iterator")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#javautiliterator"}},[a._v("java.util.Iterator")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%90%84%E4%B8%AA%E9%9B%86%E5%90%88%E7%9A%84iterator%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[a._v("各个集合的Iterator的实现")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#fail-fast%E6%9C%BA%E5%88%B6"}},[a._v("fail-fast机制")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#fail-fast%E7%A4%BA%E4%BE%8B"}},[a._v("fail-fast示例")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#fail-fast%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0"}},[a._v("fail-fast产生原因")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#fail-fast%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"}},[a._v("fail-fast解决办法")])])])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#comparable-%E5%92%8C-comparator"}},[a._v("Comparable 和 Comparator")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#comparable"}},[a._v("Comparable")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#comparator"}},[a._v("Comparator")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#java8%E4%B8%AD%E4%BD%BF%E7%94%A8lambda%E5%AE%9E%E7%8E%B0%E6%AF%94%E8%BE%83%E5%99%A8"}},[a._v("Java8中使用lambda实现比较器")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[a._v("总结")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])])])]),a._v(" "),e("p",[a._v("本文参考 cmsblogs.com/p=1185")]),a._v(" "),e("p",[a._v("《Java集合详解系列》是我在完成夯实Java基础篇的系列博客后准备开始整理的新系列文章。\n为了更好地诠释知识点，形成体系文章，本系列文章整理了很多优质的博客内容，如有侵权请联系我，一定删除。")]),a._v(" "),e("p",[a._v("这些文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),e("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),e("blockquote",[e("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),e("p",[a._v("喜欢的话麻烦点下Star、fork哈")]),a._v(" "),e("p",[a._v("本系列文章将整理于我的个人博客：")]),a._v(" "),e("blockquote",[e("p",[a._v("www.how2playlife.com")])]),a._v(" "),e("p",[a._v("今天我们来探索一下LIterator，fail-fast机制与比较器的源码。")]),a._v(" "),e("h2",{attrs:{id:"iterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterator"}},[a._v("#")]),a._v(" Iterator")]),a._v(" "),e("p",[a._v("迭代对于我们搞Java的来说绝对不陌生。我们常常使用JDK提供的迭代接口进行Java集合的迭代。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Iterator iterator = list.iterator();\n        while(iterator.hasNext()){\n            String string = iterator.next();\n            do something\n        }\n")])])]),e("p",[a._v("迭代其实我们可以简单地理解为遍历，是一个标准化遍历各类容器里面的所有对象的方法类，它是一个很典型的设计模式。Iterator模式是用于遍历集合类的标准访问方法。")]),a._v(" "),e("p",[a._v("它可以把访问逻辑从不同类型的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。 在没有迭代器时我们都是这么进行处理的。如下：")]),a._v(" "),e("p",[a._v("对于数组我们是使用下标来进行处理的")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("int[] arrays = new int[10];\n   for(int i = 0 ; i  arrays.length ; i++){\n       int a = arrays[i];\n       do something\n   }\n")])])]),e("p",[a._v("对于ArrayList是这么处理的")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("ListString list = new ArrayListString();\n   for(int i = 0 ; i  list.size() ;  i++){\n      String string = list.get(i);\n      do something\n   }\n")])])]),e("p",[a._v("对于这两种方式，我们总是都事先知道集合的内部结构，访问代码和集合本身是紧密耦合的，无法将访问逻辑从集合类和客户端代码中分离出来。同时每一种集合对应一种遍历方法，客户端代码无法复用。")]),a._v(" "),e("p",[a._v("在实际应用中如何需要将上面将两个集合进行整合是相当麻烦的。所以为了解决以上问题，Iterator模式腾空出世，它总是用同一种逻辑来遍历集合。")]),a._v(" "),e("p",[a._v("使得客户端自身不需要来维护集合的内部结构，所有的内部状态都由Iterator来维护。客户端从不直接和集合类打交道，它总是控制Iterator，向它发送向前，向后，取当前元素的命令，就可以间接遍历整个集合。")]),a._v(" "),e("p",[a._v("上面只是对Iterator模式进行简单的说明，下面我们看看Java中Iterator接口，看他是如何来进行实现的。")]),a._v(" "),e("h3",{attrs:{id:"java-util-iterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-util-iterator"}},[a._v("#")]),a._v(" java.util.Iterator")]),a._v(" "),e("p",[a._v("在Java中Iterator为一个接口，它只提供了迭代了基本规则，在JDK中他是这样定义的：对 collection 进行迭代的迭代器。迭代器取代了 Java Collections Framework 中的 Enumeration。迭代器与枚举有两点不同：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("1、迭代器允许调用者利用定义良好的语义在迭代期间从迭代器所指向的 collection 移除元素。\n\n2、方法名称得到了改进。\n")])])]),e("p",[a._v("其接口定义如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface Iterator {\n　　boolean hasNext();\n　　Object next();\n　　void remove();\n}\n")])])]),e("p",[a._v("其中：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Object next()：返回迭代器刚越过的元素的引用，返回值是Object，需要强制转换成自己需要的类型\n\nboolean hasNext()：判断容器内是否还有可供访问的元素\n\nvoid remove()：删除迭代器刚越过的元素\n")])])]),e("p",[a._v("对于我们而言，我们只一般只需使用next()、hasNext()两个方法即可完成迭代。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("for(Iterator it = c.iterator(); it.hasNext(); ) {\n　　Object o = it.next();\n　　 do something\n}\n")])])]),e("p",[a._v("==前面阐述了Iterator有一个很大的优点,就是我们不必知道集合的内部结果,集合的内部结构、状态由Iterator来维持，通过统一的方法hasNext()、next()来判断、获取下一个元素，至于具体的内部实现我们就不用关心了。==")]),a._v(" "),e("p",[a._v("但是作为一个合格的程序员我们非常有必要来弄清楚Iterator的实现。下面就ArrayList的源码进行分析分析。")]),a._v(" "),e("h3",{attrs:{id:"各个集合的iterator的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各个集合的iterator的实现"}},[a._v("#")]),a._v(" 各个集合的Iterator的实现")]),a._v(" "),e("p",[a._v("下面就ArrayList的Iterator实现来分析，其实如果我们理解了ArrayList、Hashset、TreeSet的数据结构，内部实现，对于他们是如何实现Iterator也会胸有成竹的。因为ArrayList的内部实现采用数组，所以我们只需要记录相应位置的索引即可，其方法的实现比较简单。")]),a._v(" "),e("p",[a._v("ArrayList的Iterator实现")]),a._v(" "),e("p",[a._v("在ArrayList内部首先是定义一个内部类Itr，该内部类实现Iterator接口，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private class Itr implements IteratorE {\n    do something\n}\n而ArrayList的iterator()方法实现：\n\npublic IteratorE iterator() {\n        return new Itr();\n    }\n")])])]),e("p",[a._v("所以通过使用ArrayList.iterator()方法返回的是Itr()内部类，所以现在我们需要关心的就是Itr()内部类的实现：")]),a._v(" "),e("p",[a._v("在Itr内部定义了三个int型的变量：cursor、lastRet、expectedModCount。其中cursor表示下一个元素的索引位置，lastRet表示上一个元素的索引位置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("        int cursor;             \n        int lastRet = -1;     \n        int expectedModCount = modCount;\n")])])]),e("p",[a._v("从cursor、lastRet定义可以看出，lastRet一直比cursor少一所以hasNext()实现方法异常简单，只需要判断cursor和lastRet是否相等即可。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public boolean hasNext() {\n    return cursor != size;\n}\n")])])]),e("p",[a._v("对于next()实现其实也是比较简单的，只要返回cursor索引位置处的元素即可，然后修改cursor、lastRet即可。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public E next() {\n    checkForComodification();\n    int i = cursor;    记录索引位置\n    if (i = size)    如果获取元素大于集合元素个数，则抛出异常\n        throw new NoSuchElementException();\n    Object[] elementData = ArrayList.this.elementData;\n    if (i = elementData.length)\n        throw new ConcurrentModificationException();\n    cursor = i + 1;      cursor + 1\n    return (E) elementData[lastRet = i];  lastRet + 1 且返回cursor处元素\n}\n")])])]),e("p",[a._v("checkForComodification()主要用来判断集合的修改次数是否合法，即用来判断遍历过程中集合是否被修改过。")]),a._v(" "),e("p",[a._v("。modCount用于记录ArrayList集合的修改次数，初始化为0，，每当集合被修改一次（结构上面的修改，内部update不算），如add、remove等方法，modCount + 1，所以如果modCount不变，则表示集合内容没有被修改。")]),a._v(" "),e("p",[a._v("该机制主要是用于实现ArrayList集合的快速失败机制，在Java的集合中，较大一部分集合是存在快速失败机制的，这里就不多说，后面会讲到。")]),a._v(" "),e("p",[a._v("所以要保证在遍历过程中不出错误，我们就应该保证在遍历过程中不会对集合产生结构上的修改（当然remove方法除外），出现了异常错误，我们就应该认真检查程序是否出错而不是catch后不做处理。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n对于remove()方法的是实现，它是调用ArrayList本身的remove()方法删除lastRet位置元素，然后修改modCount即可。\n\npublic void remove() {\n    if (lastRet  0)\n        throw new IllegalStateException();\n    checkForComodification();\n\n    try {\n        ArrayList.this.remove(lastRet);\n        cursor = lastRet;\n        lastRet = -1;\n        expectedModCount = modCount;\n    } catch (IndexOutOfBoundsException ex) {\n        throw new ConcurrentModificationException();\n    }\n}\n")])])]),e("p",[a._v("这里就对ArrayList的Iterator实现讲解到这里，对于Hashset、TreeSet等集合的Iterator实现，各位如果感兴趣可以继续研究，个人认为在研究这些集合的源码之前，有必要对该集合的数据结构有清晰的认识，这样会达到事半功倍的效果！！！！")]),a._v(" "),e("h3",{attrs:{id:"fail-fast机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast机制"}},[a._v("#")]),a._v(" fail-fast机制")]),a._v(" "),e("p",[a._v("这部分参考http://cmsblogs.com/p=1220")]),a._v(" "),e("p",[a._v("在JDK的Collection中我们时常会看到类似于这样的话：")]),a._v(" "),e("p",[a._v("例如，ArrayList")]),a._v(" "),e("p",[a._v("注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出ConcurrentModificationException。\n因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。")]),a._v(" "),e("p",[a._v("HashMap中：")]),a._v(" "),e("p",[a._v("注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。")]),a._v(" "),e("p",[a._v("在这两段话中反复地提到”快速失败”。那么何为”快速失败”机制呢？")]),a._v(" "),e("p",[a._v("“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。")]),a._v(" "),e("p",[a._v("记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException异常，从而产生fail-fast机制。")]),a._v(" "),e("h4",{attrs:{id:"fail-fast示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast示例"}},[a._v("#")]),a._v(" fail-fast示例")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class FailFastTest {\n    private static ListInteger list = new ArrayList();\n")])])]),e("p",[a._v("​"),e("br"),a._v("\n@desc线程one迭代list\n@Projecttest\n@fileFailFastTest.java\n@Authrochenssy\n@data2014年7月26日")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("    private static class threadOne extends Thread{\n        public void run() {\n            IteratorInteger iterator = list.iterator();\n            while(iterator.hasNext()){\n                int i = iterator.next();\n                System.out.println(ThreadOne 遍历 + i);\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n")])])]),e("p",[a._v("​"),e("br"),a._v("\n@desc当i == 3时，修改list\n@Projecttest\n@fileFailFastTest.java\n@Authrochenssy\n@data2014年7月26日")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("    private static class threadTwo extends Thread{\n        public void run(){\n            int i = 0 ; \n            while(i  6){\n                System.out.println(ThreadTwo run： + i);\n                if(i == 3){\n                    list.remove(i);\n                }\n                i++;\n            }\n        }\n    }\n    \n    public static void main(String[] args) {\n        for(int i = 0 ; i  10;i++){\n            list.add(i);\n        }\n        new threadOne().start();\n        new threadTwo().start();\n    }\n}\n")])])]),e("p",[a._v("运行结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("ThreadOne 遍历0\nThreadTwo run：0\nThreadTwo run：1\nThreadTwo run：2\nThreadTwo run：3\nThreadTwo run：4\nThreadTwo run：5\nException in thread Thread-0 java.util.ConcurrentModificationException\n    at java.util.ArrayList$Itr.checkForComodification(Unknown Source)\n    at java.util.ArrayList$Itr.next(Unknown Source)\n    at test.ArrayListTest$threadOne.run(ArrayListTest.java23)\n")])])]),e("h4",{attrs:{id:"fail-fast产生原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast产生原因"}},[a._v("#")]),a._v(" fail-fast产生原因")]),a._v(" "),e("p",[a._v("通过上面的示例和讲解，我初步知道fail-fast产生的原因就在于程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。")]),a._v(" "),e("p",[a._v("要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。")]),a._v(" "),e("p",[a._v("诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。下面我将以ArrayList为例进一步分析fail-fast产生的原因。")]),a._v(" "),e("p",[a._v("从前面我们知道fail-fast是在操作迭代器时产生的。现在我们来看看ArrayList中迭代器的源代码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private class Itr implements IteratorE {\n        int cursor;\n        int lastRet = -1;\n        int expectedModCount = ArrayList.this.modCount;\n\n        public boolean hasNext() {\n            return (this.cursor != ArrayList.this.size);\n        }\n\n        public E next() {\n            checkForComodification();\n             省略此处代码 \n        }\n\n        public void remove() {\n            if (this.lastRet  0)\n                throw new IllegalStateException();\n            checkForComodification();\n             省略此处代码 \n        }\n\n        final void checkForComodification() {\n            if (ArrayList.this.modCount == this.expectedModCount)\n                return;\n            throw new ConcurrentModificationException();\n        }\n    }\n")])])]),e("p",[a._v("从上面的源代码我们可以看出，迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount  若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。")]),a._v(" "),e("p",[a._v("expectedModCount 是在Itr中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是modCount。modCount是在 AbstractList 中定义的，为全局变量：")]),a._v(" "),e("p",[a._v("protected transient int modCount = 0;\n那么他什么时候因为什么原因而发生改变呢？请看ArrayList的源码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public boolean add(E paramE) {\n    ensureCapacityInternal(this.size + 1);\n     省略此处代码 \n}\n\nprivate void ensureCapacityInternal(int paramInt) {\n    if (this.elementData == EMPTY_ELEMENTDATA)\n        paramInt = Math.max(10, paramInt);\n    ensureExplicitCapacity(paramInt);\n}\n\nprivate void ensureExplicitCapacity(int paramInt) {\n    this.modCount += 1;    修改modCount\n     省略此处代码 \n}\n")])])]),e("p",[a._v("public boolean remove(Object paramObject) {\nint i;\nif (paramObject == null)\nfor (i = 0; i  this.size; ++i) {\nif (this.elementData[i] != null)\ncontinue;\nfastRemove(i);\nreturn true;\n}\nelse\nfor (i = 0; i  this.size; ++i) {\nif (!(paramObject.equals(this.elementData[i])))\ncontinue;\nfastRemove(i);\nreturn true;\n}\nreturn false;\n}")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private void fastRemove(int paramInt) {\n    this.modCount += 1;   修改modCount\n     省略此处代码 \n}\n\npublic void clear() {\n    this.modCount += 1;    修改modCount\n     省略此处代码 \n}\n")])])]),e("p",[a._v("从上面的源代码我们可以看出，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList元素的个数的方法都会导致modCount的改变。")]),a._v(" "),e("p",[a._v("所以我们这里可以初步判断由于expectedModCount 得值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。知道产生fail-fast产生的根本原因了，我们可以有如下场景：")]),a._v(" "),e("p",[a._v("有两个线程（线程A，线程B），其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是modCount的值发生改变（modCount + 1 = N + 1）。")]),a._v(" "),e("p",[a._v("线程A继续遍历执行next方法时，通告checkForComodification方法发现expectedModCount  = N  ，而modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。")]),a._v(" "),e("p",[a._v("所以，直到这里我们已经完全了解了fail-fast产生的根本原因了。知道了原因就好找解决办法了。")]),a._v(" "),e("h4",{attrs:{id:"fail-fast解决办法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast解决办法"}},[a._v("#")]),a._v(" fail-fast解决办法")]),a._v(" "),e("p",[a._v("通过前面的实例、源码分析，我想各位已经基本了解了fail-fast的机制，下面我就产生的原因提出解决方案。这里有两种解决方案：")]),a._v(" "),e("p",[a._v("方案一：在遍历过程中所有涉及到改变modCount值得地方全部加上synchronized或者直接使用Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。")]),a._v(" "),e("p",[a._v("方案二：使用CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。")]),a._v(" "),e("p",[a._v("CopyOnWriteArrayList为何物？ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。")]),a._v(" "),e("p",[a._v("1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。")]),a._v(" "),e("p",[a._v("2：当遍历操作的数量大大超过可变操作的数量时。遇到这两种情况使用CopyOnWriteArrayList来替代ArrayList再适合不过了。那么为什么CopyOnWriterArrayList可以替代ArrayList呢？")]),a._v(" "),e("p",[a._v("第一、CopyOnWriterArrayList的无论是从数据结构、定义都和ArrayList一样。它和ArrayList一样，同样是实现List接口，底层使用数组实现。在方法上也包含add、remove、clear、iterator等方法。")]),a._v(" "),e("p",[a._v("第二、CopyOnWriterArrayList根本就不会产生ConcurrentModificationException异常，也就是它使用迭代器完全不会产生fail-fast机制。请看：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private static class COWIteratorE implements ListIteratorE {\n         省略此处代码 \n        public E next() {\n            if (!(hasNext()))\n                throw new NoSuchElementException();\n            return this.snapshot[(this.cursor++)];\n        }\n\n         省略此处代码 \n    }\n")])])]),e("p",[a._v("CopyOnWriterArrayList的方法根本就没有像ArrayList中使用checkForComodification方法来判断expectedModCount 与 modCount 是否相等。它为什么会这么做，凭什么可以这么做呢？我们以add方法为例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public boolean add(E paramE) {\n        ReentrantLock localReentrantLock = this.lock;\n        localReentrantLock.lock();\n        try {\n            Object[] arrayOfObject1 = getArray();\n            int i = arrayOfObject1.length;\n            Object[] arrayOfObject2 = Arrays.copyOf(arrayOfObject1, i + 1);\n            arrayOfObject2[i] = paramE;\n            setArray(arrayOfObject2);\n            int j = 1;\n            return j;\n        } finally {\n            localReentrantLock.unlock();\n        }\n    }\n\n\n  \n    final void setArray(Object[] paramArrayOfObject) {\n        this.array = paramArrayOfObject;\n    }\n")])])]),e("p",[a._v("CopyOnWriterArrayList的add方法与ArrayList的add方法有一个最大的不同点就在于，下面三句代码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Object[] arrayOfObject2 = Arrays.copyOf(arrayOfObject1, i + 1);\narrayOfObject2[i] = paramE;\nsetArray(arrayOfObject2);\n")])])]),e("p",[a._v("就是这三句代码使得CopyOnWriterArrayList不会抛ConcurrentModificationException异常。他们所展现的魅力就在于copy原来的array，再在copy数组上进行add操作，这样做就完全不会影响COWIterator中的array了。")]),a._v(" "),e("p",[a._v("所以CopyOnWriterArrayList所代表的核心概念就是：任何对array在结构上有所改变的操作（add、remove、clear等），CopyOnWriterArrayList都会copy现有的数据，再在copy的数据上修改，这样就不会影响COWIterator中的数据了，修改完成之后改变原有数据的引用即可。同时这样造成的代价就是产生大量的对象，同时数组的copy也是相当有损耗的。")]),a._v(" "),e("h1",{attrs:{id:"comparable-和-comparator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator"}},[a._v("#")]),a._v(" Comparable 和 Comparator")]),a._v(" "),e("p",[a._v("Java 中为我们提供了两种比较机制：Comparable 和 Comparator，他们之间有什么区别呢？今天来了解一下。")]),a._v(" "),e("h2",{attrs:{id:"comparable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparable"}},[a._v("#")]),a._v(" Comparable")]),a._v(" "),e("p",[a._v("Comparable 在 java.lang包下，是一个接口，内部只有一个方法 compareTo()：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface ComparableT {\n    public int compareTo(T o);\n}\n")])])]),e("p",[a._v("Comparable 可以让实现它的类的对象进行比较，具体的比较规则是按照 compareTo 方法中的规则进行。这种顺序称为 自然顺序。")]),a._v(" "),e("p",[a._v("compareTo 方法的返回值有三种情况：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("e1.compareTo(e2)  0 即 e1  e2\ne1.compareTo(e2) = 0 即 e1 = e2\ne1.compareTo(e2)  0 即 e1  e2\n")])])]),e("p",[a._v("注意：")]),a._v(" "),e("p",[a._v("1.由于 null 不是一个类，也不是一个对象，因此在重写 compareTo 方法时应该注意 e.compareTo(null) 的情况，即使 e.equals(null) 返回 false，compareTo 方法也应该主动抛出一个空指针异常 NullPointerException。")]),a._v(" "),e("p",[a._v("2.Comparable 实现类重写 compareTo 方法时一般要求 e1.compareTo(e2) == 0 的结果要和 e1.equals(e2) 一致。这样将来使用 SortedSet 等根据类的自然排序进行排序的集合容器时可以保证保存的数据的顺序和想象中一致。\n有人可能好奇上面的第二点如果违反了会怎样呢？")]),a._v(" "),e("p",[a._v("举个例子，如果你往一个 SortedSet 中先后添加两个对象 a 和 b，a b 满足 (!a.equals(b) && a.compareTo(b) == 0)，同时也没有另外指定个 Comparator，那当你添加完 a 再添加 b 时会添加失败返回 false, SortedSet 的 size 也不会增加，因为在 SortedSet 看来它们是相同的，而 SortedSet 中是不允许重复的。")]),a._v(" "),e("p",[a._v("实际上所有实现了 Comparable 接口的 Java 核心类的结果都和 equlas 方法保持一致。\n实现了 Comparable 接口的 List 或则数组可以使用 Collections.sort() 或者 Arrays.sort() 方法进行排序。")]),a._v(" "),e("p",[a._v("实现了 Comparable 接口的对象才能够直接被用作 SortedMap (SortedSet) 的 key，要不然得在外边指定 Comparator 排序规则。")]),a._v(" "),e("p",[a._v("因此自己定义的类如果想要使用有序的集合类，需要实现 Comparable 接口，比如：")]),a._v(" "),e("p",[a._v("description 测试用的实体类 书, 实现了 Comparable 接口，自然排序")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("  author shixinzhang\n  br\n  data 1052016\n\npublic class BookBean implements Serializable, Comparable {\n    private String name;\n    private int count;\n\n\npublic BookBean(String name, int count) {\n    this.name = name;\n    this.count = count;\n}\n\npublic String getName() {\n    return name;\n}\n\npublic void setName(String name) {\n    this.name = name;\n}\n\npublic int getCount() {\n    return count;\n}\n\npublic void setCount(int count) {\n    this.count = count;\n}\n")])])]),e("p",[a._v("​"),e("br"),a._v("\n重写 equals\n@param o\n@return")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof BookBean)) return false;\n\n    BookBean bean = (BookBean) o;\n\n    if (getCount() != bean.getCount()) return false;\n    return getName().equals(bean.getName());\n\n}\n")])])]),e("p",[a._v("​"),e("br"),a._v("\n重写 hashCode 的计算方法\n根据所有属性进行 迭代计算，避免重复\n计算 hashCode 时 计算因子 31 见得很多，是一个质数，不能再被除\n@return")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("@Override\npublic int hashCode() {\n    调用 String 的 hashCode(), 唯一表示一个字符串内容\n    int result = getName().hashCode();\n    乘以 31, 再加上 count\n    result = 31  result + getCount();\n    return result;\n}\n\n@Override\npublic String toString() {\n    return BookBean{ +\n            name=' + name + ''' +\n            , count= + count +\n            '}';\n}\n")])])]),e("p",[a._v("​"),e("br"),a._v("\n当向 TreeSet 中添加 BookBean 时，会调用这个方法进行排序\n@param another\n@return")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("@Override\npublic int compareTo(Object another) {\n    if (another instanceof BookBean){\n        BookBean anotherBook = (BookBean) another;\n        int result;\n\n        比如这里按照书价排序\n        result = getCount() - anotherBook.getCount();     \n\n      或者按照 String 的比较顺序\n      result = getName().compareTo(anotherBook.getName());\n\n        if (result == 0){   当书价一致时，再对比书名。 保证所有属性比较一遍\n            result = getName().compareTo(anotherBook.getName());\n        }\n        return result;\n    }\n     一样就返回 0\n    return 0;\n}\n")])])]),e("p",[a._v("上述代码还重写了 equlas(), hashCode() 方法，自定义的类将来可能会进行比较时，建议重写这些方法。")]),a._v(" "),e("p",[a._v("这里我想表达的是在有些场景下 equals 和 compareTo 结果要保持一致，这时候不重写 equals，使用 Object.equals 方法得到的结果会有问题，比如说 HashMap.put() 方法，会先调用 key 的 equals 方法进行比较，然后才调用 compareTo。")]),a._v(" "),e("p",[a._v("后面重写 compareTo 时，要判断某个相同时对比下一个属性，把所有属性都比较一次。")]),a._v(" "),e("h3",{attrs:{id:"comparator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparator"}},[a._v("#")]),a._v(" Comparator")]),a._v(" "),e("p",[a._v("首先认识一下Comparator：")]),a._v(" "),e("p",[a._v("Comparator 是javase中的接口，位于java.util包下，该接口抽象度极高，有必要掌握该接口的使用\n大多数文章告诉大家Comparator是用来排序，但我想说排序是Comparator能实现的功能之一，他不仅限于排序")]),a._v(" "),e("p",[a._v("排序例子：\n题目描述\n输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。")]),a._v(" "),e("p",[a._v("代码实现：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n \npublic class Solution {\n    public String PrintMinNumber(int [] s) {\n        if(s==null) return null;\n        String s1="";\n        ArrayList<Integer> list=new ArrayList<Integer>();\n        for(int i=0;i<s.length;i++){\n             list.add(s[i]);\n        }\n        Collections.sort(list,new Comparator<Integer>(){\n            public int compare(Integer str1,Integer str2){\n                String s1=str1+""+str2;\n                String s2=str2+""+str1;\n                return s1.compareTo(s2);\n            }\n        });\n         for(int j:list){\n                s1+=j;\n             }\n        return s1;\n    }\n}\n')])])]),e("p"),a._v(" "),e("p",[a._v("一般需要做比较的逻辑都可以使用的上Comparator，最常用的场景就是排序和分组，排序常使用Arrays和Collections的sort方法，而分组则可以使用提供的divider方法。")]),a._v(" "),e("p",[a._v("排序和分组的区别在于: \n排序时，两个对象比较的结果有三种：大于，等于，小于。 \n分组时，两个对象比较的结果只有两种：等于(两个对象属于同一组)，不等于(两个对象属于不同组)")]),a._v(" "),e("h3",{attrs:{id:"java8中使用lambda实现比较器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java8中使用lambda实现比较器"}},[a._v("#")]),a._v(" Java8中使用lambda实现比较器")]),a._v(" "),e("p",[a._v("今天先看看Lambda 表达式的简单使用：\n首先：Lambda表达式的基本语法：(parameters) -> expression或（请注意语句的花括号）\n(parameters) -> { statements; }")]),a._v(" "),e("p",[a._v("第一感觉就是这个箭头感觉有点怪，不过多用几次习惯就好，它主要是为了把参数列表与Lambda主体分隔开，箭头左边的是参数列表，右边的是Lambda主体。注意：Lambda表达式可以包含多行语句。\n在用Lambda 之前，我们先看看之前写比较器的写法")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Comparator<Developer> byName = new Comparator<Developer>() {\n    @Override\n    public int compare(Developer o1, Developer o2) {\n        return o1.getName().compareTo(o2.getName());\n    }\n};\n")])])]),e("p",[a._v("感觉也不是很复杂，没几行代码，再来看看Lambda 表达式的写法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Comparator<Developer> byName =\n    (Developer o1, Developer o2)->o1.getName().compareTo(o2.getName());\n")])])]),e("p",[a._v("比之前要简单许多有木有。\n下面再来看看排序功能示例：\n先用Collections.sort如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class TestSorting {\n    public static void main(String[] args) {\n        List<Developer> listDevs = getDevelopers();\n        System.out.println("Before Sort");\n        for (Developer developer : listDevs) {\n            System.out.println(developer);\n        }\n        //安装年龄排序\n        Collections.sort(listDevs, new Comparator<Developer>() {\n            @Override\n            public int compare(Developer o1, Developer o2) {\n                return o1.getAge() - o2.getAge();\n            }\n        });\n        System.out.println("After Sort");\n        for (Developer developer : listDevs) {\n            System.out.println(developer);\n        }\n    }\n    private static List<Developer> getDevelopers() {\n        List<Developer> result = new ArrayList<Developer>();\n        result.add(new Developer("mkyong", new BigDecimal("70000"), 33));\n        result.add(new Developer("alvin", new BigDecimal("80000"), 20));\n        result.add(new Developer("jason", new BigDecimal("100000"), 10));\n        result.add(new Developer("iris", new BigDecimal("170000"), 55));\n        return result;\n    }\n}\n\n输出结果：\n\nBefore Sort\nDeveloper [name=mkyong, salary=70000, age=33]\nDeveloper [name=alvin, salary=80000, age=20]\nDeveloper [name=jason, salary=100000, age=10]\nDeveloper [name=iris, salary=170000, age=55]\n \nAfter Sort\nDeveloper [name=jason, salary=100000, age=10]\nDeveloper [name=alvin, salary=80000, age=20]\nDeveloper [name=mkyong, salary=70000, age=33]\nDeveloper [name=iris, salary=170000, age=55]\n')])])]),e("p",[a._v("看起来整个流程完全没毛病，下面再来看看Lambda的方式:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public class TestSorting {\n    public static void main(String[] args) {\n        List<Developer> listDevs = getDevelopers();\n        System.out.println("Before Sort");\n        for (Developer developer : listDevs) {\n            System.out.println(developer);\n        }\n        System.out.println("After Sort");\n        //对比上面的代码\n        listDevs.sort((Developer o1, Developer o2)->o1.getAge()-o2.getAge());\n        //这样打印感觉也不错\n        listDevs.forEach((developer)->System.out.println(developer));\n    }\n    private static List<Developer> getDevelopers() {\n        List<Developer> result = new ArrayList<Developer>();\n        result.add(new Developer("mkyong", new BigDecimal("70000"), 33));\n        result.add(new Developer("alvin", new BigDecimal("80000"), 20));\n        result.add(new Developer("jason", new BigDecimal("100000"), 10));\n        result.add(new Developer("iris", new BigDecimal("170000"), 55));\n        return result;\n    }\n}\n')])])]),e("p",[a._v("输出结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Before Sort\nDeveloper [name=mkyong, salary=70000, age=33]\nDeveloper [name=alvin, salary=80000, age=20]\nDeveloper [name=jason, salary=100000, age=10]\nDeveloper [name=iris, salary=170000, age=55]\n\nAfter Sort\nDeveloper [name=jason, salary=100000, age=10]\nDeveloper [name=alvin, salary=80000, age=20]\nDeveloper [name=mkyong, salary=70000, age=33]\nDeveloper [name=iris, salary=170000, age=55]\n")])])]),e("p",[a._v("总体来说，写法与之前有较大的改变，写的代码更少，更简便，感觉还不错。\n后续会带来更多有关Java8相关的东西，毕竟作为一只程序狗，得不停的学习才能不被淘汰。Java语言都在不停的改进更新，我们有啥理由不跟上节奏呢？\n由于时间问题这里只是一个简单的应用，想了解更多可到官网查找相关示例。")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("Java 中的两种排序方式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Comparable 自然排序。（实体类实现）\nComparator 是定制排序。（无法修改实体类时，直接在调用方创建）\n同时存在时采用 Comparator（定制排序）的规则进行比较。\n")])])]),e("p",[a._v("对于一些普通的数据类型（比如 String, Integer, Double…），它们默认实现了Comparable 接口，实现了 compareTo 方法，我们可以直接使用。")]),a._v(" "),e("p",[a._v("而对于一些自定义类，它们可能在不同情况下需要实现不同的比较策略，我们可以新创建 Comparator 接口，然后使用特定的 Comparator 实现进行比较。")]),a._v(" "),e("p",[a._v("这就是 Comparable 和 Comparator 的区别。")]),a._v(" "),e("h2",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),e("p",[a._v("https://blog.csdn.net/weixin_30363263/article/details/80867590")]),a._v(" "),e("p",[a._v("https://www.cnblogs.com/shizhijie/p/7657049.html")]),a._v(" "),e("p",[a._v("https://www.cnblogs.com/xiaweicn/p/8688216.html")]),a._v(" "),e("p",[a._v("https://cmsblogs.com/p=1185")]),a._v(" "),e("p",[a._v("https://blog.csdn.net/android_hl/article/details/53228348")]),a._v(" "),e("h2",{attrs:{id:"微信公众号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),e("h3",{attrs:{id:"java技术江湖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),e("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),e("p",[e("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),e("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),e("h3",{attrs:{id:"个人公众号-黄小斜"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),e("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),e("p",[e("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),e("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})]),a._v(" "),e("p",[a._v("​")])])}),[],!1,null,null,null);t.default=n.exports}}]);