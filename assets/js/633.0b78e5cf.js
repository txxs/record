(window.webpackJsonp=window.webpackJsonp||[]).push([[633],{1027:function(s,n,a){"use strict";a.r(n);var e=a(13),l=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("简单来说，这个类用于在多线程情况下的求和。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-06c72cfbe4dc4230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"官方文档的说明"}})]),s._v(" "),a("p",[s._v("从关键方法\n#add\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-bad92d53219ce616.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),s._v("\n包含了一个Cell数组，"),a("code",[s._v("Striped64")]),s._v("的一个内部类\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-d2d7d1ed29af4dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),s._v(" "),a("code",[s._v("Padded variant of AtomicLong supporting only raw accesses plus CAS")]),s._v("\n即"),a("code",[s._v("AtomicLong")]),s._v("的填充变体且只支持原始访问和CAS\n有一个value变量，并且提供了一个cas方法更新value值")]),s._v(" "),a("p",[s._v("接下来看第一个if语句，这句首先判断cells是否还没被初始化，并且尝试对value值进行cas操作。如果cells已经初始化并且cas操作失败，则运行if内部的语句。在进入第一个if语句之后紧接着是另外一个if，这个if有4个判断：cell[]数组是否初始化；cell[]数组虽然初始化了但是数组长度是否为0；该线程所对应的cell是否为null；尝试对该线程对应的cell单元进行cas更新是否失败，如果这些条件有一条为true，则运行最为核心的方法longAccumulate，下面列出这个方法，为了便于理解，直接将对其的分析写为注释。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-9d6da5cb49142c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"JavaDoc"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * 处理涉及初始化，调整大小，创建新Cell，和/或争用的更新案例\n  *\n  * @param x 值\n  * @param fn 更新方法\n  * @param wasUncontended 调用\n  */\n final void longAccumulate(long x, LongBinaryOperator fn, boolean wasUncontended) {\n     int h;\n     // 获取线程probe的值\n     if ((h = getProbe()) == 0) {\n         // 值为0则初始化\n         ThreadLocalRandom.current(); //强制初始化\n         h = getProbe();\n         wasUncontended = true;\n     }\n     boolean collide = false;                // True if last slot nonempt\n     for (;;) {\n         Cell[] as; Cell a; int n; long v;\n         // 这个if分支处理上述四个条件中的前两个相似，此时cells数组已经初始化了并且长度大于0\n         if ((as = cells) != null && (n = as.length) > 0) {\n             // 线程对应的cell为null\n             if ((a = as[(n - 1) & h]) == null) {\n                 // 如果busy锁未被占有\n                 if (cellsBusy == 0) {       // Try to attach new Cell\n                     // 新建一个cell\n                     Cell r = new Cell(x);   // Optimistically create\n                     // 检测busy是否为0,并且尝试锁busy\n                     if (cellsBusy == 0 && casCellsBusy()) {\n                         boolean created = false;\n                         try {               // Recheck under lock\n                             Cell[] rs; int m, j;\n                             //再次确认线程probe所对应的cell为null，将新建的cell赋值\n                             if ((rs = cells) != null &&\n                                 (m = rs.length) > 0 &&\n                                 rs[j = (m - 1) & h] == null) {\n                                 rs[j] = r;\n                                 created = true;\n                             }\n                         } finally {\n                             // 解锁\n                             cellsBusy = 0;\n                         }\n                         if (created)\n                             break;\n                         //如果失败，再次尝试\n                         continue;           // Slot is now non-empty\n                     }\n                 }\n                 collide = false;\n             }\n             //置为true后交给循环重试\n             else if (!wasUncontended)       // CAS already known to fail\n                 wasUncontended = true;      // Continue after rehash\n             //尝试给线程对应的cell update\n             else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                          fn.applyAsLong(v, x))))\n                 break;\n             else if (n >= NCPU || cells != as)\n                 collide = false;            // At max size or stale\n             else if (!collide)\n                 collide = true;\n             //在以上条件都无法解决的情况下尝试扩展cell\n             else if (cellsBusy == 0 && casCellsBusy()) {\n                 try {\n                     if (cells == as) {      // Expand table unless stale\n                         Cell[] rs = new Cell[n << 1];\n                         for (int i = 0; i < n; ++i)\n                             rs[i] = as[i];\n                         cells = rs;\n                     }\n                 } finally {\n                     cellsBusy = 0;\n                 }\n                 collide = false;\n                 continue;                   // Retry with expanded table\n             }\n             h = advanceProbe(h);\n         }\n         //此时cells还未进行第一次初始化，进行初始化\n         else if (cellsBusy == 0 && cells == as && casCellsBusy()) {\n             boolean init = false;\n             try {                           // Initialize table\n                 if (cells == as) {\n                     Cell[] rs = new Cell[2];\n                     rs[h & 1] = new Cell(x);\n                     cells = rs;\n                     init = true;\n                 }\n             } finally {\n                 cellsBusy = 0;\n             }\n             if (init)\n                 break;\n         }\n         //busy锁不成功或者忙，则再重试一次casBase对value直接累加\n         else if (casBase(v = base, ((fn == null) ? v + x :\n                                     fn.applyAsLong(v, x))))\n             break;                          // Fall back on using base\n     }\n }\n  /**\n   * Spinlock (locked via CAS) used when resizing and/or creating Cells.\n   * 通过cas实现的自旋锁，用于扩大或者初始化cells\n   */\n  transient volatile int cellsBusy;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br")])]),a("p",[s._v("从以上分析来看，"),a("code",[s._v("longAccumulate")]),s._v("就是为了尽量减少多个线程更新同一个value，实在不行则扩大cell")]),s._v(" "),a("p",[a("code",[s._v("LongAdder")]),s._v("减少冲突的方法以及在求和场景下比"),a("code",[s._v("AtomicLong")]),s._v("更高效。\n因为"),a("code",[s._v("LongAdder")]),s._v("在更新数值时并非对一个数进行更新，而是分散到多个cell，这样在多线程的情况下可以有效的嫌少冲突和压力，使得更加高效。")]),s._v(" "),a("h1",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),a("p",[s._v("适用于统计求和计数的场景，因为它提供了"),a("code",[s._v("add")]),s._v("、"),a("code",[s._v("sum")]),s._v("方法")]),s._v(" "),a("h1",{attrs:{id:"longadder是否能够替换atomiclong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#longadder是否能够替换atomiclong"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"http://blog.jerkybible.com/2018/01/11/Java%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E4%B9%8BLongAdder/#LongAdder%E6%98%AF%E5%90%A6%E8%83%BD%E5%A4%9F%E6%9B%BF%E6%8D%A2AtomicLong",title:"LongAdder是否能够替换AtomicLong",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1),s._v("LongAdder是否能够替换AtomicLong")]),s._v(" "),a("p",[s._v("从上面的分析来看是不行的，因为"),a("code",[s._v("AtomicLong")]),s._v("提供了很多cas方法，例如"),a("code",[s._v("getAndIncrement")]),s._v("、"),a("code",[s._v("getAndDecrement")]),s._v("等，使用起来非常的灵活，而"),a("code",[s._v("LongAdder")]),s._v("只有"),a("code",[s._v("add")]),s._v("和"),a("code",[s._v("sum")]),s._v("，使用起来比较受限。\n优点:由于 JVM 会将 64位的double,long 型变量的读操作分为两次32位的读操作,所以低并发保持了 AtomicLong性能,高并发下热点数据被 hash 到多个 Cell,有限分离,通过分散提升了并行度\n但统计时有数据更新,也可能会出现数据误差,但高并发场景有限使用此类,低时还是可以继续 AtomicLong")])])}),[],!1,null,null,null);n.default=l.exports}}]);