(window.webpackJsonp=window.webpackJsonp||[]).push([[738],{1135:function(a,s,t){"use strict";t.r(s);var n=t(13),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"共同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#共同点"}},[a._v("#")]),a._v(" 共同点")]),a._v(" "),t("ul",[t("li",[a._v("装配bean")]),a._v(" "),t("li",[a._v("写在字段上")]),a._v(" "),t("li",[a._v("写在setter方法上")])]),a._v(" "),t("h1",{attrs:{id:"autowired"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[a._v("#")]),a._v(" @Autowired")]),a._v(" "),t("p",[a._v("该注解属Spring，默认按类型装配。\n可以作用在变量、setter方法、构造器。")]),a._v(" "),t("p",[a._v("默认要求依赖对象必须存在，如果要允许"),t("code",[a._v("null")]),a._v("值，可以设置它的"),t("code",[a._v("required")]),a._v("属性为"),t("code",[a._v("false")]),a._v("，这样当没有找到相应bean的时候，程序不会抛错。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("required"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("若想使用名称装配，需要配合"),t("code",[a._v("@Qualifier")]),a._v("一起食用，如下：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Qualifier")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"baseDao"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BaseDao")]),a._v(" baseDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("h1",{attrs:{id:"resource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resource"}},[a._v("#")]),a._v(" @Resource")]),a._v(" "),t("p",[a._v("默认按名称装配(JDK1.6开始支持的注解)。@Resource是JSR250规范的实现，需要导入javax.annotation实现注入。\n不可以用在构造器。")]),a._v(" "),t("p",[a._v("名称可以通过name属性进行指定，若没有指定"),t("code",[a._v("name")]),a._v("属性：")]),a._v(" "),t("ul",[t("li",[a._v("当注解写在字段上时，默认取字段名，按照名称查找")]),a._v(" "),t("li",[a._v("如果注解写在setter方法上默认取属性名进行装配")]),a._v(" "),t("li",[a._v("当找不到与名称匹配的bean时才按照类型进行装配")])]),a._v(" "),t("blockquote",[t("p",[a._v("name属性一旦指定，就只会按照名称进行装配。")])]),a._v(" "),t("p",[a._v("只不过注解处理器我们使用的是Spring提供的，是一样的，无所谓解耦不解耦的说法，两个在便利程度上是等同的。")]),a._v(" "),t("h3",{attrs:{id:"resource作用于字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resource作用于字段"}},[a._v("#")]),a._v(" @Resource作用于字段")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"base"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BaseDao")]),a._v(" baseDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("Spring注入p的过程：")]),a._v(" "),t("ul",[t("li",[a._v("查找xml中是否有id为baseDao的元素")]),a._v(" "),t("li",[a._v("如果没有找到，则看是否有name属性（@Resource name=“base”），有则查找name")]),a._v(" "),t("li",[a._v("否则查找BaseDao类型的元素")])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("byName")]),a._v(" 通过参数名自动装配，如果一个bean的name 和另外一个bean的 property 相同，就自动装配\n"),t("strong",[a._v("byType")]),a._v(" 通过参数的数据类型自动自动装配，如果一个bean的数据类型和另外一个bean的property属性的数据类型兼容，就自动装配")])]),a._v(" "),t("h1",{attrs:{id:"inject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inject"}},[a._v("#")]),a._v(" @Inject")]),a._v(" "),t("p",[a._v("JSR330 (Dependency Injection for Java)中的规范，需要导入javax.inject.Inject。根据类型进行自动装配的，如果需要按名称进行装配，则需要配合@Named。\n可以作用在变量、setter方法、构造器。")]),a._v(" "),t("p",[a._v("@Autowired、@Inject用法基本一样，不同的是@Autowired有一个request属性。")]),a._v(" "),t("h1",{attrs:{id:"使用注解的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用注解的方式"}},[a._v("#")]),a._v(" 使用注解的方式")]),a._v(" "),t("p",[a._v("在基于注解方式配置Spring的配置文件中，你可能会见到\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/e1db938f59a5e7cfe80959703c3dfbce.png",alt:""}}),a._v("\n作用是向 Spring 容器注册")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("AutowiredAnnotationBeanPostProcessor\nCommonAnnotationBeanPostProcessor\nPersistenceAnnotationBeanPostProcessor\nRequiredAnnotationBeanPostProcessor\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("注册这4个BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。")]),a._v(" "),t("p",[a._v("例如要使用@Autowired，就必须事先在 Spring 容器中声明 "),t("code",[a._v("AutowiredAnnotationBeanPostProcessor Bean")]),a._v("，传统声明方式如下")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("org.springframework.beans.factory.annotation. AutowiredAnnotationBeanPostProcessor "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("要使用@ Resource 、@ PostConstruct、@ PreDestroy等注解就必须声明"),t("code",[a._v("CommonAnnotationBeanPostProcessor")])]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("org.springframework.beans.factory.annotation. CommonAnnotationBeanPostProcessor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("要使用@PersistenceContext注解，就必须声明"),t("code",[a._v("PersistenceAnnotationBeanPostProcessor")]),a._v("的")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("org.springframework.beans.factory.annotation.PersistenceAnnotationBeanPostProcessor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("要使用 @Required的注解，就必须声明"),t("code",[a._v("RequiredAnnotationBeanPostProcessor")])]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果总是需要按照传统的方式一条一条配置显得有些繁琐和没有必要\n于是spring给我们提供"),t("code",[a._v("<context:annotation-config/>")]),a._v("的简化配置方式，自动帮你完成声明。")]),a._v(" "),t("p",[a._v("都2021了，一般都会配置"),t("code",[a._v("包扫描路径")]),a._v("选项")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("context:")]),a._v("component-scan")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("base-package")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),a._v("”XX.XX”/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("该配置项其实也包含了自动注入上述processor的功能，可以将 "),t("code",[a._v("<context:annotation-config/>")]),a._v("移除了.")]),a._v(" "),t("p",[t("strong",[a._v("比如：")])]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("context:")]),a._v("component-scan")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("base-package")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("carPoolingController, carPoolingService, carPoolingDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("就把controller包下 service包下 dao包下的注解全部扫描了")]),a._v(" "),t("p",[a._v("一般使用 @Resource，因为这样我们就能实现和spring框架的解耦（不过注解处理器还是Spring提供）。")])])}),[],!1,null,null,null);s.default=e.exports}}]);