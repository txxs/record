(window.webpackJsonp=window.webpackJsonp||[]).push([[539],{932:function(e,a,s){"use strict";s.r(a);var t=s(13),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"最重要的-jvm-参数总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最重要的-jvm-参数总结"}},[e._v("#")]),e._v(" 最重要的 JVM 参数总结")]),e._v(" "),s("p",[e._v("本文由 JavaGuide 翻译自 "),s("a",{attrs:{href:"https://www.baeldung.com/jvm-parameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.baeldung.com/jvm-parameters"),s("OutboundLink")],1),e._v("，并对文章进行了大量的完善补充。翻译不易，如需转载请注明出处，作者："),s("a",{attrs:{href:"https://www.baeldung.com/author/baeldung/",target:"_blank",rel:"noopener noreferrer"}},[e._v("baeldung"),s("OutboundLink")],1),e._v(" 。")]),e._v(" "),s("h2",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[e._v("#")]),e._v(" 1.概述")]),e._v(" "),s("p",[e._v("在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、")]),e._v(" "),s("h2",{attrs:{id:"_2-堆内存相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-堆内存相关"}},[e._v("#")]),e._v(" 2.堆内存相关")]),e._v(" "),s("blockquote",[s("p",[e._v("Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。"),s("strong",[e._v("此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。")])])]),e._v(" "),s("h3",{attrs:{id:"_2-1-显式指定堆内存-xms和-xmx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-显式指定堆内存-xms和-xmx"}},[e._v("#")]),e._v(" 2.1.显式指定堆内存"),s("code",[e._v("–Xms")]),e._v("和"),s("code",[e._v("-Xmx")])]),e._v(" "),s("p",[e._v("与性能有关的最常见实践之一是根据应用程序要求初始化堆内存。如果我们需要指定最小和最大堆大小（推荐显示指定大小），以下参数可以帮助你实现：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-Xms<heap size>[unit] \n-Xmx<heap size>[unit]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("ul",[s("li",[s("strong",[e._v("heap size")]),e._v(" 表示要初始化内存的具体大小。")]),e._v(" "),s("li",[s("strong",[e._v("unit")]),e._v(" 表示要初始化内存的单位。单位为***“ g”*** (GB) 、***“ m”***（MB）、***“ k”***（KB）。")])]),e._v(" "),s("p",[e._v("举个栗子🌰，如果我们要为JVM分配最小2 GB和最大5 GB的堆内存大小，我们的参数应该这样来写：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-Xms2G -Xmx5G\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-2-显式新生代内存-young-generation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-显式新生代内存-young-generation"}},[e._v("#")]),e._v(" 2.2.显式新生代内存(Young Generation)")]),e._v(" "),s("p",[e._v("根据"),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Oracle官方文档"),s("OutboundLink")],1),e._v("，在堆总可用内存配置完成之后，第二大影响因素是为 "),s("code",[e._v("Young Generation")]),e._v(" 在堆内存所占的比例。默认情况下，YG 的最小大小为 1310 "),s("em",[e._v("MB")]),e._v("，最大大小为"),s("em",[e._v("无限制")]),e._v("。")]),e._v(" "),s("p",[e._v("一共有两种指定 新生代内存(Young Ceneration)大小的方法：")]),e._v(" "),s("p",[s("strong",[e._v("1.通过"),s("code",[e._v("-XX:NewSize")]),e._v("和"),s("code",[e._v("-XX:MaxNewSize")]),e._v("指定")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-XX:NewSize=<young size>[unit] \n-XX:MaxNewSize=<young size>[unit]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("举个栗子🌰，如果我们要为 新生代分配 最小256m 的内存，最大 1024m的内存我们的参数应该这样来写：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-XX:NewSize=256m\n-XX:MaxNewSize=1024m\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("strong",[e._v("2.通过"),s("code",[e._v("-Xmn<young size>[unit]")]),e._v("指定")])]),e._v(" "),s("p",[e._v("举个栗子🌰，如果我们要为 新生代分配256m的内存（NewSize与MaxNewSize设为一致），我们的参数应该这样来写：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-Xmn256m \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("GC 调优策略中很重要的一条经验总结是这样说的：")]),e._v(" "),s("blockquote",[s("p",[e._v("将新对象预留在新生代，由于 Full GC 的成本远高于 Minor GC，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 GC 日志分析新生代空间大小分配是否合理，适当通过“-Xmn”命令调节新生代大小，最大限度降低新对象直接进入老年代的情况。")])]),e._v(" "),s("p",[e._v("另外，你还可以通过**"),s("code",[e._v("-XX:NewRatio=<int>")]),e._v("**来设置新生代和老年代内存的比值。")]),e._v(" "),s("p",[e._v("比如下面的参数就是设置新生代（包括Eden和两个Survivor区）与老年代的比值为1。也就是说：新生代与老年代所占比值为1：1，新生代占整个堆栈的 1/2。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-XX:NewRatio=1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-3-显式指定永久代-元空间的大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-显式指定永久代-元空间的大小"}},[e._v("#")]),e._v(" 2.3.显式指定永久代/元空间的大小")]),e._v(" "),s("p",[s("strong",[e._v("从Java 8开始，如果我们没有指定 Metaspace 的大小，随着更多类的创建，虚拟机会耗尽所有可用的系统内存（永久代并不会出现这种情况）。")])]),e._v(" "),s("p",[e._v("JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小")]),e._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("N")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//方法区 (永久代) 初始大小")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MaxPermSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("N")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。")]),e._v(" "),s("p",[s("strong",[e._v("JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。")])]),e._v(" "),s("p",[e._v("下面是一些常用参数：")]),e._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("N")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//设置 Metaspace 的初始（和最小大小）")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MaxMetaspaceSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("N")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//设置 Metaspace 的最大大小，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"_3-垃圾收集相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集相关"}},[e._v("#")]),e._v(" 3.垃圾收集相关")]),e._v(" "),s("h3",{attrs:{id:"_3-1-垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-垃圾回收器"}},[e._v("#")]),e._v(" 3.1.垃圾回收器")]),e._v(" "),s("p",[e._v("为了提高应用程序的稳定性，选择正确的"),s("a",{attrs:{href:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("垃圾收集"),s("OutboundLink")],1),e._v("算法至关重要。")]),e._v(" "),s("p",[e._v("JVM具有四种类型的"),s("em",[e._v("GC")]),e._v("实现：")]),e._v(" "),s("ul",[s("li",[e._v("串行垃圾收集器")]),e._v(" "),s("li",[e._v("并行垃圾收集器")]),e._v(" "),s("li",[e._v("CMS垃圾收集器")]),e._v(" "),s("li",[e._v("G1垃圾收集器")])]),e._v(" "),s("p",[e._v("可以使用以下参数声明这些实现：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-XX:+UseSerialGC\n-XX:+UseParallelGC\n-XX:+UseParNewGC\n-XX:+UseG1GC\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("有关"),s("em",[e._v("垃圾回收")]),e._v("实施的更多详细信息，请参见"),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("此处"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_3-2-gc记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-gc记录"}},[e._v("#")]),e._v(" 3.2.GC记录")]),e._v(" "),s("p",[e._v("为了严格监控应用程序的运行状况，我们应该始终检查JVM的"),s("em",[e._v("垃圾回收")]),e._v("性能。最简单的方法是以人类可读的格式记录"),s("em",[e._v("GC")]),e._v("活动。")]),e._v(" "),s("p",[e._v("使用以下参数，我们可以记录"),s("em",[e._v("GC")]),e._v("活动：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-XX:+UseGCLogFileRotation \n-XX:NumberOfGCLogFiles=< number of log files > \n-XX:GCLogFileSize=< file size >[ unit ]\n-Xloggc:/path/to/gc.log\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h2",{attrs:{id:"推荐阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[e._v("#")]),e._v(" 推荐阅读")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/832fc4d4cb53",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMS GC 默认新生代是多大？"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/hongdada/p/10277782.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMS GC启动参数优化配置"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tech.meituan.com/2017/12/29/jvm-optimize.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("从实际案例聊聊Java应用的GC优化-美团技术团队"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.choupangxia.com/2019/11/11/interview-jvm-gc-08/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JVM性能调优详解"),s("OutboundLink")],1),e._v(" （2019-11-11）")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000010603813",target:"_blank",rel:"noopener noreferrer"}},[e._v("JVM参数使用手册"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);