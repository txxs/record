(window.webpackJsonp=window.webpackJsonp||[]).push([[1012],{1406:function(t,_,v){"use strict";v.r(_);var s=v(13),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",{attrs:{align:"center"}},[v("a",{attrs:{href:"https://programmercarl.com/other/kstar.html",target:"_blank"}},[v("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210924105952.png",width:"1000"}})])]),v("p",{attrs:{align:"center"}},[v("strong",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/tqCxrMEU-ajQumL1i8im9A"}},[t._v("参与本项目")]),t._v("，贡献其他语言版本的代码，拥抱开源，让更多学习算法的小伙伴们收益！")])]),t._v(" "),v("h2",{attrs:{id:"哈希表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),v("p",[t._v("首先什么是 哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。")]),t._v(" "),v("blockquote",[v("p",[t._v("哈希表是根据关键码的值而直接进行访问的数据结构。")])]),t._v(" "),v("p",[t._v("这么这官方的解释可能有点懵，其实直白来讲其实数组就是一张哈希表。")]),t._v(" "),v("p",[t._v("哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210104234805168.png",alt:"哈希表1"}})]),t._v(" "),v("p",[t._v("那么哈希表能解决什么问题呢，"),v("strong",[t._v("一般哈希表都是用来快速判断一个元素是否出现集合里。")])]),t._v(" "),v("p",[t._v("例如要查询一个名字是否在这所学校里。")]),t._v(" "),v("p",[t._v("要枚举的话时间复杂度是$O(n)$，但如果使用哈希表的话， 只需要$O(1)$就可以做到。")]),t._v(" "),v("p",[t._v("我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。")]),t._v(" "),v("p",[t._v("将学生姓名映射到哈希表上就涉及到了"),v("strong",[t._v("hash function ，也就是哈希函数")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"哈希函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数"}},[t._v("#")]),t._v(" 哈希函数")]),t._v(" "),v("p",[t._v("哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。")]),t._v(" "),v("p",[t._v("哈希函数如下图所示，通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021010423484818.png",alt:"哈希表2"}})]),t._v(" "),v("p",[t._v("如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了，怎么办呢？")]),t._v(" "),v("p",[t._v("此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。")]),t._v(" "),v("p",[t._v("此时问题又来了，哈希表我们刚刚说过，就是一个数组。")]),t._v(" "),v("p",[t._v("如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。")]),t._v(" "),v("p",[t._v("接下来"),v("strong",[t._v("哈希碰撞")]),t._v("登场")]),t._v(" "),v("h3",{attrs:{id:"哈希碰撞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希碰撞"}},[t._v("#")]),t._v(" 哈希碰撞")]),t._v(" "),v("p",[t._v("如图所示，小李和小王都映射到了索引下标 1 的位置，"),v("strong",[t._v("这一现象叫做哈希碰撞")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021010423494884.png",alt:"哈希表3"}})]),t._v(" "),v("p",[t._v("一般哈希碰撞有两种解决方法， 拉链法和线性探测法。")]),t._v(" "),v("h3",{attrs:{id:"拉链法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拉链法"}},[t._v("#")]),t._v(" 拉链法")]),t._v(" "),v("p",[t._v("刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210104235015226.png",alt:"哈希表4"}})]),t._v(" "),v("p",[t._v("（数据规模是dataSize， 哈希表的大小为tableSize）")]),t._v(" "),v("p",[t._v("其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。")]),t._v(" "),v("h3",{attrs:{id:"线性探测法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性探测法"}},[t._v("#")]),t._v(" 线性探测法")]),t._v(" "),v("p",[t._v("使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。")]),t._v(" "),v("p",[t._v("例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210104235109950.png",alt:"哈希表5"}})]),t._v(" "),v("p",[t._v("其实关于哈希碰撞还有非常多的细节，感兴趣的同学可以再好好研究一下，这里我就不再赘述了。")]),t._v(" "),v("h2",{attrs:{id:"常见的三种哈希结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的三种哈希结构"}},[t._v("#")]),t._v(" 常见的三种哈希结构")]),t._v(" "),v("p",[t._v("当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。")]),t._v(" "),v("ul",[v("li",[t._v("数组")]),t._v(" "),v("li",[t._v("set （集合）")]),t._v(" "),v("li",[t._v("map(映射)")])]),t._v(" "),v("p",[t._v("这里数组就没啥可说的了，我们来看一下set。")]),t._v(" "),v("p",[t._v("在C++中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("集合")]),t._v(" "),v("th",[t._v("底层实现")]),t._v(" "),v("th",[t._v("是否有序")]),t._v(" "),v("th",[t._v("数值是否可以重复")]),t._v(" "),v("th",[t._v("能否更改数值")]),t._v(" "),v("th",[t._v("查询效率")]),t._v(" "),v("th",[t._v("增删效率")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("std::set")]),t._v(" "),v("td",[t._v("红黑树")]),t._v(" "),v("td",[t._v("有序")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("$O(\\log n)$")]),t._v(" "),v("td",[t._v("$O(\\log n)$")])]),t._v(" "),v("tr",[v("td",[t._v("std::multiset")]),t._v(" "),v("td",[t._v("红黑树")]),t._v(" "),v("td",[t._v("有序")]),t._v(" "),v("td",[t._v("是")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("$O(\\log n)$")]),t._v(" "),v("td",[t._v("$O(\\log n)$")])]),t._v(" "),v("tr",[v("td",[t._v("std::unordered_set")]),t._v(" "),v("td",[t._v("哈希表")]),t._v(" "),v("td",[t._v("无序")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("$O(1)$")]),t._v(" "),v("td",[t._v("$O(1)$")])])])]),t._v(" "),v("p",[t._v("std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("映射")]),t._v(" "),v("th",[t._v("底层实现")]),t._v(" "),v("th",[t._v("是否有序")]),t._v(" "),v("th",[t._v("数值是否可以重复")]),t._v(" "),v("th",[t._v("能否更改数值")]),t._v(" "),v("th",[t._v("查询效率")]),t._v(" "),v("th",[t._v("增删效率")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("std::map")]),t._v(" "),v("td",[t._v("红黑树")]),t._v(" "),v("td",[t._v("key有序")]),t._v(" "),v("td",[t._v("key不可重复")]),t._v(" "),v("td",[t._v("key不可修改")]),t._v(" "),v("td",[t._v("$O(\\log n)$")]),t._v(" "),v("td",[t._v("$O(\\log n)$")])]),t._v(" "),v("tr",[v("td",[t._v("std::multimap")]),t._v(" "),v("td",[t._v("红黑树")]),t._v(" "),v("td",[t._v("key有序")]),t._v(" "),v("td",[t._v("key可重复")]),t._v(" "),v("td",[t._v("key不可修改")]),t._v(" "),v("td",[t._v("$O(\\log n)$")]),t._v(" "),v("td",[t._v("$O(\\log n)$")])]),t._v(" "),v("tr",[v("td",[t._v("std::unordered_map")]),t._v(" "),v("td",[t._v("哈希表")]),t._v(" "),v("td",[t._v("key无序")]),t._v(" "),v("td",[t._v("key不可重复")]),t._v(" "),v("td",[t._v("key不可修改")]),t._v(" "),v("td",[t._v("$O(1)$")]),t._v(" "),v("td",[t._v("$O(1)$")])])])]),t._v(" "),v("p",[t._v("std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。")]),t._v(" "),v("p",[t._v("当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。")]),t._v(" "),v("p",[t._v("那么再来看一下map ，在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。")]),t._v(" "),v("p",[t._v("其他语言例如：java里的HashMap ，TreeMap 都是一样的原理。可以灵活贯通。")]),t._v(" "),v("p",[t._v("虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，但是std::set、std::multiset 依然使用哈希函数来做映射，只不过底层的符号表使用了红黑树来存储数据，所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map也是一样的道理。")]),t._v(" "),v("p",[t._v("这里在说一下，一些C++的经典书籍上 例如STL源码剖析，说到了hash_set hash_map，这个与unordered_set，unordered_map又有什么关系呢？")]),t._v(" "),v("p",[t._v("实际上功能都是一样一样的， 但是unordered_set在C++11的时候被引入标准库了，而hash_set并没有，所以建议还是使用unordered_set比较好，这就好比一个是官方认证的，hash_set，hash_map 是C++11标准之前民间高手自发造的轮子。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210104235134572.png",alt:"哈希表6"}})]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("总结一下，"),v("strong",[t._v("当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法")]),t._v("。")]),t._v(" "),v("p",[t._v("但是哈希法也是"),v("strong",[t._v("牺牲了空间换取了时间")]),t._v("，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。")]),t._v(" "),v("p",[t._v("如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！")]),t._v(" "),v("hr"),t._v(" "),v("div",{attrs:{align:"center"}},[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码一.jpg",width:"500"}})])])}),[],!1,null,null,null);_.default=a.exports}}]);