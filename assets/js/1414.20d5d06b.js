(window.webpackJsonp=window.webpackJsonp||[]).push([[1414],{1808:function(a,t,r){"use strict";r.r(t);var e=r(13),_=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"_1-面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-面试题"}},[a._v("#")]),a._v(" 1 面试题")]),a._v(" "),r("p",[a._v("如何保证消息的可靠性传输（如何处理消息丢失的问题）？")]),a._v(" "),r("h1",{attrs:{id:"_2-考点分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-考点分析"}},[a._v("#")]),a._v(" 2 考点分析")]),a._v(" "),r("p",[a._v("这个是肯定的，用mq有个基本原则，就是数据不能多一条，也不能少一条，不能多，就是刚才说的重复消费和幂等性问题。不能少，就是说这数据别搞丢了。那这个问题你必须得考虑一下。")]),a._v(" "),r("p",[a._v("如果说你这个是用mq来传递非常核心的消息，比如说计费，扣费的一些消息，因为我以前设计和研发过一个公司非常核心的广告平台，计费系统，计费系统是很重的一个业务，操作是很耗时的。所以说广告系统整体的架构里面，实际上是将计费做成异步化的，然后中间就是加了一个MQ。")]),a._v(" "),r("p",[a._v("我们当时为了确保说这个MQ传递过程中绝对不会把计费消息给弄丢，花了很多的精力。广告主投放了一个广告，明明说好了，用户点击一次扣费1块钱。结果要是用户动不动点击了一次，扣费的时候搞的消息丢了，我们公司就会不断的少几块钱，几块钱，积少成多，这个就对公司是一个很大的损失。")]),a._v(" "),r("h1",{attrs:{id:"_3-详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-详解"}},[a._v("#")]),a._v(" 3 详解")]),a._v(" "),r("p",[a._v("这个丢数据，mq一般分为两种，要么是mq自己弄丢了，要么是我们消费的时候弄丢了")]),a._v(" "),r("p",[a._v("咱们从rabbitmq和kafka分别来分析一下吧")]),a._v(" "),r("p",[a._v("rabbitmq这种mq，一般来说都是承载公司的核心业务的，数据是绝对不能弄丢的")]),a._v(" "),r("h2",{attrs:{id:"_3-1-rabbitmq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-rabbitmq"}},[a._v("#")]),a._v(" 3.1 rabbitmq")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190513100107538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("h3",{attrs:{id:"_3-1-1-生产者丢数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-生产者丢数据"}},[a._v("#")]),a._v(" 3.1.1 生产者丢数据")]),a._v(" "),r("p",[a._v("生产者将数据发送到rabbitmq的时候，可能数据就在半路给搞丢了，因为网络啥的问题，都有可能。")]),a._v(" "),r("p",[a._v("此时可以选择用rabbitmq提供的事务功能，就是生产者发送数据之前开启rabbitmq事务（channel.txSelect），然后发送消息")]),a._v(" "),r("ul",[r("li",[a._v("如果消息没有成功被rabbitmq接收到，那么生产者会收到异常报错，此时就可以回滚事务（channel.txRollback），然后重试发送消息；")]),a._v(" "),r("li",[a._v("如果收到了消息，那么可以提交事务（channel.txCommit）")])]),a._v(" "),r("p",[a._v("但是问题是，rabbitmq事务机制一搞，基本上吞吐量会下来，因为太耗性能。")]),a._v(" "),r("p",[a._v("所以一般来说，如果你要确保说写rabbitmq的消息别丢，可以开启confirm模式，在生产者那里设置开启confirm模式之后，你每次写的消息都会分配一个唯一的id，然后如果写入了rabbitmq中，rabbitmq会给你回传一个ack消息，告诉你说这个消息ok了。如果rabbitmq没能处理这个消息，会回调你一个nack接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息id的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。")]),a._v(" "),r("blockquote",[r("p",[a._v("事务机制和cnofirm机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是confirm机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息rabbitmq接收了之后会异步回调你一个接口通知你这个消息接收到了。")])]),a._v(" "),r("p",[a._v("所以一般在生产者这块避免数据丢失，都是用confirm机制的。")]),a._v(" "),r("h3",{attrs:{id:"_3-1-2-rabbitmq丢数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-rabbitmq丢数据"}},[a._v("#")]),a._v(" 3.1.2 rabbitmq丢数据")]),a._v(" "),r("p",[a._v("就是rabbitmq自己弄丢了数据，这个你必须开启rabbitmq的持久化，就是消息写入之后会持久化到磁盘，哪怕是rabbitmq自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，rabbitmq还没持久化，自己就挂了，可能导致少量数据会丢失的，但是这个概率较小。")]),a._v(" "),r("p",[a._v("设置持久化有两个步骤，第一个是创建queue的时候将其设置为持久化的，这样就可以保证rabbitmq持久化queue的元数据，但是不会持久化queue里的数据；第二个是发送消息的时候将消息的deliveryMode设置为2，就是将消息设置为持久化的，此时rabbitmq就会将消息持久化到磁盘上去。必须要同时设置这两个持久化才行，rabbitmq哪怕是挂了，再次重启，也会从磁盘上重启恢复queue，恢复这个queue里的数据。")]),a._v(" "),r("p",[a._v("而且持久化可以跟生产者那边的confirm机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者ack了，所以哪怕是在持久化到磁盘之前，rabbitmq挂了，数据丢了，生产者收不到ack，你也是可以自己重发的。")]),a._v(" "),r("p",[a._v("哪怕是你给rabbitmq开启了持久化机制，也有一种可能，就是这个消息写到了rabbitmq中，但是还没来得及持久化到磁盘上，结果不巧，此时rabbitmq挂了，就会导致内存里的一点点数据会丢失。")]),a._v(" "),r("h3",{attrs:{id:"_3-1-3-消费端弄丢了数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-消费端弄丢了数据"}},[a._v("#")]),a._v(" 3.1.3 消费端弄丢了数据")]),a._v(" "),r("p",[a._v("rabbitmq如果丢失了数据，主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，那么就尴尬了，rabbitmq认为你都消费了，这数据就丢了。")]),a._v(" "),r("p",[a._v("这个时候得用rabbitmq提供的ack机制，简单来说，就是你关闭rabbitmq自动ack，可以通过一个api来调用就行，然后每次你自己代码里确保处理完的时候，再程序里ack一把。")]),a._v(" "),r("p",[a._v("这样的话，如果你还没处理完，不就没有ack？那rabbitmq就认为你还没处理完，这个时候rabbitmq会把这个消费分配给别的consumer去处理，消息是不会丢的。")]),a._v(" "),r("h2",{attrs:{id:"_3-2-kafka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-kafka"}},[a._v("#")]),a._v(" 3.2 Kafka")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190513100126297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("h3",{attrs:{id:"_3-2-1-消费端丢数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-消费端丢数据"}},[a._v("#")]),a._v(" 3.2.1 消费端丢数据")]),a._v(" "),r("p",[a._v("唯一可能导致消费者弄丢数据的情况，你那个消费到了这个消息，然后消费者那边自动提交了offset，让kafka以为你已经消费好了这个消息，其实你刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。")]),a._v(" "),r("p",[a._v("这不是一样么，大家都知道kafka会自动提交offset，那么只要关闭自动提交offset，在处理完之后自己手动提交offset，就可以保证数据不会丢。但是此时确实还是会重复消费，比如你刚处理完，还没提交offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。")]),a._v(" "),r("p",[a._v("生产环境碰到的一个问题，就是说我们的kafka消费者消费到了数据之后是写到一个内存的queue里先缓冲一下，结果有的时候，你刚把消息写入内存queue，然后消费者会自动提交offset。")]),a._v(" "),r("p",[a._v("然后此时我们重启了系统，就会导致内存queue里还没来得及处理的数据就丢失了")]),a._v(" "),r("h3",{attrs:{id:"_3-2-2-kafka弄丢了数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-kafka弄丢了数据"}},[a._v("#")]),a._v(" 3.2.2 kafka弄丢了数据")]),a._v(" "),r("p",[a._v("这块比较常见的一个场景，就是kafka某个broker宕机，然后重新选举partiton的leader时。大家想想，要是此时其他的follower刚好还有些数据没有同步，结果此时leader挂了，然后选举某个follower成leader之后，他不就少了一些数据？这就丢了一些数据啊。")]),a._v(" "),r("p",[a._v("生产环境也遇到过，我们也是，之前kafka的leader机器宕机了，将follower切换为leader之后，就会发现说这个数据就丢了")]),a._v(" "),r("p",[a._v("所以此时一般是要求起码设置如下4个参数：")]),a._v(" "),r("p",[a._v("给这个topic设置replication.factor参数：这个值必须大于1，要求每个partition必须有至少2个副本")]),a._v(" "),r("p",[a._v("在kafka服务端设置min.insync.replicas参数：这个值必须大于1，这个是要求一个leader至少感知到有至少一个follower还跟自己保持联系，没掉队，这样才能确保leader挂了还有一个follower吧")]),a._v(" "),r("p",[a._v("在producer端设置acks=all：这个是要求每条数据，必须是写入所有replica之后，才能认为是写成功了")]),a._v(" "),r("p",[a._v("在producer端设置retries=MAX（很大很大很大的一个值，无限次重试的意思）：这个是要求一旦写入失败，就无限重试，卡在这里了")]),a._v(" "),r("p",[a._v("我们生产环境就是按照上述要求配置的，这样配置之后，至少在kafka broker端就可以保证在leader所在broker发生故障，进行leader切换时，数据不会丢失")]),a._v(" "),r("h3",{attrs:{id:"_3-2-3-生产者会不会弄丢数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-生产者会不会弄丢数据"}},[a._v("#")]),a._v(" 3.2.3 生产者会不会弄丢数据")]),a._v(" "),r("p",[a._v("如果按照上述的思路设置了ack=all，一定不会丢，要求是，你的leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。")]),a._v(" "),r("h1",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),r("p",[a._v("《Java工程师面试突击第1季-中华石杉老师》")]),a._v(" "),r("h1",{attrs:{id:"x-交流学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-交流学习"}},[a._v("#")]),a._v(" X 交流学习")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190504005601174.jpg",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"java交流群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java交流群"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://jq.qq.com/?_wv=1027&k=5UB4P1T",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java交流群"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"博客"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#博客"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://blog.csdn.net/qq_33589510",target:"_blank",rel:"noopener noreferrer"}},[a._v("博客"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"github"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://github.com/Wasabi1234",target:"_blank",rel:"noopener noreferrer"}},[a._v("Github"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=_.exports}}]);