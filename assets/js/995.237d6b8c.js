(window.webpackJsonp=window.webpackJsonp||[]).push([[995],{1390:function(r,t,e){"use strict";e.r(t);var a=e(13),_=Object(a.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("p",{attrs:{align:"center"}},[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/QVF6upVMSbgvZy8lHZS3CQ"}},[e("img",{attrs:{src:"https://img.shields.io/badge/知识星球-代码随想录-blue",alt:""}})]),r._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/b66DFkOp8OOxdZC_xLZxfw"}},[e("img",{attrs:{src:"https://img.shields.io/badge/刷题-微信群-green",alt:""}})]),r._v(" "),e("a",{attrs:{href:"https://img-blog.csdnimg.cn/20201210231711160.png"}},[e("img",{attrs:{src:"https://img.shields.io/badge/公众号-代码随想录-brightgreen",alt:""}})]),r._v(" "),e("a",{attrs:{href:"https://space.bilibili.com/525438321"}},[e("img",{attrs:{src:"https://img.shields.io/badge/B站-代码随想录-orange",alt:""}})])]),r._v(" "),e("hr"),r._v(" "),e("h2",{attrs:{id:"周一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周一"}},[r._v("#")]),r._v(" 周一")]),r._v(" "),e("p",[r._v("本周我们正式开始了回溯算法系列，那么首先当然是概述。")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("关于回溯算法，你该了解这些！"),e("OutboundLink")],1),r._v("中介绍了什么是回溯，回溯法的效率，回溯法解决的问题以及回溯法模板。")]),r._v(" "),e("p",[e("strong",[r._v("回溯是递归的副产品，只要有递归就会有回溯")]),r._v("。")]),r._v(" "),e("p",[r._v("回溯法就是暴力搜索，并不是什么高效的算法，最多在剪枝一下。")]),r._v(" "),e("p",[r._v("回溯算法能解决如下问题：")]),r._v(" "),e("ul",[e("li",[r._v("组合问题：N个数里面按一定规则找出k个数的集合")]),r._v(" "),e("li",[r._v("排列问题：N个数按一定规则全排列，有几种排列方式")]),r._v(" "),e("li",[r._v("切割问题：一个字符串按一定规则有几种切割方式")]),r._v(" "),e("li",[r._v("子集问题：一个N个数的集合里有多少符合条件的子集")]),r._v(" "),e("li",[r._v("棋盘问题：N皇后，解数独等等")])]),r._v(" "),e("p",[r._v("是不是感觉回溯算法有点厉害了。")]),r._v(" "),e("p",[r._v("回溯法确实不好理解，所以需要把回溯法抽象为一个图形来理解就容易多了，每一道回溯法的题目都可以抽象为树形结构。")]),r._v(" "),e("p",[r._v("针对很多同学都写不好回溯，我在"),e("a",{attrs:{href:"https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("关于回溯算法，你该了解这些！"),e("OutboundLink")],1),r._v("用回溯三部曲，分析了回溯算法，并给出了回溯法的模板。")]),r._v(" "),e("p",[r._v("这个模板会伴随整个回溯法系列！")]),r._v(" "),e("h2",{attrs:{id:"周二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周二"}},[r._v("#")]),r._v(" 周二")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合问题！"),e("OutboundLink")],1),r._v("中，我们开始用回溯法解决第一道题目，组合问题。")]),r._v(" "),e("p",[r._v("我在文中开始的时候给大家列举k层for循环例子，进而得出都是同样是暴利解法，为什么要用回溯法。")]),r._v(" "),e("p",[e("strong",[r._v("此时大家应该深有体会回溯法的魅力，用递归控制for循环嵌套的数量！")])]),r._v(" "),e("p",[r._v("本题我把回溯问题抽象为树形结构，可以直观的看出其搜索的过程："),e("strong",[r._v("for循环横向遍历，递归纵向遍历，回溯不断调整结果集")]),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"周三"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周三"}},[r._v("#")]),r._v(" 周三")]),r._v(" "),e("p",[r._v("针对"),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合问题！"),e("OutboundLink")],1),r._v("还可以做剪枝的操作。")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：组合问题再剪剪枝"),e("OutboundLink")],1),r._v("中把回溯法代码做了剪枝优化，在文中我依然把问题抽象为一个树形结构，大家可以一目了然剪的究竟是哪里。")]),r._v(" "),e("p",[e("strong",[r._v("剪枝精髓是：for循环在寻找起点的时候要有一个范围，如果这个起点到集合终止之间的元素已经不够 题目要求的k个元素了，就没有必要搜索了")]),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"周四"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周四"}},[r._v("#")]),r._v(" 周四")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合总和！"),e("OutboundLink")],1),r._v("中，相当于 "),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合问题！"),e("OutboundLink")],1),r._v("加了一个元素总和的限制。")]),r._v(" "),e("p",[r._v("整体思路还是一样的，本题的剪枝会好想一些，即："),e("strong",[r._v("已选元素总和如果已经大于n（题中要求的和）了，那么往后遍历就没有意义了，直接剪掉")]),r._v("。")]),r._v(" "),e("p",[r._v("在本题中，依然还可以有一个剪枝，就是"),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：组合问题再剪剪枝"),e("OutboundLink")],1),r._v("中提到的，对for循环选择的起始范围的剪枝。")]),r._v(" "),e("p",[r._v("所以，剪枝的代码，可以把for循环，加上 "),e("code",[r._v("i <= 9 - (k - path.size()) + 1")]),r._v(" 的限制！")]),r._v(" "),e("p",[r._v("组合总和问题还有一些花样，下周还会介绍到。")]),r._v(" "),e("h2",{attrs:{id:"周五"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周五"}},[r._v("#")]),r._v(" 周五")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：电话号码的字母组合"),e("OutboundLink")],1),r._v("中，开始用多个集合来求组合，还是熟悉的模板题目，但是有一些细节。")]),r._v(" "),e("p",[r._v("例如这里for循环，可不像是在 "),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合问题！"),e("OutboundLink")],1),r._v("和"),e("a",{attrs:{href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合总和！"),e("OutboundLink")],1),r._v("中从startIndex开始遍历的。")]),r._v(" "),e("p",[e("strong",[r._v("因为本题每一个数字代表的是不同集合，也就是求不同集合之间的组合，而"),e("a",{attrs:{href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合问题！"),e("OutboundLink")],1),r._v("和"),e("a",{attrs:{href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("回溯算法：求组合总和！"),e("OutboundLink")],1),r._v("都是是求同一个集合中的组合！")])]),r._v(" "),e("p",[r._v("如果大家在现场面试的时候，一定要注意各种输入异常的情况，例如本题输入1 * #按键。")]),r._v(" "),e("p",[r._v("其实本题不算难，但也处处是细节，还是要反复琢磨。")]),r._v(" "),e("h2",{attrs:{id:"周六"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周六"}},[r._v("#")]),r._v(" 周六")]),r._v(" "),e("p",[r._v("因为之前链表系列没有写总结，虽然链表系列已经是两个月前的事情，但还是有必要补一下。")]),r._v(" "),e("p",[r._v("所以给出"),e("a",{attrs:{href:"https://programmercarl.com/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93%E7%AF%87.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("链表：总结篇！"),e("OutboundLink")],1),r._v("，这里对之前链表理论基础和经典题目进行了总结。")]),r._v(" "),e("p",[r._v("同时对"),e("a",{attrs:{href:"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("链表：环找到了，那入口呢？"),e("OutboundLink")],1),r._v("中求环入口的问题又进行了补充证明，可以说把环形链表的方方面面都讲的很通透了，大家如果没有做过环形链表的题目一定要去做一做。")]),r._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),e("p",[r._v("相信通过这一周对回溯法的学习，大家已经掌握其题本套路了，也不会对回溯法那么畏惧了。")]),r._v(" "),e("p",[r._v("回溯法抽象为树形结构后，其遍历过程就是："),e("strong",[r._v("for循环横向遍历，递归纵向遍历，回溯不断调整结果集")]),r._v("。")]),r._v(" "),e("p",[r._v("这个是我做了很多回溯的题目，不断摸索其规律才总结出来的。")]),r._v(" "),e("p",[r._v("对于回溯法的整体框架，网上搜的文章这块一般都说不清楚，按照天上掉下来的代码对着讲解，不知道究竟是怎么来的，也不知道为什么要这么写。")]),r._v(" "),e("p",[r._v("所以，录友们刚开始学回溯法，起跑姿势就很标准了，哈哈。")]),r._v(" "),e("p",[r._v("下周依然是回溯法，难度又要上升一个台阶了。")]),r._v(" "),e("p",[r._v("最后祝录友们周末愉快！")]),r._v(" "),e("p",[e("strong",[r._v("如果感觉「代码随想录」不错，就分享给身边的同学朋友吧，一起来学习算法！")])]),r._v(" "),e("hr"),r._v(" "),e("ul",[e("li",[r._v("微信："),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/b66DFkOp8OOxdZC_xLZxfw",target:"_blank",rel:"noopener noreferrer"}},[r._v("程序员Carl"),e("OutboundLink")],1)]),r._v(" "),e("li",[r._v("B站："),e("a",{attrs:{href:"https://space.bilibili.com/525438321",target:"_blank",rel:"noopener noreferrer"}},[r._v("代码随想录"),e("OutboundLink")],1)]),r._v(" "),e("li",[r._v("知识星球："),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/QVF6upVMSbgvZy8lHZS3CQ",target:"_blank",rel:"noopener noreferrer"}},[r._v("代码随想录"),e("OutboundLink")],1)])]),r._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码.jpg",width:"450"}})])])}),[],!1,null,null,null);t.default=_.exports}}]);