(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{653:function(e,t,r){"use strict";r.r(t);var o=r(13),_=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("转自：https://www.cnblogs.com/bangerlee/p/5448766.html")]),e._v(" "),r("p",[e._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),r("blockquote",[r("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),r("p",[e._v("喜欢的话麻烦点下Star哈")]),e._v(" "),r("p",[e._v("本文也将同步到我的个人博客：")]),e._v(" "),r("blockquote",[r("p",[e._v("www.how2playlife.com")])]),e._v(" "),r("p",[e._v("更多Java技术文章将陆续在微信公众号【Java技术江湖】更新，敬请关注。")]),e._v(" "),r("p",[e._v("该系列博文会告诉你什么是分布式系统，这对后端工程师来说是很重要的一门学问，我们会逐步了解分布式理论中的基本概念，常见算法、以及一些较为复杂的分布式原理，同时也需要进一步了解zookeeper的实现，以及CAP、一致性原理等一些常见的分布式理论基础，以便让你更完整地了解分布式理论的基础，为后续学习分布式技术内容做好准备。")]),e._v(" "),r("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),r("blockquote",[r("p",[e._v("十六号…… 四月十六号。一九六零年四月十六号下午三点之前的一分钟你和我在一起，因为你我会记住这一分钟。从现在开始我们就是一分钟的朋友，这是事实，你改变不了，因为已经过去了。我明天会再来。")]),e._v(" "),r("p",[e._v("—— 《阿飞正传》")])]),e._v(" "),r("p",[e._v("现实生活中时间是很重要的概念，时间可以记录事情发生的时刻、比较事情发生的先后顺序。分布式系统的一些场景也需要记录和比较不同节点间事件发生的顺序，但不同于日常生活使用物理时钟记录时间，分布式系统使用逻辑时钟记录事件顺序关系，下面我们来看分布式系统中几种常见的逻辑时钟。")]),e._v(" "),r("p",[r("strong",[e._v("物理时钟 vs 逻辑时钟")])]),e._v(" "),r("p",[e._v("可能有人会问，为什么分布式系统不使用物理时钟(physical clock)记录事件？每个事件对应打上一个时间戳，当需要比较顺序的时候比较相应时间戳就好了。")]),e._v(" "),r("p",[e._v("这是因为现实生活中物理时间有统一的标准，而分布式系统中每个节点记录的时间并不一样，即使设置了 "),r("a",{attrs:{href:"http://www.zhihu.com/question/24960940",target:"_blank",rel:"noopener noreferrer"}},[e._v("NTP"),r("OutboundLink")],1),e._v(" 时间同步节点间也存在毫秒级别的偏差"),r("sup",[e._v("[1][2]")]),e._v("。因而分布式系统需要有另外的方法记录事件顺序关系，这就是逻辑时钟(logical clock)。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201605/116770-20160501132311347-349996615.jpg",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("Lamport timestamps")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Leslie_Cheung",target:"_blank",rel:"noopener noreferrer"}},[e._v("Leslie"),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Leslie_Lamport",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lamport"),r("OutboundLink")],1),e._v(" 在1978年提出逻辑时钟的概念，并描述了一种逻辑时钟的表示方法，这个方法被称为Lamport时间戳(Lamport timestamps)"),r("sup",[e._v("[3]")]),e._v("。")]),e._v(" "),r("p",[e._v("分布式系统中按是否存在节点交互可分为三类事件，一类发生于节点内部，二是发送事件，三是接收事件。Lamport时间戳原理如下：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201605/116770-20160501174922566-1686627384.png",alt:""}})]),e._v(" "),r("p",[r("em",[e._v("图1: Lamport timestamps space time (图片来源: wikipedia)")])]),e._v(" "),r("ol",[r("li",[e._v("每个事件对应一个Lamport时间戳，初始值为0")]),e._v(" "),r("li",[e._v("如果事件在节点内发生，时间戳加1")]),e._v(" "),r("li",[e._v("如果事件属于发送事件，时间戳加1并在消息中带上该时间戳")]),e._v(" "),r("li",[e._v("如果事件属于接收事件，时间戳 = Max(本地时间戳，消息中的时间戳) + 1")])]),e._v(" "),r("p",[e._v("假设有事件a、b，C(a)、C(b)分别表示事件a、b对应的Lamport时间戳，如果C(a) < C(b)，则有a发生在b之前(happened before)，记作 a -> b，例如图1中有 C1 -> B1。通过该定义，事件集中Lamport时间戳不等的事件可进行比较，我们获得事件的"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Partially_ordered_set#Formal_definition",target:"_blank",rel:"noopener noreferrer"}},[e._v("偏序关系"),r("OutboundLink")],1),e._v("(partial order)。")]),e._v(" "),r("p",[e._v("如果C(a) = C(b)，那a、b事件的顺序又是怎样的？假设a、b分别在节点P、Q上发生，P"),r("sub",[e._v("i、")]),e._v("Q"),r("sub",[e._v("j")]),e._v("分别表示我们给P、Q的编号，如果 C(a) = C(b) 并且 P"),r("sub",[e._v("i ")]),e._v("<Q"),r("sub",[e._v("j")]),e._v("，同样定义为a发生在b之前，记作 a => b。假如我们对图1的A、B、C分别编号A"),r("sub",[e._v("i")]),e._v(" = 1、B"),r("sub",[e._v("j")]),e._v(" = 2、C"),r("sub",[e._v("k")]),e._v(" = 3，因 C(B4) = C(C3) 并且 B"),r("sub",[e._v("j")]),e._v(" < C"),r("sub",[e._v("k")]),e._v("，则 B4 => C3。")]),e._v(" "),r("p",[e._v("通过以上定义，我们可以对所有事件排序、获得事件的"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Total_order",target:"_blank",rel:"noopener noreferrer"}},[e._v("全序关系"),r("OutboundLink")],1),e._v("(total order)。上图例子，我们可以从C1到A4进行排序。")]),e._v(" "),r("p",[r("strong",[e._v("Vector clock")])]),e._v(" "),r("p",[e._v("Lamport时间戳帮助我们得到事件顺序关系，但还有一种顺序关系不能用Lamport时间戳很好地表示出来，那就是同时发生关系(concurrent)"),r("sup",[e._v("[4]")]),e._v("。例如图1中事件B4和事件C3没有因果关系，属于同时发生事件，但Lamport时间戳定义两者有先后顺序。")]),e._v(" "),r("p",[e._v("Vector clock是在Lamport时间戳基础上演进的另一种逻辑时钟方法，它通过vector结构不但记录本节点的Lamport时间戳，同时也记录了其他节点的Lamport时间戳"),r("sup",[e._v("[5][6]")]),e._v("。Vector clock的原理与Lamport时间戳类似，使用图例如下：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201605/116770-20160502134654404-1109556515.png",alt:""}})]),e._v(" "),r("p",[r("em",[e._v("图2: Vector clock space time ("),r("em",[e._v("图片来源: wikipedia)")])])]),e._v(" "),r("p",[e._v("假设有事件a、b分别在节点P、Q上发生，Vector clock分别为T"),r("sub",[e._v("a")]),e._v("、T"),r("sub",[e._v("b")]),e._v("，如果 T"),r("sub",[e._v("b")]),e._v("[Q] > T"),r("sub",[e._v("a")]),e._v("[Q] 并且 T"),r("sub",[e._v("b")]),e._v("[P] >= T"),r("sub",[e._v("a")]),e._v("[P]，则a发生于b之前，记作 a -> b。到目前为止还和Lamport时间戳差别不大，那Vector clock怎么判别同时发生关系呢？")]),e._v(" "),r("p",[e._v("如果 T"),r("sub",[e._v("b")]),e._v("[Q] > T"),r("sub",[e._v("a")]),e._v("[Q] 并且 T"),r("sub",[e._v("b")]),e._v("[P] < T"),r("sub",[e._v("a")]),e._v("[P]，则认为a、b同时发生，记作 a <-> b。例如图2中节点B上的第4个事件 (A:2，B:4，C:1) 与节点C上的第2个事件 (B:3，C:2) 没有因果关系、属于同时发生事件。")]),e._v(" "),r("p",[r("strong",[e._v("Version vector")])]),e._v(" "),r("p",[e._v("基于Vector clock我们可以获得任意两个事件的顺序关系，结果或为先后顺序或为同时发生，识别事件顺序在工程实践中有很重要的引申应用，最常见的应用是发现数据冲突(detect conflict)。")]),e._v(" "),r("p",[e._v("分布式系统中数据一般存在多个副本(replication)，多个副本可能被同时更新，这会引起副本间数据不一致"),r("sup",[e._v("[7]")]),e._v("，Version vector的实现与Vector clock非常类似"),r("sup",[e._v("[8]")]),e._v("，目的用于发现数据冲突"),r("sup",[e._v("[9]")]),e._v("。下面通过一个例子说明Version vector的用法"),r("sup",[e._v("[10]")]),e._v("：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201605/116770-20160502183034013-800335383.png",alt:""}})]),e._v(" "),r("p",[r("em",[e._v("图3: Version vector")])]),e._v(" "),r("ul",[r("li",[e._v("client端写入数据，该请求被S"),r("sub",[e._v("x")]),e._v("处理并创建相应的vector ([S"),r("sub",[e._v("x")]),e._v(", 1])，记为数据D1")]),e._v(" "),r("li",[e._v("第2次请求也被S"),r("sub",[e._v("x")]),e._v("处理，数据修改为D2，vector修改为([S"),r("sub",[e._v("x")]),e._v(", 2])")]),e._v(" "),r("li",[e._v("第3、第4次请求分别被S"),r("sub",[e._v("y")]),e._v("、S"),r("sub",[e._v("z")]),e._v("处理，client端先读取到D2，然后D3、D4被写入S"),r("sub",[e._v("y")]),e._v("、S"),r("sub",[e._v("z")])]),e._v(" "),r("li",[e._v("第5次更新时client端读取到D2、D3和D4 3个数据版本，通过类似Vector clock判断同时发生关系的方法可判断D3、D4存在数据冲突，最终通过一定方法解决数据冲突并写入D5")])]),e._v(" "),r("p",[e._v("Vector clock只用于发现数据冲突，不能解决数据冲突。如何解决数据冲突因场景而异，具体方法有以最后更新为准(last write win)，或将冲突的数据交给client由client端决定如何处理，或通过quorum决议事先避免数据冲突的情况发生"),r("sup",[e._v("[11]")]),e._v("。")]),e._v(" "),r("p",[e._v("由于记录了所有数据在所有节点上的逻辑时钟信息，Vector clock和Version vector在实际应用中可能面临的一个问题是vector过大，用于数据管理的元数据(meta data)甚至大于数据本身"),r("sup",[e._v("[12]")]),e._v("。")]),e._v(" "),r("p",[e._v("解决该问题的方法是使用server id取代client id创建vector (因为server的数量相对client稳定)，或设定最大的size、如果超过该size值则淘汰最旧的vector信息"),r("sup",[e._v("[10][13]")]),e._v("。")]),e._v(" "),r("p",[r("strong",[e._v("小结")])]),e._v(" "),r("p",[e._v("以上介绍了分布式系统里逻辑时钟的表示方法，通过Lamport timestamps可以建立事件的全序关系，通过Vector clock可以比较任意两个事件的顺序关系并且能表示无因果关系的事件，将Vector clock的方法用于发现数据版本冲突，于是有了Version vector。")]),e._v(" "),r("p",[e._v("[1] "),r("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=2878574",target:"_blank",rel:"noopener noreferrer"}},[e._v("Time is an illusion"),r("OutboundLink")],1),e._v(", George Neville-Neil, 2016")]),e._v(" "),r("p",[e._v("[2] "),r("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=2745385&__hstc=53389751.f1483a2189ec5c779270b00cdb849993.1461983406379.1461983406379.1461997241982.2&__hssc=53389751.1.1461997241982&__hsfp=1028666893",target:"_blank",rel:"noopener noreferrer"}},[e._v("There is No Now"),r("OutboundLink")],1),e._v(", Justin Sheehy, 2015")]),e._v(" "),r("p",[e._v("[3] "),r("a",{attrs:{href:"http://research.microsoft.com/en-us/um/people/lamport/pubs/time-clocks.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Time, Clocks, and the Ordering of Events in a Distributed System"),r("OutboundLink")],1),e._v(", Leslie Lamport, 1978")]),e._v(" "),r("p",[e._v("[4] "),r("a",{attrs:{href:"http://zoo.cs.yale.edu/classes/cs426/2012/lab/bib/fidge88timestamps.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Timestamps in Message-Passing Systems That Preserve the Partial Ordering"),r("OutboundLink")],1),e._v(", Colin J. Fidge, 1988")]),e._v(" "),r("p",[e._v("[5] "),r("a",{attrs:{href:"http://www.vs.inf.ethz.ch/publ/papers/VirtTimeGlobStates.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Virtual Time and Global States of Distributed Systems"),r("OutboundLink")],1),e._v(", Friedemann Mattern, 1988")]),e._v(" "),r("p",[e._v("[6] "),r("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-easy/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why Vector Clocks are Easy"),r("OutboundLink")],1),e._v(", Bryan Fink, 2010")]),e._v(" "),r("p",[e._v("[7] "),r("a",{attrs:{href:"http://guide.couchdb.org/draft/conflicts.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conflict Management"),r("OutboundLink")],1),e._v(", CouchDB")]),e._v(" "),r("p",[e._v("[8] "),r("a",{attrs:{href:"https://haslab.wordpress.com/2011/07/08/version-vectors-are-not-vector-clocks/?__hstc=53389751.f1483a2189ec5c779270b00cdb849993.1461983406379.1461983406379.1461997241982.2&__hssc=53389751.1.1461997241982&__hsfp=1028666893",target:"_blank",rel:"noopener noreferrer"}},[e._v("Version Vectors are not Vector Clocks"),r("OutboundLink")],1),e._v(", Carlos Baquero, 2011")]),e._v(" "),r("p",[e._v("[9] "),r("a",{attrs:{href:"http://zoo.cs.yale.edu/classes/cs422/2013/bib/parker83detection.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Detection of Mutual Inconsistency in Distributed Systems"),r("OutboundLink")],1),e._v(", IEEE Transactions on Software Engineering , 1983")]),e._v(" "),r("p",[e._v("[10] "),r("a",{attrs:{href:"http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dynamo: Amazon’s Highly Available Key-value Store"),r("OutboundLink")],1),e._v(", Amazon, 2007")]),e._v(" "),r("p",[e._v("[11] "),r("a",{attrs:{href:"http://pl.atyp.us/wordpress/?p=2601",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conflict Resolution"),r("OutboundLink")],1),e._v(", Jeff Darcy , 2010")]),e._v(" "),r("p",[e._v("[12] "),r("a",{attrs:{href:"http://basho.com/posts/technical/why-vector-clocks-are-hard/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why Vector Clocks Are Hard"),r("OutboundLink")],1),e._v(", Justin Sheehy, 2010")]),e._v(" "),r("p",[e._v("[13] "),r("a",{attrs:{href:"http://www.bailis.org/blog/causality-is-expensive-and-what-to-do-about-it/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Causality Is Expensive (and What To Do About It)"),r("OutboundLink")],1),e._v(", Peter Bailis ,2014")])])}),[],!1,null,null,null);t.default=_.exports}}]);