(window.webpackJsonp=window.webpackJsonp||[]).push([[1357],{1754:function(t,a,s){"use strict";s.r(a);var e=s(13),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"table-of-contents"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%BD%91%E5%8D%A1%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8"}},[t._v("网卡和路由器")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%A4%E6%8D%A2%E6%9C%BA"}},[t._v("交换机")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BB%A5%E5%A4%AA%E7%BD%91"}},[t._v("以太网")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91vlan"}},[t._v("虚拟局域网VLAN")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#dhcp%E5%8D%8F%E8%AE%AE%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE"}},[t._v("DHCP协议(动态主机配置协议)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#arp%E5%8D%8F%E8%AE%AE"}},[t._v("ARP协议")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E7%BD%91%E5%85%B3%E5%92%8Cnat"}},[t._v("网关和NAT")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#dns%E5%8D%8F%E8%AE%AE%E5%92%8Chttp%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B"}},[t._v("DNS协议和http请求过程")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#icmp"}},[t._v("ICMP")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91vpn%E5%92%8C%E5%86%85%E7%BD%91ip"}},[t._v("虚拟专用网VPN和内网ip")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BA%94%E7%94%A8%E5%B1%82"}},[t._v("应用层")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#http"}},[t._v("http")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#http10-11%E5%92%8C20"}},[t._v("http1.0 1.1和2.0")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#10%E5%92%8C11%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8F%98%E5%8C%96"}},[t._v("1.0和1.1的主要变化")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#http10%E5%92%8Chttp20%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82"}},[t._v("http1.0和http2.0的区别。")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#get%E5%92%8Cpost"}},[t._v("get和post")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#"}}),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#session%E5%92%8Ccookie"}},[t._v("session和cookie")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#token"}},[t._v("token")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#cas%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95"}},[t._v("cas单点登录")])])])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#web%E5%AE%89%E5%85%A8%E5%92%8Chttps"}},[t._v("web安全和https")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86"}},[t._v("密码加密")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#xss%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB"}},[t._v("xss跨站脚本攻击")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf"}},[t._v("跨站点请求伪造csrf")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#sql-%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB"}},[t._v("SQL 注入攻击")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB"}},[t._v("拒绝服务攻击")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#https"}},[t._v("https")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BC%A0%E8%BE%93%E5%B1%82"}},[t._v("传输层")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#udp%E6%8A%A5%E6%96%87"}},[t._v("UDP报文")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#tcp-%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F"}},[t._v("TCP 首部格式")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[t._v("三次握手和四次挥手")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8D%8A%E8%BF%9E%E6%8E%A5syn%E5%92%8C%E6%B4%AA%E6%B3%9B%E6%B3%95%E6%94%BB%E5%87%BB"}},[t._v("半连接syn和洪泛法攻击")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"}},[t._v("为什么要三次握手")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#time-wait%E7%9A%84%E4%BD%9C%E7%94%A8"}},[t._v("time wait的作用")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE"}},[t._v("可靠传输协议")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#tcp%E7%9A%84%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85"}},[t._v("tcp的粘包拆包")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E7%BD%91%E7%BB%9C%E5%B1%82"}},[t._v("网络层")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#ip-%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F"}},[t._v("IP 数据报格式")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9F%90%E4%B8%AA%E8%81%9A%E5%90%88%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86%E7%BD%91%E7%BB%9C%E7%BB%99n%E5%8F%B0%E6%9C%BA%E5%99%A8%EF%BC%8C%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%88%E8%A6%81%E6%B1%82%E3%80%82%E3%80%82"}},[t._v("某个聚合路由地址划分网络给n台机器，是否符合要求。。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#ip-%E5%9C%B0%E5%9D%80%E7%BC%96%E5%9D%80%E6%96%B9%E5%BC%8F"}},[t._v("IP 地址编址方式")])]),t._v(" "),s("li",[t._v("["),s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md#1-%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),t._v("1. 分类](#[]httpsgithubcomcyc2018interview-notebookblobmasternotese8aea1e7ae97e69cbae7bd91e7bb9cmd1-e58886e7b1bb1-分类)")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ip%E5%88%86%E7%89%87%E8%AF%A6%E8%B0%88"}},[t._v("ip分片详谈")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%97%E6%B3%95"}},[t._v("路由选择协议和算法")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E9%93%BE%E8%B7%AF%E5%B1%82"}},[t._v("链路层")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[t._v("微信公众号")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[t._v("Java技术江湖")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[t._v("个人公众号：黄小斜")])])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"title-计算机网络学习总结date-2018-07-09-22-32-57tags-计算机网络categories-后端-技术总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#title-计算机网络学习总结date-2018-07-09-22-32-57tags-计算机网络categories-后端-技术总结"}},[t._v("#")]),t._v(" title: 计算机网络学习总结\ndate: 2018-07-09 22:32:57\ntags:\n- 计算机网络\ncategories:\n- 后端\n- 技术总结")]),t._v(" "),s("p",[t._v("这部分内容主要是基于一些关于计算机网络基础的学习总结，内容不全面，只讲述了其中的一小部分，后续会再补充，如有错误，还请见谅。")]),t._v(" "),s("p",[t._v("计算机网络常见概念")]),t._v(" "),s("h2",{attrs:{id:"网卡和路由器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网卡和路由器"}},[t._v("#")]),t._v(" 网卡和路由器")]),t._v(" "),s("p",[t._v("网卡是一个有mac地址的物理设备，通过mac地址与局域网内的交换机通信，交换机可以识别mac地址。")]),t._v(" "),s("p",[t._v("而单纯的中继器，集线器，双绞线等设备只识别物理层设备。")]),t._v(" "),s("p",[t._v("路由器则工作在3层ip层，必须要有ip才能工作，所以路由器每一个接口都对应一个ip，维护一个可以识别ip的路由表，进行ip数据报转发。")]),t._v(" "),s("h2",{attrs:{id:"交换机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交换机"}},[t._v("#")]),t._v(" 交换机")]),t._v(" "),s("p",[t._v("交换机具有自学习能力，学习的是交换表的内容。交换表中存储着 MAC 地址到接口的映射。")]),t._v(" "),s("h2",{attrs:{id:"以太网"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以太网"}},[t._v("#")]),t._v(" 以太网")]),t._v(" "),s("p",[t._v("以太网是一种星型拓扑结构局域网。")]),t._v(" "),s("p",[t._v("早期使用集线器进行连接，它是一种物理层设备，作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离。之后再将这个比特向其它所有接口。特别是，如果集线器同时收到同时从两个不同接口的帧，那么就发生了碰撞。")]),t._v(" "),s("p",[t._v("目前以太网使用交换机替代了集线器，它不会发生碰撞，能根据 MAC 地址进行存储转发。")]),t._v(" "),s("h2",{attrs:{id:"虚拟局域网vlan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟局域网vlan"}},[t._v("#")]),t._v(" 虚拟局域网VLAN")]),t._v(" "),s("p",[t._v("正常情况下，局域网中的链路层广播在整个局域网可达，而vlan可以在物理局域网中划分虚拟局域网，使广播帧只有在vlan当中的主机才能收到。")]),t._v(" "),s("p",[t._v("虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息，例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。")]),t._v(" "),s("h2",{attrs:{id:"dhcp协议-动态主机配置协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dhcp协议-动态主机配置协议"}},[t._v("#")]),t._v(" DHCP协议(动态主机配置协议)")]),t._v(" "),s("p",[t._v("首先DHCP是为了让主机获得一个ip地址，所以主机会发一个0.0.0.0为发送方，255.255.255.255为接收方的ip数据报，也就是广播数据报，并且广播数据包只在局域网中有效，然后链路层解析为数据帧，发送给局域网内的DHCP服务器。")]),t._v(" "),s("h2",{attrs:{id:"arp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arp协议"}},[t._v("#")]),t._v(" ARP协议")]),t._v(" "),s("p",[t._v("arp负责把ip地址解析成局域网内的一个mac地址，只在局域网中有效。逆arp则把mac地址解析成ip地址。")]),t._v(" "),s("p",[t._v("网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("ARP 实现由 IP 地址得到 MAC 地址。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。")])]),t._v(" "),s("h2",{attrs:{id:"网关和nat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网关和nat"}},[t._v("#")]),t._v(" 网关和NAT")]),t._v(" "),s("p",[t._v("当需要和外部局域网访问时，需要经过网关服务器以便兼容不同协议栈。局域网内部使用内网ip，经过网关时要转成外网ip，网关会帮你完成改写操作，当收到数据报时，网关又会帮你把ip改为内网ip。这种修改ip隐藏内部网络的方式叫做NAT。")]),t._v(" "),s("p",[t._v("nat穿透的方式是主机和网关服务器协定一个ip地址作为主机服务的ip，所以主机可以通过这个ip和外网交流。")]),t._v(" "),s("h2",{attrs:{id:"dns协议和http请求过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns协议和http请求过程"}},[t._v("#")]),t._v(" DNS协议和http请求过程")]),t._v(" "),s("p",[t._v("访问一个域名时，会发送dns报文请求（应用层）给本地的DNS服务器，解析出域名对应的ip，然后三次握手建立连接，（当然TCP数据报由本地局域网经过网关转给外网，再经过多次路由才到达目标主机），然后发送http请求获得响应报文")]),t._v(" "),s("h2",{attrs:{id:"icmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#icmp"}},[t._v("#")]),t._v(" ICMP")]),t._v(" "),s("p",[t._v("ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/e3124763-f75e-46c3-ba82-341e6c98d862.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/e3124763-f75e-46c3-ba82-341e6c98d862.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("ICMP 报文分为差错报告报文和询问报文。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/aa29cc88-7256-4399-8c7f-3cf4a6489559.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/aa29cc88-7256-4399-8c7f-3cf4a6489559.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1. Ping\nPing 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。\n\nPing 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报。\n\n2. Traceroute\nTraceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径，事实上，traceroute也封装着无法交付的udp，和ping类似。。\n")])])]),s("p",[t._v("源主机向目的主机发送一连串的 IP 数据报，每个数据包的ttl时间不同，所以可以跟踪每一跳路由的信息。")]),t._v(" "),s("p",[t._v("==但是因为数据报封装的是无法交付的UDP报文，因此目的主机要向源主机发送 ICMP终点不可达差错报告报文。之后源主机知道了到达目的主机所经过的路由器 IP地址以及到达每个路由器的往返时间。==")]),t._v(" "),s("h2",{attrs:{id:"虚拟专用网vpn和内网ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟专用网vpn和内网ip"}},[t._v("#")]),t._v(" 虚拟专用网VPN和内网ip")]),t._v(" "),s("p",[t._v("由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。")]),t._v(" "),s("p",[t._v("有三个专用地址块：")]),t._v(" "),s("ul",[s("li",[t._v("10.0.0.0 ~ 10.255.255.255")]),t._v(" "),s("li",[t._v("172.16.0.0 ~ 172.31.255.255")]),t._v(" "),s("li",[t._v("192.168.0.0 ~ 192.168.255.255")])]),t._v(" "),s("p",[t._v("这些ip也称为内网ip，用于局域网间的通信，只能通过网关抵达公网。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/1556770b-8c01-4681-af10-46f1df69202c.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/1556770b-8c01-4681-af10-46f1df69202c.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("使用隧道技术实现vpn。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("原理是；普通的内网ip无法被访问到，一般可以使用nat技术让网关作为中转人，而ip数据报也会改写成网关服务器的地址。\n\n如果想让数据报保留内网地址，并且实现跨公网访问，那么只能通过隧道技术，把内网数据报加密包装在公网ip数据报中，然后通过公网ip抵达对方的专用网络，进行拆包和发送。\n\n为什么vpn能翻墙呢，因为我们通过对vpn服务器的连接，可以将内网ip数据报装在里面，发送给vpn，vpn解析后再发送给真正的服务器。\n\n由于本地网关阻拦了某些网站的请求，所以我们要把这个请求加密封装，然后通过隧道把数据发给一个海外服务器，让他真正完成请求。\n")])])]),s("h2",{attrs:{id:"应用层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[t._v("#")]),t._v(" 应用层")]),t._v(" "),s("p",[t._v("应用层的协议主要是http，ftp这类协议，http访问超文本html，而ftp访问文件系统。")]),t._v(" "),s("h3",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" http")]),t._v(" "),s("p",[t._v("通过浏览器可以方便地进行dns解析，建立tcp连接，发送http请求，得到http响应，这些工作都是浏览器完成的。")]),t._v(" "),s("h3",{attrs:{id:"http1-0-1-1和2-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-1-1和2-0"}},[t._v("#")]),t._v(" http1.0 1.1和2.0")]),t._v(" "),s("h4",{attrs:{id:"_1-0和1-1的主要变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-0和1-1的主要变化"}},[t._v("#")]),t._v(" 1.0和1.1的主要变化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1 http1.0经过多年发展，在1.1提出了改进。\n首先是提出了长连接，http请求可以在一次tcp连接中不断发送。\n\n2 然后是http1.1支持只发送header而不发送body。原因是先用header判断能否成功，再发数据，节约带宽，事实上，post请求默认就是这样做的。\n\n3 http1.1的host字段。由于虚拟主机可以支持多个域名，所以一般将域名解析后得到host。\n")])])]),s("h4",{attrs:{id:"http1-0和http2-0的区别。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0和http2-0的区别。"}},[t._v("#")]),t._v(" http1.0和http2.0的区别。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("http2.0变化巨大。\n\n1 http支持多路复用，同一个连接可以并发处理多个请求，方法是把http数据包拆为多个帧，并发有序的发送，根据序号在另一端进行重组，而不需要一个个http请求顺序到达。\n\n2 http2.0支持服务端推送，就是服务端在http请求到达后，除了返回数据之外，还推送了额外的内容给客户端。\n\n3HTTP2.0压缩了请求头，同时基本单位是二进制帧流，这样的数据占用空间更少。\n\n4http2.0只适用于https场景，因为其在http和tcp中间加了一层ssl层。\n")])])]),s("h3",{attrs:{id:"get和post"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get和post"}},[t._v("#")]),t._v(" get和post")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("get和post本质都是http请求，只不过对他们的作用做了界定和适配，并且让他们适应各自的场景。\n\n1本质区别是get只是一次http请求，post先发请求体再发请求体，实际上是两次请求\n\n2表面区别：\n\nget可以cache而post不能，因为浏览器是这么安排的\n\n一般设计get是幂等的而post不是\n\nget的参数放在url传递，而post放在请求体里，因为get没有请求体。\n所以get请求不安全，并且有长度限制（url不能太长），而post几乎没有限制，请求体可以很大。\n")])])]),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"session和cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session和cookie"}},[t._v("#")]),t._v(" session和cookie")]),t._v(" "),s("p",[t._v("并且浏览器还维护了cookie以便记录用于对网站的一些信息，下次请求时在http报文中带上这些数据，服务器接收以后根据cookie中的sessionid获取对应的session即可")]),t._v(" "),s("h4",{attrs:{id:"token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" token")]),t._v(" "),s("p",[t._v("session一般维护在内存中，有时候也会持久化到数据库，但是如果session由单点维护可能出现宕机等情况，于是一般会采用分布式的方案。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("session存放的几种方案。\n0 存在内存中。用sessionid标识用户。\n这样的session十分依赖于cookie。如果浏览器禁用了cookie则session无用武之地。\n\n当然也可以把内容存在数据库里，缺点是数据库访问压力较大。\n\n1有做法会将session内容存在cookie中，但前提是经过了加密，然后下次服务器对其进行解密，但是这样浏览器需要维护太多内容了。\n\n2当用户登录或者执行某些操作，则使用用户的一部分字段信息进行加密算法得到一串字符串成为token，用于唯一标识用户，或者是某些操作，比如登录，支付，服务端生成该token返回给用户，用户提交请求时必须带上这个token，就可以确认用户信息以及操作是否合法了。\n\n这样我们不需要存session，只需要在想得到用户信息时解密token即可。\n\ntoken还有一个好处就是可以在移动端和pc端兼容，因为移动端不支持cookie。\n\n3token和oauth。经常有第三方授权登录的例子，本质就是使用token。首先我们打开授权登录页，登陆后服务端返回token，我们提交第三方的请求时，带上这个token，第三方不知道他是啥意思，并且token过段时间就过期了。\n")])])]),s("h4",{attrs:{id:"cas单点登录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas单点登录"}},[t._v("#")]),t._v(" cas单点登录")]),t._v(" "),s("p",[t._v("单点登录是为了多个平台之间公用一个授权系统，做法是，所有登录都要指向统一登录服务，登陆成功以后在认证中心建立session，并且得到ticket，然后重定向页面，此时页面也会向认证中心确认ticket是否合法，然后就可以访问其他系统的页面了。")]),t._v(" "),s("p",[t._v("从而访问其他系统时，由于已经有了认证中心的cookie，所以直接带上ticket访问即可。")]),t._v(" "),s("p",[t._v("每次访问新系统时需要在认证中心注册session，然后单点退出时再把这些session退出，才能实现用户登出。")]),t._v(" "),s("h2",{attrs:{id:"web安全和https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web安全和https"}},[t._v("#")]),t._v(" web安全和https")]),t._v(" "),s("h3",{attrs:{id:"密码加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#密码加密"}},[t._v("#")]),t._v(" 密码加密")]),t._v(" "),s("p",[t._v("MD5等加密方法可以用来对密码进行加密。一般还会加盐")]),t._v(" "),s("h3",{attrs:{id:"xss跨站脚本攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss跨站脚本攻击"}},[t._v("#")]),t._v(" xss跨站脚本攻击")]),t._v(" "),s("p",[t._v("利用有输入功能网站的输入框来注入JavaScript脚本代码，用户访问该页面时会自动执行某些脚本代码，导致cookie等个人信息泄露，可能会被转发到其他网站。")]),t._v(" "),s("p",[t._v("解决办法是对输入进行检验，利用一个些工具类就可以做到。")]),t._v(" "),s("h3",{attrs:{id:"跨站点请求伪造csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨站点请求伪造csrf"}},[t._v("#")]),t._v(" 跨站点请求伪造csrf")]),t._v(" "),s("p",[t._v("首先用户访问了一个网站并登陆，会把cookie保留在浏览器，\n然后某些网站用一些隐性链接诱导用户点击，点击时发送请求会携带浏览器中的cookie，比如支付宝的账号密码，通过该cookie再去伪造一个支付宝支付请求，达到伪造请求的目的。")]),t._v(" "),s("p",[t._v("解决这个问题的办法就是禁止js请求跨域名。但是他为ajax提供了特殊定制。")]),t._v(" "),s("h3",{attrs:{id:"sql-注入攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-注入攻击"}},[t._v("#")]),t._v(" SQL 注入攻击")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("概念\n服务器上的数据库运行非法的 SQL 语句，主要通过拼接来完成。")])]),t._v(" "),s("li",[s("p",[t._v("防范手段\n（一）使用参数化查询")])])]),t._v(" "),s("p",[t._v("以下以 Java 中的 PreparedStatement 为例，它是预先编译的 SQL 语句，可以传入适当参数并且多次执行。由于没有拼接的过程，因此可以防止 SQL 注入的发生。")]),t._v(" "),s("p",[t._v("（二）单引号转换")]),t._v(" "),s("p",[t._v("将传入的参数中的单引号转换为连续两个单引号，PHP 中的 Magic quote 可以完成这个功能。")]),t._v(" "),s("h3",{attrs:{id:"拒绝服务攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拒绝服务攻击"}},[t._v("#")]),t._v(" 拒绝服务攻击")]),t._v(" "),s("p",[t._v("拒绝服务攻击（denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。")]),t._v(" "),s("p",[t._v("分布式拒绝服务攻击（distributed denial-of-service attack，DDoS），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。")]),t._v(" "),s("p",[t._v("DDoS攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。")]),t._v(" "),s("p",[t._v("这种攻击方式可分为以下几种：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("通过使网络过载来干扰甚至阻断正常的网络通讯；\n通过向服务器提交大量请求，使服务器超负荷；\n阻断某一用户访问服务器；\n阻断某服务与特定系统或个人的通讯。\n")])])]),s("p",[t._v("攻击现象")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("被攻击主机上有大量等待的TCP连接；\n网络中充斥着大量的无用的数据包；\n源地址为假 制造高流量无用数据，造成网络拥塞，使受害主机无法正常和外界通讯；\n利用受害主机提供的传输协议上的缺陷反复高速的发出特定的服务请求，使主机无法处理所有正常请求；\n严重时会造成系统死机。\n")])])]),s("p",[t._v("总体来说，对DoS和DDoS的防范主要从下面几个方面考虑：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("尽可能对系统加载最新补丁，并采取有效的合规性配置，降低漏洞利用风险；\n\n采取合适的安全域划分，配置防火墙、入侵检测和防范系统，减缓攻击。\n\n采用分布式组网、负载均衡、提升系统容量等可靠性措施，增强总体服务能力。\n")])])]),s("h3",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" https")]),t._v(" "),s("p",[t._v("https博大精深，首先先来看看他的基础知识")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1对称加密和非对称加密\n\n对称加密两方使用同一把密钥加密和解密，传输密钥时如果丢失就会被破解。\n\n2非对称加密两方各有一把私钥，而公钥公开，A用私钥加密，把公钥和数据传给B，B用公钥解密。同理，B用私钥对数据进行加密，返回给A，A也用公钥进行解密。\n\n3非对称加密只要私钥不丢就很安全，但是效率比较低，所以一般使用非对称加密传输对称加密的密钥，使用对称加密完成数据传输。\n\n4数字签名，为了避免数据在传输过程中被替换，比如黑客修改了你的报文内容，但是你并不知道，所以我们让发送端做一个数字签名，把数据的摘要消息进行一个加密，比如MD5，得到一个签名，和数据一起发送。然后接收端把数据摘要进行md5加密，如果和签名一样，则说明数据确实是真的。\n\n5数字证书，对称加密中，双方使用公钥进行解密。虽然数字签名可以保证数据不被替换，但是数据是由公钥加密的，如果公钥也被替换，则仍然可以伪造数据，因为用户不知道对方提供的公钥其实是假的。\n\n所以为了保证发送方的公钥是真的，CA证书机构会负责颁发一个证书，里面的公钥保证是真的，用户请求服务器时，服务器将证书发给用户，这个证书是经由系统内置证书的备案的。\n")])])]),s("p",[t._v("​"),s("br"),t._v("\n​"),s("br"),t._v("\n6 https过程")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("用户发送请求，服务器返回一个数字证书。\n\n用户在浏览器端生成一个随机数，使用证书中的公钥加密，发送给服务端。\n\n服务端使用公钥解密该密文，得到随机数。\n\n往后两者使用该随机数作为公钥进行对称加密。\n\n\n番外：关于公钥加密私钥解密与私钥加密公钥解密说明\n第一种是签名,使用私钥加密,公钥解密,用于让所有公钥所有者验证私钥所有者的身份并且用来防止私钥所有者发布的内容被篡改.但是不用来保证内容不被他人获得. \n\n第二种是加密,用公钥加密,私钥解密,用于向公钥所有者发布信息,这个信息可能被他人篡改,但是无法被他人获得.搜索 \n")])])]),s("h2",{attrs:{id:"传输层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("UDP 和 TCP 的特点\n用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。\n\n传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。\n")])])]),s("p",[t._v("TCP是传输层最重要的协议。")]),t._v(" "),s("blockquote",[s("p",[t._v("由于网络层只提供最大交付的服务，尽可能地完成路由转发，以及把链路层报文传送给任意一台主机。他做的工作很专注，所以不会提供其他的可靠性保证。")]),t._v(" "),s("p",[t._v("但是真实网络环境下随时会发生丢包，乱序，数据内容出错等情况，这些情况必须得到处理，于是我们使用传输层tcp来解决这些问题。")])]),t._v(" "),s("h3",{attrs:{id:"udp报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp报文"}},[t._v("#")]),t._v(" UDP报文")]),t._v(" "),s("p",[t._v("伪首部的意义：伪首部并非TCP&UDP数据报中实际的有效成分。伪首部是一个虚拟的数据结构，其中的信息是从数据报所在IP分组头的分组头中提取的，既不向下传送也不向上递交，而仅仅是为计算校验和。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg",alt:"image"}})]),t._v(" "),s("p",[t._v("首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。")]),t._v(" "),s("h3",{attrs:{id:"tcp-首部格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-首部格式"}},[t._v("#")]),t._v(" TCP 首部格式")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/55dc4e84-573d-4c13-a765-52ed1dd251f9.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/55dc4e84-573d-4c13-a765-52ed1dd251f9.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("序号")]),t._v(" ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("确认号")]),t._v(" ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据偏移")]),t._v(" ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("确认 ACK")]),t._v(" ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("同步 SYN")]),t._v(" ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("终止 FIN")]),t._v(" ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("窗口")]),t._v(" ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。")])]),t._v(" "),s("li")]),t._v(" "),s("h3",{attrs:{id:"三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手和四次挥手"}},[t._v("#")]),t._v(" 三次握手和四次挥手")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("为了保证tcp的可靠传输，需要建立起一条通路，也就是所谓连接。这条通路必须保证有效并且能正确结束。\n")])])]),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/e92d0ebc-7d46-413b-aec1-34a39602f787.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/e92d0ebc-7d46-413b-aec1-34a39602f787.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("​"),s("br"),t._v("\n三次握手")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1 首先客户端发送连接请求syn，携带随机数x。\n2 服务端返回请求ack，x + 1,说明服务端对x进行了回复。\n3 客户端返回请求ack，y，说明接受到了信息并且开始传输数据，起始数据为y。\n\n客户端状态时syn_send和establish\n服务端则是从listen到syn_rcvd，再到establish\n")])])]),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("四次挥手\n\n1 首先客户端请求断开连接，发送fin请求，服务端返回fin的ack，继续处理断开前需要处理完的数据。\n\n2 过了一会，服务端处理完数据发送给客户端ack，表明已经关闭，客户端最后再发一个ack给服务端，如果服务端已关闭则无反应，客户端经过两个ttl后挥手完毕，确认服务端断开。这两个ttl成为time wait状态，用于确定服务端真的关闭。\n\n3 客户端发完fin后的状态从establish变为fin1——wait，服务端发完ack后的状态从establish变为closewait。\n\n4 客户端收到第一个ack后进入fin_2wait状态，服务端过了一会发送last——ack给客户端，说明关闭好了，客户端收到ack后进入timewait，然后发送ack。双方都closed。\n")])])]),s("h3",{attrs:{id:"半连接syn和洪泛法攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#半连接syn和洪泛法攻击"}},[t._v("#")]),t._v(" 半连接syn和洪泛法攻击")]),t._v(" "),s("p",[t._v("黑客开启大量的syn请求而不发送ack，服务端开启半连接等待ack，直到资源耗尽，所以必须检测来访ip")]),t._v(" "),s("h3",{attrs:{id:"为什么要三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手"}},[t._v("#")]),t._v(" 为什么要三次握手")]),t._v(" "),s("p",[t._v("三次握手的原因")]),t._v(" "),s("p",[t._v("第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。")]),t._v(" "),s("p",[t._v("也就是说，如果只有两次握手，服务端返回ack后直接通信，那么如果客户端因为网络问题没有收到ack，可能会再次请求连接，但时服务端不知道这其实是同一个请求，于是又打开了一个连接，相当于维护了很多的无用连接。")]),t._v(" "),s("h3",{attrs:{id:"time-wait的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-wait的作用"}},[t._v("#")]),t._v(" time wait的作用")]),t._v(" "),s("p",[t._v("1 需要服务端可靠地终止连接，如果处于time_wait客户端发给服务端的ack报文丢失，则服务端会再发一次fin，此时客户端不应该关闭。")]),t._v(" "),s("p",[t._v("2 保证迟来的tcp报文有时间被丢弃，因为2msl里超时抵达的报文都会被丢弃。")]),t._v(" "),s("h2",{attrs:{id:"可靠传输协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输协议"}},[t._v("#")]),t._v(" 可靠传输协议")]),t._v(" "),s("p",[t._v("TCP协议有三个重要属性。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("可靠传输，主要通过有序接收，确认后发送，以及超时重传来实现，并且使用分片来提高发送效率，通过检验和避免错误。\n\n流量控制，主要通过窗口限制接收和发送速率。\n\n拥塞控制，主要通过不同拥塞状态的算法来处理拥塞，一开始发的比较慢，然后指数增加，当丢包时再降低速度，重新开始第一阶段，避免拥塞。\n")])])]),s("p",[t._v("总结以下就是几个特点：")]),t._v(" "),s("p",[t._v("TCP 可靠传输")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("TCP 使用超时重传来实现可靠传输：\n\n1 如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。\n")])])]),s("p",[t._v("​"),s("br"),t._v("\n2 滑动窗口可以连续发送多个数据再统一进行确认。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("   因为发送端希望在收到确认前，继续发送其它报文段。比如说在收到0号报文的确认前还发出了1-3号的报文，这样提高了信道的利用率。\n   \n3 滑动窗口只重传丢失的数据报\n   \n但可以想想，0-4发出去后可能要重传，所以需要一个缓冲区维护这些报文，所以就有了窗口。\n\n4每当完成一个确认窗口往前滑动一格，可以传新的一个数据，因此可以顺序发送顺序确认\n")])])]),s("p",[t._v("TCP 流量控制")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("流量控制是为了控制发送方发送速率，保证接收方来得及接收。\n\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n")])])]),s("p",[t._v("TCP 拥塞控制")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接受，而拥塞控制是为了降低整个网络的拥塞程度。\n\nTCP 主要通过四种算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n\n一般刚开始时慢开始，然后拥塞避免，出现个别丢包时（连续三个包序号不对），\n\n则执行快重传，然后进入快恢复阶段，接着继续拥塞避免。如果发生多次超时也就是拥塞时，直接进入慢开始。\n")])])]),s("blockquote",[s("p",[t._v("这种情况下，只是丢失个别报文段，而不是网络拥塞，因此执行快恢复，令 ssthresh = cwnd/2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。")])]),t._v(" "),s("p",[t._v("==发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口==。")]),t._v(" "),s("p",[t._v("滑动窗口协议综合实现了上述这一些内容：")]),t._v(" "),s("p",[t._v("为什么要使用滑动窗口，因为滑动窗口可以实现可靠传输，流量控制和拥塞控制（拥塞控制用的是拥塞窗口变量）")]),t._v(" "),s("h3",{attrs:{id:"tcp的粘包拆包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp的粘包拆包"}},[t._v("#")]),t._v(" tcp的粘包拆包")]),t._v(" "),s("p",[t._v("tcp报文是流式的数据，没有标识数据结束，只有序号等字段，tcp协议自动完成数据报的切分。由于tcp使用缓冲区发送，又没有标识结束，当缓冲区的数据没清空又有新数据进来，就会发生粘包，如果数据太大存装不下，就会被拆包。")]),t._v(" "),s("h2",{attrs:{id:"网络层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),s("h2",{attrs:{id:"ip-数据报格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip-数据报格式"}},[t._v("#")]),t._v(" IP 数据报格式")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("版本")]),t._v(" : 有 4（IPv4）和 6（IPv6）两个值；")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("首部长度")]),t._v(" : 占 4 位，因此最大值为 15。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("总长度")]),t._v(" : 包括首部长度和数据部分长度。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("生存时间")]),t._v(" ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。")])])]),t._v(" "),s("p",[t._v("==*   "),s("strong",[t._v("协议")]),t._v(" ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。==")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("首部检验和")]),t._v(" ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("片偏移")]),t._v(" : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/23ba890e-e11c-45e2-a20c-64d217f83430.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/23ba890e-e11c-45e2-a20c-64d217f83430.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("ip层只保证尽最大努力交付，他所承载的一切都是对路由，转发，已经网络传输最友好的设计。\n\n路由器负责记录路由表和转发ip数据报，路由表记录着ip地址和下一跳路由的端口的对应关系。\n\n由于路由聚合的缘故，一般用170.177.233.0/24就可以标识好几个网络了。\n\n以前会使用A，B，C类地址，和子网，现在直接使用地址聚合，前24位是网络号，后面8位是主机号。\n\n## 某个聚合路由地址划分网络给n台机器，是否符合要求。。\n\n要看这个网络中的主机号能否达到n个。\n")])])]),s("h3",{attrs:{id:"ip-地址编址方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip-地址编址方式"}},[t._v("#")]),t._v(" IP 地址编址方式")]),t._v(" "),s("p",[t._v("IP 地址的编址方式经历了三个历史阶段：")]),t._v(" "),s("ul",[s("li",[t._v("分类")]),t._v(" "),s("li",[t._v("子网划分")]),t._v(" "),s("li",[t._v("无分类")])]),t._v(" "),s("h3",{attrs:{id:"_1-分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-分类"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md#1-%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),t._v("1. 分类")]),t._v(" "),s("p",[t._v("由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。")]),t._v(" "),s("p",[t._v("IP 地址 ::= {< 网络号 >, < 主机号 >}")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/pics/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://github.com/CyC2018/Interview-Notebook/raw/master/pics/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("子网划分")]),t._v(" "),s("p",[t._v("通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。注意，外部网络看不到子网的存在。")]),t._v(" "),s("p",[t._v("IP 地址 ::= {< 网络号 >, < 子网号 >, < 主机号 >}")]),t._v(" "),s("p",[t._v("要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。")])]),t._v(" "),s("li",[s("p",[t._v("无分类")]),t._v(" "),s("p",[t._v("无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。")]),t._v(" "),s("p",[t._v("IP 地址 ::= {< 网络前缀号 >, < 主机号 >}")]),t._v(" "),s("p",[t._v("CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。")]),t._v(" "),s("p",[t._v("CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。")])])]),t._v(" "),s("p",[t._v("一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。")]),t._v(" "),s("p",[t._v("把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。")]),t._v(" "),s("p",[t._v("在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。")]),t._v(" "),s("p",[t._v("总结")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("使用分类法的ip必须标识是哪一类地址，比较麻烦，而且一旦设置为某类地址它就只能使用那一部分地址空间了。\n\n使用子网掩码可以避免使用分类并且更灵活地决定网络号和主机号的划分。但是需要配置子网掩码，比较复杂。\n\nCIDR 138.1.2.11/24\n使用CIDR避免了子网划分，直接使用后n位作为网络号，简化了子网的配置（实际上用n代替了子网掩码）。并且在路由器中可以使用地址聚合，一个ip可以聚合多个网络号。\n")])])]),s("h3",{attrs:{id:"ip分片详谈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip分片详谈"}},[t._v("#")]),t._v(" ip分片详谈")]),t._v(" "),s("p",[t._v("在TCP/IP分层中，数据链路层用MTU（Maximum Transmission Unit，最大传输单元）来限制所能传输的数据包大小，MTU是指一次传送的数据最大长度，不包括数据链路层数据帧的帧头，如以太网的MTU为1500字节，实际上数据帧的最大长度为1512字节，其中以太网数据帧的帧头为12字节。")]),t._v(" "),s("p",[t._v("当发送的IP数据报的大小超过了MTU时，IP层就需要对数据进行分片，否则数据将无法发送成功。")]),t._v(" "),s("p",[t._v("IP分片的实现")]),t._v(" "),s("blockquote",[s("p",[t._v("IP分片发生在IP层，不仅源端主机会进行分片，中间的路由器也有可能分片，因为不同的网络的MTU是不一样的，如果传输路径上的某个网络的MTU比源端网络的MTU要小，路由器就可能对IP数据报再次进行分片。而分片数据的重组只会发生在目的端的IP层。")])]),t._v(" "),s("p",[t._v("==避免IP分片==")]),t._v(" "),s("blockquote",[s("p",[t._v("在网络编程中，我们要避免出现IP分片，那么为什么要避免呢？原因是IP层是没有超时重传机制的，如果IP层对一个数据包进行了分片，只要有一个分片丢失了，只能依赖于传输层进行重传，结果是所有的分片都要重传一遍，这个代价有点大。由此可见，IP分片会大大降低传输层传送数据的成功率，所以我们要避免IP分片。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("对于UDP包，我们需要在应用层去限制每个包的大小，一般不要超过1472字节，即以太网MTU（1500）—UDP首部（8）—IP首部（20）。\n\n对于TCP数据，应用层就不需要考虑这个问题了，因为传输层已经帮我们做了。\n")])])]),s("p",[t._v("在建立连接的三次握手的过程中，连接双方会相互通告MSS（Maximum Segment =Size，最大报文段长度），MSS一般是MTU—IP首部（20）—TCP首部（20），每次发送的TCP数据都不会超过双方MSS的最小值，所以就保证了IP数据报不会超过MTU，避免了IP分片。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("外部网关协议 BGP")]),t._v(" "),s("p",[t._v("BGP（Border Gateway Protocol，边界网关协议）")]),t._v(" "),s("p",[t._v("AS 之间的路由选择很困难，主要是因为互联网规模很大。并且各个 AS 内部使用不同的路由选择协议，就无法准确定义路径的度量。并且 AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。")]),t._v(" "),s("p",[t._v("BGP 只能寻找一条比较好的路由，而不是最佳路由。")]),t._v(" "),s("p",[t._v("每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。")])])]),t._v(" "),s("h3",{attrs:{id:"路由选择协议和算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由选择协议和算法"}},[t._v("#")]),t._v(" 路由选择协议和算法")]),t._v(" "),s("blockquote",[s("p",[t._v("路由选择协议\n路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。")]),t._v(" "),s("p",[t._v("互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。")]),t._v(" "),s("p",[t._v("可以把路由选择协议划分为两大类：")]),t._v(" "),s("p",[t._v("自治系统内部的路由选择：RIP 和 OSPF\n自治系统间的路由选择：BGP")])]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1. 内部网关协议 RIP\nRIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1，跳数最多为 15，超过 15 表示不可达。\n\nRIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。\n\n2. 内部网关协议 OSPF\n开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。\n\n开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。\n")])])]),s("p",[t._v("OSPF 具有以下特点：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("计算出最短路径，然后向本自治系统中的所有路由器发送信息，这种方法是洪泛法。\n\n发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。\n\n变化时，路由器才会发送信息。\n    \n所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。\n")])])]),s("p",[t._v("总结：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("AS是一个自治域，一般是指相似度很大公用一个协议的路由器族，比如同一个运营商的网络。\n\n因特网中AS之间的路由选择协议是BGP。\n\nAS内的路由选择协议有RIP和OSPF。\n\nRIP两两交换，最后大家都同步。\n\nOSPF找到最短路径。告诉大家。\n")])])]),s("h2",{attrs:{id:"链路层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链路层"}},[t._v("#")]),t._v(" 链路层")]),t._v(" "),s("p",[t._v("链路层最主要是指局域网内的网络交互了，使用mac地址通过交换机进行通信，其中用得最多的局域网协议就是以太网。")]),t._v(" "),s("p",[t._v("链路层使用MTU表示最大传输帧长度，报文长度不能超过MTU,否则会进行分片，比如比较大的IP数据报就会被分片，为了避免被分片。一般要控制IP报文长度。")]),t._v(" "),s("p",[t._v("广播：")]),t._v(" "),s("p",[t._v("要理解什么是广播风暴，就必须先理解网络通信技术。 网络上的一个节点，它发送一个数据帧或包，被传输到由广播域定义的本地网段上的每个节点就是广播。")]),t._v(" "),s("blockquote",[s("p",[t._v("网络广播分为第2层广播和第3层广播。第2层广播也称硬件广播，用于在局域网内向所有的结点发送数据，通常不会穿过局域网的边界（路由器），除非它变成一个单播。广播将是一个二进制的全1或者十六进制全F的地址。而第3层广播用于在这个网络内向所有的结点发送数据。")])]),t._v(" "),s("p",[t._v("帧的传输方式，即单播帧（Unicast Frame）、多播帧（Multicast Frame）和广播帧（Broadcast Frame）。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1、单播帧\n单播帧也称“点对点”通信。此时帧的接收和传递只在两个节点之间进行，帧的目的MAC地址就是对方的MAC地址，网络设备（指交换机和路由器）根据帧中的目的MAC地址，将帧转发出去。\n\n2、多播帧\n多播帧可以理解为一个人向多个人（但不是在场的所有人）说话，这样能够提高通话的效率。多播占网络中的比重并不多，主要应用于网络设备内部通信、网上视频会议、网上视频点播等。\n\n3、广播帧\n广播帧可以理解为一个人对在场的所有人说话，这样做的好处是通话效率高，信息一下子就可以传递到全体。在广播帧中，帧头中的目的MAC地址是“FF.FF.FF.FF.FF.FF”，代表网络上所有主机网卡的MAC地址。\n\n广播帧在网络中是必不可少的，如客户机通过DHCP自动获得IP地址的过程就是通过广播帧来实现的。而且，由于设备之间也需要相互通信，因此在网络中即使没有用户人为地发送广播帧，网络上也会出现一定数量的广播帧。\n\n同单播和多播相比，广播几乎占用了子网内网络的所有带宽。网络中不能长时间出现大量的广播帧，否则就会出现所谓的“广播风暴”（每秒的广播帧数在1000以上）。拿开会打一个比方，在会场上只能有一个人发言，如果所有人都同时发言的话，会场上就会乱成一锅粥。广播风暴就是网络长时间被大量的广播数据包所占用，使正常的点对点通信无法正常进行，其外在表现为网络速度奇慢无比。出现广播风暴的原因有很多，一块故障网卡就可能长时间地在网络上发送广播包而导致广播风暴。\n\n使用路由器或三层交换机能够实现在不同子网间隔离广播风暴的作用。当路由器或三层交换机收到广播帧时并不处理它，使它无法再传递到其他子网中，从而达到隔离广播风暴的目的。因此在由几百台甚至上千台电脑构成的大中型局域网中，为了隔离广播风暴，都要进行子网划分。\n使用vlan完全可以隔离广播风暴。\n")])])]),s("blockquote",[s("p",[t._v("在交换以太网上运行TCP/IP环境下：\n二层广播是在数据链路层的广播，它 的广播范围是二层交换机连接的所有端口；二层广播不能通过路由器。")]),t._v(" "),s("p",[t._v("三层广播就是在网络层的广播，它的范围是同一IP子网内的设备，子网广播也不能通过路由器。")]),t._v(" "),s("p",[t._v("第三层的数据必须通过第二层的封装再发送，所以三层广播必然通过二层广播来实现。")]),t._v(" "),s("p",[t._v("设想在同一台二层交换机上连接2个ip子网的设备，所有的设备都可以接收到二层广播，但三层广播只对本子网设备有效，非本子网的设备也会接收到广播包，但会被丢弃。")])]),t._v(" "),s("p",[t._v("广播风暴（broadcast storm）")]),t._v(" "),s("p",[t._v("简单的讲是指当广播数据充斥网络无法处理，并占用大量网络带宽，导致正常业务不能运行，甚至彻底瘫痪，这就发生了“广播风暴”")]),t._v(" "),s("p",[t._v("。一个数据帧或包被传输到本地网段 （由广播域定义）上的每个节点就是广播；由于网络拓扑的设计和连接问题，或其他原因导致广播在网段内大量复制，传播数据帧，导致网络性能下降，甚至网络瘫痪，这就是广播风暴。")]),t._v(" "),s("p",[t._v("要避免广播风暴，可以采用恰当划分VLAN、缩小广播域、隔离广播风暴，还可在千兆以太网口上启用广播风暴控制，最大限度地避免网络再次陷入瘫痪。")]),t._v(" "),s("h2",{attrs:{id:"微信公众号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[t._v("#")]),t._v(" 微信公众号")]),t._v(" "),s("h3",{attrs:{id:"java技术江湖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[t._v("#")]),t._v(" Java技术江湖")]),t._v(" "),s("p",[t._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),t._v(" "),s("p",[s("strong",[t._v("Java工程师必备学习资源:")]),t._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),s("strong",[t._v("“Java”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),t._v(" "),s("h3",{attrs:{id:"个人公众号-黄小斜"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[t._v("#")]),t._v(" 个人公众号：黄小斜")]),t._v(" "),s("p",[t._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),t._v(" "),s("p",[s("strong",[t._v("程序员3T技术学习资源：")]),t._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),s("strong",[t._v("“资料”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=v.exports}}]);