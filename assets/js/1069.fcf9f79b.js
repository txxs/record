(window.webpackJsonp=window.webpackJsonp||[]).push([[1069],{1468:function(t,s,a){"use strict";a.r(s);var n=a(13),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{align:"center"}},[a("a",{attrs:{href:"https://programmercarl.com/other/kstar.html",target:"_blank"}},[a("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210924105952.png",width:"1000"}})])]),a("p",{attrs:{align:"center"}},[a("strong",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/tqCxrMEU-ajQumL1i8im9A"}},[t._v("参与本项目")]),t._v("，贡献其他语言版本的代码，拥抱开源，让更多学习算法的小伙伴们收益！")])]),t._v(" "),a("h1",{attrs:{id:"关于链表-你该了解这些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于链表-你该了解这些"}},[t._v("#")]),t._v(" 关于链表，你该了解这些！")]),t._v(" "),a("p",[t._v("什么是链表，链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。")]),t._v(" "),a("p",[t._v("链接的入口节点称为链表的头结点也就是head。")]),t._v(" "),a("p",[t._v("如图所示：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806194529815.png",alt:"链表1"}})]),t._v(" "),a("h1",{attrs:{id:"链表的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的类型"}},[t._v("#")]),t._v(" 链表的类型")]),t._v(" "),a("p",[t._v("接下来说一下链表的几种类型:")]),t._v(" "),a("h2",{attrs:{id:"单链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表"}},[t._v("#")]),t._v(" 单链表")]),t._v(" "),a("p",[t._v("刚刚说的就是单链表。")]),t._v(" "),a("h2",{attrs:{id:"双链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双链表"}},[t._v("#")]),t._v(" 双链表")]),t._v(" "),a("p",[t._v("单链表中的节点只能指向节点的下一个节点。")]),t._v(" "),a("p",[t._v("双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。")]),t._v(" "),a("p",[t._v("双链表 既可以向前查询也可以向后查询。")]),t._v(" "),a("p",[t._v("如图所示：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806194559317.png",alt:"链表2"}})]),t._v(" "),a("h2",{attrs:{id:"循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),a("p",[t._v("循环链表，顾名思义，就是链表首尾相连。")]),t._v(" "),a("p",[t._v("循环链表可以用来解决约瑟夫环问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806194629603.png",alt:"链表4"}})]),t._v(" "),a("h1",{attrs:{id:"链表的存储方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的存储方式"}},[t._v("#")]),t._v(" 链表的存储方式")]),t._v(" "),a("p",[t._v("了解完链表的类型，再来说一说链表在内存中的存储方式。")]),t._v(" "),a("p",[t._v("数组是在内存中是连续分布的，但是链表在内存中可不是连续分布的。")]),t._v(" "),a("p",[t._v("链表是通过指针域的指针链接在内存中各个节点。")]),t._v(" "),a("p",[t._v("所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。")]),t._v(" "),a("p",[t._v("如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806194613920.png",alt:"链表3"}})]),t._v(" "),a("p",[t._v("这个链表起始节点为2， 终止节点为7，  各个节点分布在内存个不同地址空间上，通过指针串联在一起。")]),t._v(" "),a("h1",{attrs:{id:"链表的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的定义"}},[t._v("#")]),t._v(" 链表的定义")]),t._v(" "),a("p",[t._v("接下来说一说链表的定义。")]),t._v(" "),a("p",[t._v("链表节点的定义，很多同学在面试的时候都写不好。")]),t._v(" "),a("p",[t._v("这是因为平时在刷leetcode的时候，链表的节点都默认定义好了，直接用就行了，所以同学们都没有注意到链表的节点是如何定义的。")]),t._v(" "),a("p",[t._v("而在面试的时候，一旦要自己手写链表，就写的错漏百出。")]),t._v(" "),a("p",[t._v("这里我给出C/C++的定义链表节点方式，如下所示：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单链表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点上存储的元素")]),t._v("\n    ListNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向下一个节点的指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点的构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("有同学说了，我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。")]),t._v(" "),a("p",[t._v("但是这个构造函数不会初始化任何成员变量，下面我来举两个例子：")]),t._v(" "),a("p",[t._v("通过自己定义构造函数初始化节点：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("ListNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("使用默认构造函数初始化节点：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("ListNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhead"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！")]),t._v(" "),a("h1",{attrs:{id:"链表的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的操作"}},[t._v("#")]),t._v(" 链表的操作")]),t._v(" "),a("h2",{attrs:{id:"删除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[t._v("#")]),t._v(" 删除节点")]),t._v(" "),a("p",[t._v("删除D节点，如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806195114541.png",alt:"链表-删除节点"}})]),t._v(" "),a("p",[t._v("只要将C节点的next指针 指向E节点就可以了。")]),t._v(" "),a("p",[t._v("那有同学说了，D节点不是依然存留在内存里么？只不过是没有在这个链表里而已。")]),t._v(" "),a("p",[t._v("是这样的，所以在C++里最好是再手动释放这个D节点，释放这块内存。")]),t._v(" "),a("p",[t._v("其他语言例如Java、Python，就有自己的内存回收机制，就不用自己手动释放了。")]),t._v(" "),a("h2",{attrs:{id:"添加节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加节点"}},[t._v("#")]),t._v(" 添加节点")]),t._v(" "),a("p",[t._v("如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806195134331.png",alt:"链表-添加节点"}})]),t._v(" "),a("p",[t._v("可以看出链表的增添和删除都是$O(1)$操作，也不会影响到其他节点。")]),t._v(" "),a("p",[t._v("但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是$O(n)$。")]),t._v(" "),a("h1",{attrs:{id:"性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[t._v("#")]),t._v(" 性能分析")]),t._v(" "),a("p",[t._v("再把链表的特性和数组的特性进行一个对比，如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200806195200276.png",alt:"链表-链表与数据性能对比"}})]),t._v(" "),a("p",[t._v("数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。")]),t._v(" "),a("p",[t._v("链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。")]),t._v(" "),a("p",[t._v("相信大家已经对链表足够的了解，后面我会讲解关于链表的高频面试题目，我们下期见！")]),t._v(" "),a("h2",{attrs:{id:"其他语言版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他语言版本"}},[t._v("#")]),t._v(" 其他语言版本")]),t._v(" "),a("p",[t._v("Java：")]),t._v(" "),a("p",[t._v("Python：")]),t._v(" "),a("p",[t._v("Go：")]),t._v(" "),a("hr"),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码一.jpg",width:"500"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);