(window.webpackJsonp=window.webpackJsonp||[]).push([[666],{1057:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-信号量模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-信号量模型"}},[t._v("#")]),t._v(" 1 信号量模型")]),t._v(" "),a("h2",{attrs:{id:"_1-1-模型示意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-模型示意图"}},[t._v("#")]),t._v(" 1.1 模型示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021042214541150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("信号量模型可简单概括为：一个计数器，一个等待队列，三个方法。\n计数器和等待队列对外透明，所以只能通过信号量模型提供的三个方法来访问它们：")]),t._v(" "),a("h2",{attrs:{id:"_1-2-三个方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-三个方法"}},[t._v("#")]),t._v(" 1.2 三个方法")]),t._v(" "),a("h3",{attrs:{id:"_1-2-1-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-init"}},[t._v("#")]),t._v(" 1.2.1 init()")]),t._v(" "),a("p",[t._v("设置计数器初始值。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-2-down"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-down"}},[t._v("#")]),t._v(" 1.2.2 down()")]),t._v(" "),a("p",[t._v("计数器-1；若此时计数器＜0，则当前线程被阻塞，否则当前线程可继续执行")]),t._v(" "),a("h3",{attrs:{id:"_1-2-3-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-up"}},[t._v("#")]),t._v(" 1.2.3 up()")]),t._v(" "),a("p",[t._v("计数器+1；若此时计数器≤0，则唤醒等待队列中的一个线程，并将其从等待队列中移除。\n有的人可能认为这里的判断条件应该≥0，估计你是理解生产者-消费者模式中的生产者。可这样思考，"),a("code",[t._v(">0")]),t._v(" 意味着无阻塞的线程，所以只有 ≤0 时才需唤醒一个等待的线程。")]),t._v(" "),a("p",[t._v("down()和up()应成对出现 && 先调用down()获取锁，处理完成后再调用up()释放锁。若信号量init值为1，应该不会出现>0情况，除非故意调先用up()，这也失去了信号量本身的意义了。")]),t._v(" "),a("p",[t._v("这些方法都是原子性的，并且这个原子性是由信号量模型的实现方保证的。JDK里的信号量模型是由java.util.concurrent.Semaphore实现，Semaphore这个类能够保证这三个方法都是原子操作。")]),t._v(" "),a("h2",{attrs:{id:"_1-3-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-代码实现"}},[t._v("#")]),t._v(" 1.3 代码实现")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210422115452600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("信号量模型中，down()、up()最早被称为P操作和V操作，信号量模型也称PV原语。还有的人会用semWait()和semSignal()表达它们，叫法不同，语义都相同。JUC的acquire()和release()就对应down()和up()。")]),t._v(" "),a("h1",{attrs:{id:"_2-如何使用信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何使用信号量"}},[t._v("#")]),t._v(" 2 如何使用信号量？")]),t._v(" "),a("h2",{attrs:{id:"_2-1-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-实例"}},[t._v("#")]),t._v(" 2.1 实例")]),t._v(" "),a("p",[t._v("就像红绿信号灯，车必须先检查是否为绿灯，绿灯才能通过。\n比如累加器，count+=1操作是个临界区，只允许一个线程执行，也就是说要保证互斥。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210422122329760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_2-2-分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-分析"}},[t._v("#")]),t._v(" 2.2 分析")]),t._v(" "),a("p",[t._v("假设线程t1、t2同时访问add()，当同时调用"),a("code",[t._v("acquire()")]),t._v("时，由于"),a("code",[t._v("acquire()")]),t._v("是个原子操作，只可能有一个线程（假设t1）把信号量里的计数器减为0，t2则是将计数器减为-1:")]),t._v(" "),a("ul",[a("li",[t._v("对t1，信号量里面的计数器的值是0，≥0，所以t1继续执行")]),t._v(" "),a("li",[t._v("对t2，信号量里面的计数器的值是-1，＜0，所以t2被阻塞")])]),t._v(" "),a("p",[t._v("所以此时只有t1会进入临界区执行count+=1。")]),t._v(" "),a("p",[t._v("当t1执行release()，信号量里计数器的值是-1，加1之后的值是0，小于等于0，根据up()操作，此时等待队列中的t2会被唤醒。于是t2在t1执行完临界区代码后，才获得进入临界区执行的机会，这就保证了互斥性。")]),t._v(" "),a("h2",{attrs:{id:"_2-3-既有jdk的lock-为何还造个semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-既有jdk的lock-为何还造个semaphore"}},[t._v("#")]),t._v(" 2.3 既有JDK的Lock，为何还造个Semaphore？")]),t._v(" "),a("p",[t._v("实现互斥锁，仅是 Semaphore的部分功能，还可允许多个线程访问一个临界区。")]),t._v(" "),a("p",[t._v("最常见的就是各种池化资源：连接池、对象池、线程池等。比如数据库连接池，同一时刻，是允许多个线程同时使用连接池的。每个连接在被释放前，不允许其他线程使用。")]),t._v(" "),a("p",[t._v("对象池要求一次性创建出N个对象，之后所有线程重复利用这N个对象，当然对象在被释放前，不允许其他线程使用。所以核心就是限流器的设计：不允许多于N个线程同时进入临界区。")]),t._v(" "),a("p",[t._v("那如何快速实现一个这样的限流器呢？\n信号量！\n若把计数器的值设置成对象池里对象的个数N，就能完美解决对象池的限流问题。")]),t._v(" "),a("p",[t._v("代码如下：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210422144637459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("注意这里使用的是 Vector，进入临界区的N个线程不安全。add/remove都是不安全的。比如 ArrayList remove() ：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rangeCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\tmodCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设俩线程 t1,t2都执行到这一步，t1 让出cpu,t2执行")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("elementData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 到这步,t1继续执行，这时t1,t2拿到的oldValue是一样的，两个线程能拿到同一个对象，线程不安全！")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numMoved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numMoved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tnumMoved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\telementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// clear to let GC do its work")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);