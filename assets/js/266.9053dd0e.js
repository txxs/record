(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{656:function(e,r,t){"use strict";t.r(r);var o=t(13),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("本文转自：https://www.cnblogs.com/bangerlee/p/5328888.html")]),e._v(" "),t("p",[e._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),t("blockquote",[t("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),t("p",[e._v("喜欢的话麻烦点下Star哈")]),e._v(" "),t("p",[e._v("本文也将同步到我的个人博客：")]),e._v(" "),t("blockquote",[t("p",[e._v("www.how2playlife.com")])]),e._v(" "),t("p",[e._v("更多Java技术文章将陆续在微信公众号【Java技术江湖】更新，敬请关注。")]),e._v(" "),t("p",[e._v("该系列博文会告诉你什么是分布式系统，这对后端工程师来说是很重要的一门学问，我们会逐步了解分布式理论中的基本概念，常见算法、以及一些较为复杂的分布式原理，同时也需要进一步了解zookeeper的实现，以及CAP、一致性原理等一些常见的分布式理论基础，以便让你更完整地了解分布式理论的基础，为后续学习分布式技术内容做好准备。")]),e._v(" "),t("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),t("p",[t("strong",[e._v("引言")])]),e._v(" "),t("p",[e._v("CAP是分布式系统、特别是分布式存储领域中被讨论最多的理论，“"),t("a",{attrs:{href:"https://www.quora.com/What-Is-CAP-Theorem-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是CAP定理？"),t("OutboundLink")],1),e._v("”在Quora 分布式系统分类下排名 FAQ 的 No.1。CAP在程序员中也有较广的普及，它不仅仅是“C、A、P不能同时满足，最多只能3选2”，以下尝试综合各方观点，从发展历史、工程实践等角度讲述CAP理论。希望大家透过本文对CAP理论有更多地了解和认识。")]),e._v(" "),t("p",[t("strong",[e._v("CAP定理")])]),e._v(" "),t("p",[e._v("CAP由"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eric Brewer"),t("OutboundLink")],1),e._v("在2000年PODC会议上提出"),t("sup",[e._v("[1][2]")]),e._v("，是Eric Brewer在Inktomi"),t("sup",[e._v("[3]")]),e._v("期间研发搜索引擎、分布式web缓存时得出的关于数据一致性(consistency)、服务可用性(availability)、分区容错性(partition-tolerance)的猜想：")]),e._v(" "),t("blockquote",[t("p",[e._v("It is impossible for a web service to provide the three following guarantees : Consistency, Availability and Partition-tolerance.")])]),e._v(" "),t("p",[e._v("该猜想在提出两年后被证明成立"),t("sup",[e._v("[4]")]),e._v("，成为我们熟知的CAP定理：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("数据一致性")]),e._v("(consistency)：如果系统对一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据，对调用者而言数据具有强一致性(strong consistency) (又叫原子性 atomic、线性一致性 linearizable consistency)"),t("sup",[e._v("[5]")])]),e._v(" "),t("li",[t("strong",[e._v("服务可用性")]),e._v("(availability)：所有读写请求在一定时间内得到响应，可终止、不会一直等待")]),e._v(" "),t("li",[t("strong",[e._v("分区容错性")]),e._v("(partition-tolerance)：在网络分区的情况下，被分隔的节点仍能正常对外服务")])]),e._v(" "),t("p",[e._v("在某时刻如果满足AP，分隔的节点同时对外服务但不能相互通信，将导致状态不一致，即不能满足C；如果满足CP，网络分区的情况下为达成C，请求只能一直等待，即不满足A；如果要满足CA，在一定时间内要达到节点状态一致，要求不能出现网络分区，则不能满足P。")]),e._v(" "),t("p",[e._v("C、A、P三者最多只能满足其中两个，和FLP定理一样，CAP定理也指示了一个不可达的结果(impossibility result)。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201603/116770-20160329205542613-1908405713.jpg",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("CAP的工程启示")])]),e._v(" "),t("p",[e._v("CAP理论提出7、8年后，NoSql圈将CAP理论当作对抗传统关系型数据库的依据、阐明自己放宽对数据一致性(consistency)要求的正确性"),t("sup",[e._v("[6]")]),e._v("，随后引起了大范围关于CAP理论的讨论。")]),e._v(" "),t("p",[e._v("CAP理论看似给我们出了一道3选2的选择题，但在工程实践中存在很多现实限制条件，需要我们做更多地考量与权衡，避免进入CAP认识误区"),t("sup",[e._v("[7]")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("1、关于 P 的理解")])]),e._v(" "),t("p",[e._v("Partition字面意思是网络分区，即因网络因素将系统分隔为多个单独的部分，有人可能会说，网络分区的情况发生概率非常小啊，是不是不用考虑P，保证CA就好"),t("sup",[e._v("[8]")]),e._v("。要理解P，我们看回CAP证明"),t("sup",[e._v("[4]")]),e._v("中P的定义：")]),e._v(" "),t("blockquote",[t("p",[e._v("In order to model partition tolerance, the network will be allowed to lose arbitrarily many messages sent from one node to another.")])]),e._v(" "),t("p",[e._v("网络分区的情况符合该定义，网络丢包的情况也符合以上定义，另外节点宕机，其他节点发往宕机节点的包也将丢失，这种情况同样符合定义。现实情况下我们面对的是一个不可靠的网络、有一定概率宕机的设备，这两个因素都会导致Partition，因而分布式系统实现中 P 是一个必须项，而不是可选项"),t("sup",[e._v("[9][10]")]),e._v("。")]),e._v(" "),t("p",[e._v("对于分布式系统工程实践，CAP理论更合适的描述是：在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性"),t("sup",[e._v("[11]")]),e._v("：")]),e._v(" "),t("blockquote",[t("p",[e._v("In a network subject to communication failures, it is impossible for any web service to implement an atomic read/write shared memory that guarantees a response to every request.")])]),e._v(" "),t("p",[t("strong",[e._v("2、CA非0/1的选择")])]),e._v(" "),t("p",[e._v("P 是必选项，那3选2的选择题不就变成数据一致性(consistency)、服务可用性(availability) 2选1？工程实践中一致性有不同程度，可用性也有不同等级，在保证分区容错性的前提下，放宽约束后可以兼顾一致性和可用性，两者不是非此即彼"),t("sup",[e._v("[12]")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://images2015.cnblogs.com/blog/116770/201604/116770-20160401221124957-2025686892.jpg",alt:""}})]),e._v(" "),t("p",[e._v("CAP定理证明中的一致性指强一致性，强一致性要求多节点组成的被调要能像单节点一样运作、操作具备原子性，数据在时间、时序上都有要求。如果放宽这些要求，还有其他一致性类型：")]),e._v(" "),t("ul",[t("li",[e._v("序列一致性(sequential consistency)"),t("sup",[e._v("[13]")]),e._v("：不要求时序一致，A操作先于B操作，在B操作后如果所有调用端读操作得到A操作的结果，满足序列一致性")]),e._v(" "),t("li",[e._v("最终一致性(eventual consistency)"),t("sup",[e._v("[14]")]),e._v("：放宽对时间的要求，在被调完成操作响应后的某个时间点，被调多个节点的数据最终达成一致")])]),e._v(" "),t("p",[e._v("可用性在CAP定理里指所有读写操作必须要能终止，实际应用中从主调、被调两个不同的视角，可用性具有不同的含义。当P(网络分区)出现时，主调可以只支持读操作，通过牺牲部分可用性达成数据一致。")]),e._v(" "),t("p",[e._v("工程实践中，较常见的做法是通过异步拷贝副本(asynchronous replication)、quorum/NRW，实现在调用端看来数据强一致、被调端最终一致，在调用端看来服务可用、被调端允许部分节点不可用(或被网络分隔)的效果"),t("sup",[e._v("[15]")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("3、跳出CAP")])]),e._v(" "),t("p",[e._v("CAP理论对实现分布式系统具有指导意义，但CAP理论并没有涵盖分布式工程实践中的所有重要因素。")]),e._v(" "),t("p",[e._v("例如延时(latency)，它是衡量系统可用性、与用户体验直接相关的一项重要指标"),t("sup",[e._v("[16]")]),e._v("。CAP理论中的可用性要求操作能终止、不无休止地进行，除此之外，我们还关心到底需要多长时间能结束操作，这就是延时，它值得我们设计、实现分布式系统时单列出来考虑。")]),e._v(" "),t("p",[e._v("延时与数据一致性也是一对“冤家”，如果要达到强一致性、多个副本数据一致，必然增加延时。加上延时的考量，我们得到一个CAP理论的修改版本PACELC"),t("sup",[e._v("[17]")]),e._v("：如果出现P(网络分区)，如何在A(服务可用性)、C(数据一致性)之间选择；否则，如何在L(延时)、C(数据一致性)之间选择。")]),e._v(" "),t("p",[t("strong",[e._v("小结")])]),e._v(" "),t("p",[e._v("以上介绍了CAP理论的源起和发展，介绍了CAP理论给分布式系统工程实践带来的启示。")]),e._v(" "),t("p",[e._v("CAP理论对分布式系统实现有非常重大的影响，我们可以根据自身的业务特点，在数据一致性和服务可用性之间作出倾向性地选择。通过放松约束条件，我们可以实现在不同时间点满足CAP(此CAP非CAP定理中的CAP，如C替换为最终一致性)"),t("sup",[e._v("[18][19][20]")]),e._v("。")]),e._v(" "),t("p",[e._v("有非常非常多文章讨论和研究CAP理论，希望这篇对你认识和了解CAP理论有帮助。")]),e._v(" "),t("p",[e._v("[1] "),t("a",{attrs:{href:"https://cs.uwaterloo.ca/~brecht/servers/readings-new2/harvest-yield.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Harvest, Yield, and Scalable Tolerant Systems"),t("OutboundLink")],1),e._v(", Armando Fox , Eric Brewer, 1999")]),e._v(" "),t("p",[e._v("[2] "),t("a",{attrs:{href:"http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Towards Robust Distributed Systems"),t("OutboundLink")],1),e._v(", Eric Brewer, 2000")]),e._v(" "),t("p",[e._v("[3] "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=E91oEn1bnXM",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inktomi's wild ride - A personal view of the Internet bubble"),t("OutboundLink")],1),e._v(", Eric Brewer, 2004")]),e._v(" "),t("p",[e._v("[4] "),t("a",{attrs:{href:"https://pdfs.semanticscholar.org/24ce/ce61e2128780072bc58f90b8ba47f624bc27.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web"),t("OutboundLink")],1),e._v(", Seth Gilbert, Nancy Lynch, 2002")]),e._v(" "),t("p",[e._v("[5] "),t("a",{attrs:{href:"http://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linearizability: A Correctness Condition for Concurrent Objects"),t("OutboundLink")],1),e._v(", Maurice P. Herlihy,Jeannette M. Wing, 1990")]),e._v(" "),t("p",[e._v("[6] "),t("a",{attrs:{href:"http://julianbrowne.com/article/viewer/brewers-cap-theorem",target:"_blank",rel:"noopener noreferrer"}},[e._v("Brewer's CAP Theorem - The kool aid Amazon and Ebay have been drinking"),t("OutboundLink")],1),e._v(", Julian Browne, 2009")]),e._v(" "),t("p",[e._v("[7] "),t("a",{attrs:{href:"http://www.sersc.org/journals/IJAST/vol56/1.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("CAP Theorem between Claims and Misunderstandings: What is to be Sacrificed?"),t("OutboundLink")],1),e._v(", Balla Wade Diack,Samba Ndiaye,Yahya Slimani, 2013")]),e._v(" "),t("p",[e._v("[8] "),t("a",{attrs:{href:"http://cacm.acm.org/blogs/blog-cacm/83396-errors-in-database-systems-eventual-consistency-and-the-cap-theorem/fulltext",target:"_blank",rel:"noopener noreferrer"}},[e._v("Errors in Database Systems, Eventual Consistency, and the CAP Theorem"),t("OutboundLink")],1),e._v(", Michael Stonebraker, 2010")]),e._v(" "),t("p",[e._v("[9] "),t("a",{attrs:{href:"http://blog.cloudera.com/blog/2010/04/cap-confusion-problems-with-partition-tolerance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CAP Confusion: Problems with 'partition tolerance'"),t("OutboundLink")],1),e._v(", Henry Robinson, 2010")]),e._v(" "),t("p",[e._v("[10] "),t("a",{attrs:{href:"https://codahale.com/you-cant-sacrifice-partition-tolerance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("You Can’t Sacrifice Partition Tolerance"),t("OutboundLink")],1),e._v(", Coda Hale, 2010")]),e._v(" "),t("p",[e._v("[11] "),t("a",{attrs:{href:"https://groups.csail.mit.edu/tds/papers/Gilbert/Brewer2.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Perspectives on the CAP Theorem"),t("OutboundLink")],1),e._v(", Seth Gilbert, Nancy Lynch, 2012")]),e._v(" "),t("p",[e._v("[12] "),t("a",{attrs:{href:"https://www.computer.org/cms/Computer.org/ComputingNow/homepage/2012/0512/T_CO2_CAP12YearsLater.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v('CAP Twelve Years Later: How the "Rules" Have Changed'),t("OutboundLink")],1),e._v(", Eric Brewer, 2012")]),e._v(" "),t("p",[e._v("[13] "),t("a",{attrs:{href:"http://research.microsoft.com/en-us/um/people/lamport/pubs/multi.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs"),t("OutboundLink")],1),e._v(", Lamport Leslie, 1979")]),e._v(" "),t("p",[e._v("[14] "),t("a",{attrs:{href:"http://www.ronpub.com/publications/OJDB-v1i1n03_Elbushra.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eventual Consistent Databases: State of the Art"),t("OutboundLink")],1),e._v(", Mawahib Elbushra , Jan Lindström, 2014")]),e._v(" "),t("p",[e._v("[15] "),t("a",{attrs:{href:"http://www.allthingsdistributed.com/2008/12/eventually_consistent.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eventually Consistent"),t("OutboundLink")],1),e._v(", Werner Vogels, 2008")]),e._v(" "),t("p",[e._v("[16] "),t("a",{attrs:{href:"http://www.isaacsunyer.com/wp-content/uploads/2009/09/test_velocidad_google.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Speed Matters for Google Web Search"),t("OutboundLink")],1),e._v(", Jake Brutlag, 2009")]),e._v(" "),t("p",[e._v("[17] "),t("a",{attrs:{href:"http://cs-www.cs.yale.edu/homes/dna/papers/abadi-pacelc.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Consistency Tradeoffs in Modern Distributed Database System Design"),t("OutboundLink")],1),e._v(", Daniel J. Abadi, 2012")]),e._v(" "),t("p",[e._v("[18] "),t("a",{attrs:{href:"http://guysblogspot.blogspot.com/2008/09/cap-solution-proving-brewer-wrong.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A CAP Solution (Proving Brewer Wrong)"),t("OutboundLink")],1),e._v(", Guy's blog, 2008")]),e._v(" "),t("p",[e._v("[19] "),t("a",{attrs:{href:"http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to beat the CAP theorem"),t("OutboundLink")],1),e._v(", nathanmarz , 2011")]),e._v(" "),t("p",[e._v("[20] "),t("a",{attrs:{href:"https://github.com/henryr/cap-faq",target:"_blank",rel:"noopener noreferrer"}},[e._v("The CAP FAQ"),t("OutboundLink")],1),e._v(", Henry Robinson")])])}),[],!1,null,null,null);r.default=n.exports}}]);