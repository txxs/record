(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{451:function(r,t,e){"use strict";e.r(t);var a=e(13),_=Object(a.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[r._v("#")]),r._v(" Table of Contents")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8Adocker%E7%9A%84%E6%A6%82%E5%BF%B5%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0"}},[r._v("可能是把Docker的概念讲的最清楚的一篇文章")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%80-%E5%85%88%E4%BB%8E%E8%AE%A4%E8%AF%86%E5%AE%B9%E5%99%A8%E5%BC%80%E5%A7%8B"}},[r._v("一 先从认识容器开始")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#11-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%B9%E5%99%A8%EF%BC%9F"}},[r._v("1.1 什么是容器？")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%85%88%E6%9D%A5%E7%9C%8B%E7%9C%8B%E5%AE%B9%E5%99%A8%E8%BE%83%E4%B8%BA%E5%AE%98%E6%96%B9%E7%9A%84%E8%A7%A3%E9%87%8A"}},[r._v("先来看看容器较为官方的解释")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E5%86%8D%E6%9D%A5%E7%9C%8B%E7%9C%8B%E5%AE%B9%E5%99%A8%E8%BE%83%E4%B8%BA%E9%80%9A%E4%BF%97%E7%9A%84%E8%A7%A3%E9%87%8A"}},[r._v("再来看看容器较为通俗的解释")])])])]),r._v(" "),e("li",[e("a",{attrs:{href:"#12-%E5%9B%BE%E8%A7%A3%E7%89%A9%E7%90%86%E6%9C%BA%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8"}},[r._v("1.2 图解物理机、虚拟机与容器")])])])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%8C-%E5%86%8D%E6%9D%A5%E8%B0%88%E8%B0%88docker%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5"}},[r._v("二 再来谈谈Docker的一些概念")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#21-%E4%BB%80%E4%B9%88%E6%98%AFdocker%EF%BC%9F"}},[r._v("2.1 什么是Docker？")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#22-docker%E6%80%9D%E6%83%B3"}},[r._v("2.2 Docker思想")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#23-docker%E5%AE%B9%E5%99%A8%E7%9A%84%E7%89%B9%E7%82%B9"}},[r._v("2.3 Docker容器的特点")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#24-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8docker"}},[r._v("2.4 为什么要用Docker")])])])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%89-%E5%AE%B9%E5%99%A8-vs-%E8%99%9A%E6%8B%9F%E6%9C%BA"}},[r._v("三 容器 VS 虚拟机")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#31-%E4%B8%A4%E8%80%85%E5%AF%B9%E6%AF%94%E5%9B%BE"}},[r._v("3.1 两者对比图")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#32-%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA-vm-%E6%80%BB%E7%BB%93"}},[r._v("3.2 容器与虚拟机 (VM) 总结")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#33-%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA-vm%E4%B8%A4%E8%80%85%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%85%B1%E5%AD%98%E7%9A%84"}},[r._v("3.3 容器与虚拟机 (VM)两者是可以共存的")])])])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E5%9B%9B-docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"}},[r._v("四 Docker基本概念")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#41-%E9%95%9C%E5%83%8F%EF%BC%88image%EF%BC%89%E4%B8%80%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F"}},[r._v("4.1 镜像（Image）——一个特殊的文件系统")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#42-%E5%AE%B9%E5%99%A8%EF%BC%88container%E9%95%9C%E5%83%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%AE%9E%E4%BD%93"}},[r._v("4.2 容器（Container)——镜像运行时的实体")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#43-%E4%BB%93%E5%BA%93%EF%BC%88repository%EF%BC%89%E9%9B%86%E4%B8%AD%E5%AD%98%E6%94%BE%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E7%9A%84%E5%9C%B0%E6%96%B9"}},[r._v("4.3 仓库（Repository）——集中存放镜像文件的地方")])])])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%94-%E6%9C%80%E5%90%8E%E8%B0%88%E8%B0%88%EF%BC%9Abuild-ship-and-run"}},[r._v("五 最后谈谈：Build, Ship, and Run")])]),r._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AD-%E6%80%BB%E7%BB%93"}},[r._v("六 总结")])])])])]),r._v(" "),e("p",[r._v("本文转载自互联网，侵删\n本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),r._v(" "),e("blockquote",[e("p",[r._v("https://github.com/h2pl/Java-Tutorial")])]),r._v(" "),e("p",[r._v("喜欢的话麻烦点下Star哈")]),r._v(" "),e("p",[r._v("本系列文章将整理到我的个人博客")]),r._v(" "),e("blockquote",[e("p",[r._v("www.how2playlife.com")])]),r._v(" "),e("p",[r._v("更多Java技术文章会更新在我的微信公众号【Java技术江湖】上，欢迎关注\n该系列博文会介绍常见的后端技术，这对后端工程师来说是一种综合能力，我们会逐步了解搜索技术，云计算相关技术、大数据研发等常见的技术喜提，以便让你更完整地了解后端技术栈的全貌，为后续参与分布式应用的开发和学习做好准备。")]),r._v(" "),e("p",[r._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系我，欢迎你参与本系列博文的创作和修订。")]),r._v(" "),e("h1",{attrs:{id:"可能是把docker的概念讲的最清楚的一篇文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可能是把docker的概念讲的最清楚的一篇文章"}},[r._v("#")]),r._v(" 可能是把Docker的概念讲的最清楚的一篇文章")]),r._v(" "),e("p",[r._v("本文只是对Docker的概念做了较为详细的介绍，并不涉及一些像Docker环境的安装以及Docker的一些常见操作和命令。")]),r._v(" "),e("p",[r._v("阅读本文大概需要15分钟，通过阅读本文你将知道一下概念：")]),r._v(" "),e("ul",[e("li",[r._v("容器")]),r._v(" "),e("li",[r._v("什么是Docker？")]),r._v(" "),e("li",[r._v("Docker思想、特点")]),r._v(" "),e("li",[r._v("Docker容器主要解决什么问题")]),r._v(" "),e("li",[r._v("容器 VS 虚拟机")]),r._v(" "),e("li",[r._v("Docker基本概念： 镜像（Image），容器（Container），仓库（Repository）")])]),r._v(" "),e("hr"),r._v(" "),e("blockquote",[e("p",[r._v("Docker 是世界领先的软件容器平台，所以想要搞懂Docker的概念我们必须先从容器开始说起。")])]),r._v(" "),e("h2",{attrs:{id:"一-先从认识容器开始"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-先从认识容器开始"}},[r._v("#")]),r._v(" 一 先从认识容器开始")]),r._v(" "),e("h3",{attrs:{id:"_1-1-什么是容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是容器"}},[r._v("#")]),r._v(" 1.1 什么是容器？")]),r._v(" "),e("h4",{attrs:{id:"先来看看容器较为官方的解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先来看看容器较为官方的解释"}},[r._v("#")]),r._v(" 先来看看容器较为官方的解释")]),r._v(" "),e("p",[r._v("一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。")]),r._v(" "),e("ul",[e("li",[r._v("容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。")]),r._v(" "),e("li",[r._v("容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。")]),r._v(" "),e("li",[r._v("容器赋予了软件独立性 ，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。")])]),r._v(" "),e("h4",{attrs:{id:"再来看看容器较为通俗的解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#再来看看容器较为通俗的解释"}},[r._v("#")]),r._v(" 再来看看容器较为通俗的解释")]),r._v(" "),e("p",[r._v("如果需要通俗的描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/1640cae21c18e404?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"认识容器"}})]),r._v(" "),e("h3",{attrs:{id:"_1-2-图解物理机、虚拟机与容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-图解物理机、虚拟机与容器"}},[r._v("#")]),r._v(" 1.2 图解物理机、虚拟机与容器")]),r._v(" "),e("p",[r._v("关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解。")]),r._v(" "),e("p",[r._v("物理机")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/1641129f0ecdf8ff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"物理机"}})]),r._v(" "),e("p",[r._v("虚拟机：")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/164112a72a917f4a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"虚拟机"}})]),r._v(" "),e("p",[r._v("容器：")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/164112ac76e6f693?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"容器"}})]),r._v(" "),e("p",[r._v("通过上面这三张抽象图，我们可以大概可以通过类比概括出： 容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。")]),r._v(" "),e("hr"),r._v(" "),e("blockquote",[e("p",[r._v("相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈Docker的一些概念。")])]),r._v(" "),e("h2",{attrs:{id:"二-再来谈谈docker的一些概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-再来谈谈docker的一些概念"}},[r._v("#")]),r._v(" 二 再来谈谈Docker的一些概念")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/16410734eb1ed373?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"Docker的一些概念"}})]),r._v(" "),e("h3",{attrs:{id:"_2-1-什么是docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是docker"}},[r._v("#")]),r._v(" 2.1 什么是Docker？")]),r._v(" "),e("p",[r._v("说实话关于Docker是什么并太好说，下面我通过四点向你说明Docker到底是个什么东西。")]),r._v(" "),e("ul",[e("li",[r._v("Docker 是世界领先的软件容器平台。")]),r._v(" "),e("li",[r._v("Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 的cgroup，namespace，以及AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进 程，因此也称其为容器。Docke最初实现是基于 LXC.")]),r._v(" "),e("li",[r._v("Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。")]),r._v(" "),e("li",[r._v("用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")])]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/16411c3946dda762?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"什么是Docker"}})]),r._v(" "),e("h3",{attrs:{id:"_2-2-docker思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker思想"}},[r._v("#")]),r._v(" 2.2 Docker思想")]),r._v(" "),e("ul",[e("li",[r._v("集装箱")]),r._v(" "),e("li",[r._v("标准化： ①运输方式 ② 存储方式 ③ API接口")]),r._v(" "),e("li",[r._v("隔离")])]),r._v(" "),e("h3",{attrs:{id:"_2-3-docker容器的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker容器的特点"}},[r._v("#")]),r._v(" 2.3 Docker容器的特点")]),r._v(" "),e("ul",[e("li",[e("h4",{attrs:{id:"轻量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轻量"}},[r._v("#")]),r._v(" 轻量")]),r._v(" "),e("p",[r._v("在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。")])]),r._v(" "),e("li",[e("h4",{attrs:{id:"标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准"}},[r._v("#")]),r._v(" 标准")]),r._v(" "),e("p",[r._v("Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。")])]),r._v(" "),e("li",[e("h4",{attrs:{id:"安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[r._v("#")]),r._v(" 安全")]),r._v(" "),e("p",[r._v("Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。")])])]),r._v(" "),e("h3",{attrs:{id:"_2-4-为什么要用docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-为什么要用docker"}},[r._v("#")]),r._v(" 2.4 为什么要用Docker")]),r._v(" "),e("ul",[e("li",[r._v("Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境")]),r._v(" "),e("li",[r._v("可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间")]),r._v(" "),e("li",[r._v("避免公用的服务器，资源会容易受到其他用户的影响。——隔离性")]),r._v(" "),e("li",[r._v("善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展")]),r._v(" "),e("li",[r._v("可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便")]),r._v(" "),e("li",[r._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署")])]),r._v(" "),e("hr"),r._v(" "),e("blockquote",[e("p",[r._v("每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。")])]),r._v(" "),e("h2",{attrs:{id:"三-容器-vs-虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-容器-vs-虚拟机"}},[r._v("#")]),r._v(" 三 容器 VS 虚拟机")]),r._v(" "),e("p",[r._v("简单来说： 容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。")]),r._v(" "),e("h3",{attrs:{id:"_3-1-两者对比图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-两者对比图"}},[r._v("#")]),r._v(" 3.1 两者对比图")]),r._v(" "),e("p",[r._v("传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便.")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/1640cb4abec9e902?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"容器 VS 虚拟机"}})]),r._v(" "),e("h3",{attrs:{id:"_3-2-容器与虚拟机-vm-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-容器与虚拟机-vm-总结"}},[r._v("#")]),r._v(" 3.2 容器与虚拟机 (VM) 总结")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/16410aa3b89ae481?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"容器与虚拟机 (VM) 总结"}})]),r._v(" "),e("ul",[e("li",[e("p",[r._v("容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动 。")])]),r._v(" "),e("li",[e("p",[r._v("虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个 VM 在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 占用大量空间 。而且 VM 启动也十分缓慢 。")])])]),r._v(" "),e("p",[r._v("通过Docker官网，我们知道了这么多Docker的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 Docker通常用于隔离不同的应用 ，例如前端，后端以及数据库。")]),r._v(" "),e("h3",{attrs:{id:"_3-3-容器与虚拟机-vm-两者是可以共存的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-容器与虚拟机-vm-两者是可以共存的"}},[r._v("#")]),r._v(" 3.3 容器与虚拟机 (VM)两者是可以共存的")]),r._v(" "),e("p",[r._v("就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/17/1640cca26fc38f9e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"两者是可以共存的"}})]),r._v(" "),e("hr"),r._v(" "),e("blockquote",[e("p",[r._v("Docker中非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。")])]),r._v(" "),e("h2",{attrs:{id:"四-docker基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-docker基本概念"}},[r._v("#")]),r._v(" 四 Docker基本概念")]),r._v(" "),e("p",[r._v("Docker 包括三个基本概念")]),r._v(" "),e("ul",[e("li",[r._v("镜像（Image）")]),r._v(" "),e("li",[r._v("容器（Container）")]),r._v(" "),e("li",[r._v("仓库（Repository）")])]),r._v(" "),e("p",[r._v("理解了这三个概念，就理解了 Docker 的整个生命周期")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/164109e4900357a9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"Docker 包括三个基本概念"}})]),r._v(" "),e("h3",{attrs:{id:"_4-1-镜像-image-一个特殊的文件系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-镜像-image-一个特殊的文件系统"}},[r._v("#")]),r._v(" 4.1 镜像（Image）——一个特殊的文件系统")]),r._v(" "),e("p",[r._v("操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而Docker 镜像（Image），就相当于是一个 root 文件系统。")]),r._v(" "),e("p",[r._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),r._v(" "),e("p",[r._v("Docker 设计时，就充分利用 Union FS的技术，将其设计为 分层存储的架构 。 镜像实际是由多层文件系统联合组成。")]),r._v(" "),e("p",[r._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),r._v(" "),e("p",[r._v("分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),r._v(" "),e("h3",{attrs:{id:"_4-2-容器-container-镜像运行时的实体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-容器-container-镜像运行时的实体"}},[r._v("#")]),r._v(" 4.2 容器（Container)——镜像运行时的实体")]),r._v(" "),e("p",[r._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),r._v(" "),e("p",[r._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。")]),r._v(" "),e("p",[r._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),r._v(" "),e("p",[r._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。")]),r._v(" "),e("h3",{attrs:{id:"_4-3-仓库-repository-集中存放镜像文件的地方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-仓库-repository-集中存放镜像文件的地方"}},[r._v("#")]),r._v(" 4.3 仓库（Repository）——集中存放镜像文件的地方")]),r._v(" "),e("p",[r._v("镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。")]),r._v(" "),e("p",[r._v("一个 Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。")]),r._v(" "),e("p",[r._v("通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过"),e("code",[r._v("<仓库名>:<标签>")]),r._v("的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。")]),r._v(" "),e("p",[r._v("这里补充一下Docker Registry 公开服务和私有 Docker Registry的概念：")]),r._v(" "),e("p",[r._v("Docker Registry 公开服务 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。")]),r._v(" "),e("p",[r._v("最常使用的 Registry 公开服务是官方的 Docker Hub ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为："),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F",target:"_blank",rel:"noopener noreferrer"}},[r._v("hub.docker.com/"),e("OutboundLink")],1),r._v(" 。在国内访问Docker Hub 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fhub.tenxcloud.com%2F",target:"_blank",rel:"noopener noreferrer"}},[r._v("时速云镜像库"),e("OutboundLink")],1),r._v("、"),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.163yun.com%2Fproduct%2Frepo",target:"_blank",rel:"noopener noreferrer"}},[r._v("网易云镜像服务"),e("OutboundLink")],1),r._v("、"),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.daocloud.io%2F",target:"_blank",rel:"noopener noreferrer"}},[r._v("DaoCloud 镜像市场"),e("OutboundLink")],1),r._v("、"),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.aliyun.com%2Fproduct%2Fcontainerservice%3Futm_content%3Dse_1292836",target:"_blank",rel:"noopener noreferrer"}},[r._v("阿里云镜像库"),e("OutboundLink")],1),r._v("等。")]),r._v(" "),e("p",[r._v("除了使用公开服务外，用户还可以在 本地搭建私有 Docker Registry 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。")]),r._v(" "),e("hr"),r._v(" "),e("blockquote",[e("p",[r._v("Docker的概念基本上已经讲完，最后我们谈谈：Build, Ship, and Run。")])]),r._v(" "),e("h2",{attrs:{id:"五-最后谈谈-build-ship-and-run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-最后谈谈-build-ship-and-run"}},[r._v("#")]),r._v(" 五 最后谈谈：Build, Ship, and Run")]),r._v(" "),e("p",[r._v("如果你搜索Docker官网，会发现如下的字样：“Docker - Build, Ship, and Run Any App, Anywhere”。那么Build, Ship, and Run到底是在干什么呢？")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/18/16411c521e79bd82?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"build ship run"}})]),r._v(" "),e("ul",[e("li",[r._v("Build（构建镜像） ： 镜像就像是集装箱包括文件以及运行环境等等资源。")]),r._v(" "),e("li",[r._v("Ship（运输镜像） ：主机和仓库间运输，这里的仓库就像是超级码头一样。")]),r._v(" "),e("li",[r._v("Run （运行镜像） ：运行的镜像就是一个容器，容器就是运行程序的地方。")])]),r._v(" "),e("p",[r._v("Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将Docker称为码头工人或码头装卸工，这和Docker的中文翻译搬运工人如出一辙。")]),r._v(" "),e("h2",{attrs:{id:"六-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-总结"}},[r._v("#")]),r._v(" 六 总结")]),r._v(" "),e("p",[r._v("本文主要把Docker中的一些常见概念做了详细的阐述，但是并不涉及Docker的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐一本书籍《Docker技术入门与实战第二版》。")])])}),[],!1,null,null,null);t.default=_.exports}}]);