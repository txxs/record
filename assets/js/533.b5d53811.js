(window.webpackJsonp=window.webpackJsonp||[]).push([[533],{924:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类文件结构详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类文件结构详解"}},[t._v("#")]),t._v(" 类文件结构详解")]),t._v(" "),a("h2",{attrs:{id:"一-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-概述"}},[t._v("#")]),t._v(" 一 概述")]),t._v(" "),a("p",[t._v("在 Java 中，JVM 可以理解的代码就叫做"),a("code",[t._v("字节码")]),t._v("（即扩展名为 "),a("code",[t._v(".class")]),t._v(" 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")]),t._v(" "),a("p",[t._v("Clojure（Lisp 语言的一种方言）、Groovy、Scala 等语言都是运行在 Java 虚拟机之上。下图展示了不同的语言被不同的编译器编译成"),a("code",[t._v(".class")]),t._v("文件最终运行在 Java 虚拟机之上。"),a("code",[t._v(".class")]),t._v("文件的二进制格式可以使用 "),a("a",{attrs:{href:"https://www.x-ways.net/winhex/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WinHex"),a("OutboundLink")],1),t._v(" 查看。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/bg/desktop%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88.png",alt:"java虚拟机"}})]),t._v(" "),a("p",[t._v("可以说"),a("code",[t._v(".class")]),t._v("文件是不同的语言在 Java 虚拟机之间的重要桥梁，同时也是支持 Java 跨平台很重要的一个原因。")]),t._v(" "),a("h2",{attrs:{id:"二-class-文件结构总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-class-文件结构总结"}},[t._v("#")]),t._v(" 二 Class 文件结构总结")]),t._v(" "),a("p",[t._v("根据 Java 虚拟机规范，Class 文件通过 "),a("code",[t._v("ClassFile")]),t._v(" 定义，有点类似 C 语言的结构体。")]),t._v(" "),a("p",[a("code",[t._v("ClassFile")]),t._v(" 的结构如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassFile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    u4             magic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的标志")]),t._v("\n    u2             minor_version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 的小版本号")]),t._v("\n    u2             major_version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 的大版本号")]),t._v("\n    u2             constant_pool_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池的数量")]),t._v("\n    cp_info        constant_pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("constant_pool_count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池")]),t._v("\n    u2             access_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 的访问标记")]),t._v("\n    u2             this_class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前类")]),t._v("\n    u2             super_class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父类")]),t._v("\n    u2             interfaces_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接口")]),t._v("\n    u2             interfaces"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("interfaces_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类可以实现多个接口")]),t._v("\n    u2             fields_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的字段属性")]),t._v("\n    field_info     fields"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fields_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类会可以有多个字段")]),t._v("\n    u2             methods_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的方法数量")]),t._v("\n    method_info    methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("methods_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类可以有个多个方法")]),t._v("\n    u2             attributes_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此类的属性表中的属性数")]),t._v("\n    attribute_info attributes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attributes_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//属性表集合")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("通过分析 "),a("code",[t._v("ClassFile")]),t._v(" 的内容，我们便可以知道 class 文件的组成。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/16d5ec47609818fc.jpeg",alt:""}})]),t._v(" "),a("p",[t._v("下面这张图是通过 IDEA 插件 "),a("code",[t._v("jclasslib")]),t._v(" 查看的，你可以更直观看到 Class 文件结构。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210401170711475.png",alt:""}})]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("jclasslib")]),t._v(" 不光可以直观地查看某个类对应的字节码文件，还可以查看类的基本信息、常量池、接口、属性、函数等信息。")]),t._v(" "),a("p",[t._v("下面详细介绍一下 Class 文件结构涉及到的一些组件。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-魔数-magic-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-魔数-magic-number"}},[t._v("#")]),t._v(" 2.1 魔数（Magic Number）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u4             magic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的标志")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("每个 Class 文件的头 4 个字节称为魔数（Magic Number）,它的唯一作用是"),a("strong",[t._v("确定这个文件是否为一个能被虚拟机接收的 Class 文件")]),t._v("。")]),t._v(" "),a("p",[t._v("程序设计者很多时候都喜欢用一些特殊的数字表示固定的文件类型或者其它特殊的含义。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-class-文件版本号-minor-major-version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-class-文件版本号-minor-major-version"}},[t._v("#")]),t._v(" 2.2 Class 文件版本号（Minor&Major Version）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u2             minor_version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 的小版本号")]),t._v("\n    u2             major_version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 的大版本号")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("紧接着魔数的四个字节存储的是 Class 文件的版本号：第 5 和第 6 位是"),a("strong",[t._v("次版本号")]),t._v("，第 7 和第 8 位是"),a("strong",[t._v("主版本号")]),t._v("。")]),t._v(" "),a("p",[t._v("每当 Java 发布大版本（比如 Java 8，Java9）的时候，主版本号都会加 1。你可以使用 "),a("code",[t._v("javap -v")]),t._v(" 命令来快速查看 Class 文件的版本号信息。")]),t._v(" "),a("p",[t._v("高版本的 Java 虚拟机可以执行低版本编译器生成的 Class 文件，但是低版本的 Java 虚拟机不能执行高版本编译器生成的 Class 文件。所以，我们在实际开发的时候要确保开发的的 JDK 版本和生产环境的 JDK 版本保持一致。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-常量池-constant-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-常量池-constant-pool"}},[t._v("#")]),t._v(" 2.3 常量池（Constant Pool）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u2             constant_pool_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池的数量")]),t._v("\n    cp_info        constant_pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("constant_pool_count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("紧接着主次版本号之后的是常量池，常量池的数量是 "),a("code",[t._v("constant_pool_count-1")]),t._v("（"),a("strong",[t._v("常量池计数器是从 1 开始计数的，将第 0 项常量空出来是有特殊考虑的，索引值为 0 代表“不引用任何一个常量池项”")]),t._v("）。")]),t._v(" "),a("p",[t._v("常量池主要存放两大常量：字面量和符号引用。字面量比较接近于 Java 语言层面的的常量概念，如文本字符串、声明为 final 的常量值等。而符号引用则属于编译原理方面的概念。包括下面三类常量：")]),t._v(" "),a("ul",[a("li",[t._v("类和接口的全限定名")]),t._v(" "),a("li",[t._v("字段的名称和描述符")]),t._v(" "),a("li",[t._v("方法的名称和描述符")])]),t._v(" "),a("p",[t._v("常量池中每一项常量都是一个表，这 14 种表有一个共同的特点："),a("strong",[t._v("开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型．")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("标志（tag）")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_utf8_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("UTF-8 编码的字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Integer_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("整形字面量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Float_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("浮点型字面量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Long_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("５")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("长整型字面量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Double_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("６")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("双精度浮点型字面量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Class_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("７")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("类或接口的符号引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_String_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("８")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("字符串类型字面量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Fieldref_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("９")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("字段的符号引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_Methodref_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("10")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("类中方法的符号引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_InterfaceMethodref_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("11")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("接口中方法的符号引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_NameAndType_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("字段或方法的符号引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_MothodType_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("标志方法类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_MethodHandle_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("15")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("表示方法句柄")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CONSTANT_InvokeDynamic_info")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("18")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("表示一个动态方法调用点")])])])]),t._v(" "),a("p",[a("code",[t._v(".class")]),t._v(" 文件可以通过"),a("code",[t._v("javap -v class类名")]),t._v(" 指令来看一下其常量池中的信息("),a("code",[t._v("javap -v class类名-> temp.txt")]),t._v(" ：将结果输出到 temp.txt 文件)。")]),t._v(" "),a("h3",{attrs:{id:"_2-4-访问标志-access-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-访问标志-access-flags"}},[t._v("#")]),t._v(" 2.4 访问标志(Access Flags)")]),t._v(" "),a("p",[t._v("在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 "),a("code",[t._v("public")]),t._v(" 或者 "),a("code",[t._v("abstract")]),t._v(" 类型，如果是类的话是否声明为 "),a("code",[t._v("final")]),t._v(" 等等。")]),t._v(" "),a("p",[t._v("类访问和属性修饰符:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png",alt:"类访问和属性修饰符"}})]),t._v(" "),a("p",[t._v("我们定义了一个 Employee 类")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snailclimb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("通过"),a("code",[t._v("javap -v class类名")]),t._v(" 指令来看一下类的访问标志。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png",alt:"查看类的访问标志"}})]),t._v(" "),a("h3",{attrs:{id:"_2-5-当前类-this-class-、父类-super-class-、接口-interfaces-索引集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-当前类-this-class-、父类-super-class-、接口-interfaces-索引集合"}},[t._v("#")]),t._v(" 2.5 当前类（This Class）、父类（Super Class）、接口（Interfaces）索引集合")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u2             this_class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前类")]),t._v("\n    u2             super_class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父类")]),t._v("\n    u2             interfaces_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接口")]),t._v("\n    u2             interfaces"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("interfaces_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类可以实现多个接口")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 "),a("code",[t._v("java.lang.Object")]),t._v(" 之外，所有的 java 类都有父类，因此除了 "),a("code",[t._v("java.lang.Object")]),t._v(" 外，所有 Java 类的父类索引都不为 0。")]),t._v(" "),a("p",[t._v("接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按 "),a("code",[t._v("implements")]),t._v(" (如果这个类本身是接口的话则是"),a("code",[t._v("extends")]),t._v(") 后的接口顺序从左到右排列在接口索引集合中。")]),t._v(" "),a("h3",{attrs:{id:"_2-6-字段表集合-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-字段表集合-fields"}},[t._v("#")]),t._v(" 2.6 字段表集合（Fields）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u2             fields_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的字段的个数")]),t._v("\n    field_info     fields"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fields_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类会可以有个字段")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("字段表（field info）用于描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。")]),t._v(" "),a("p",[a("strong",[t._v("field info(字段表) 的结构:")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E5%AD%97%E6%AE%B5%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png",alt:"字段表的结构 "}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("access_flags:")]),t._v(" 字段的作用域（"),a("code",[t._v("public")]),t._v(" ,"),a("code",[t._v("private")]),t._v(","),a("code",[t._v("protected")]),t._v("修饰符），是实例变量还是类变量（"),a("code",[t._v("static")]),t._v("修饰符）,可否被序列化（transient 修饰符）,可变性（final）,可见性（volatile 修饰符，是否强制从主内存读写）。")]),t._v(" "),a("li",[a("strong",[t._v("name_index:")]),t._v(" 对常量池的引用，表示的字段的名称；")]),t._v(" "),a("li",[a("strong",[t._v("descriptor_index:")]),t._v(" 对常量池的引用，表示字段和方法的描述符；")]),t._v(" "),a("li",[a("strong",[t._v("attributes_count:")]),t._v(" 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；")]),t._v(" "),a("li",[a("strong",[t._v("attributes[attributes_count]:")]),t._v(" 存放具体属性具体内容。")])]),t._v(" "),a("p",[t._v("上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。")]),t._v(" "),a("p",[a("strong",[t._v("字段的 access_flag 的取值:")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/JVM/image-20201031084342859.png",alt:"字段的 access_flag 的取值"}})]),t._v(" "),a("h3",{attrs:{id:"_2-7-方法表集合-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-方法表集合-methods"}},[t._v("#")]),t._v(" 2.7 方法表集合（Methods）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    u2             methods_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Class 文件的方法的数量")]),t._v("\n    method_info    methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("methods_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个类可以有个多个方法")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("methods_count 表示方法的数量，而 method_info 表示方法表。")]),t._v(" "),a("p",[t._v("Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。")]),t._v(" "),a("p",[a("strong",[t._v("method_info(方法表的) 结构:")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E6%96%B9%E6%B3%95%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png",alt:"方法表的结构"}})]),t._v(" "),a("p",[a("strong",[t._v("方法表的 access_flag 取值：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/JVM/image-20201031084248965.png",alt:"方法表的 access_flag 取值"}})]),t._v(" "),a("p",[t._v("注意：因为"),a("code",[t._v("volatile")]),t._v("修饰符和"),a("code",[t._v("transient")]),t._v("修饰符不可以修饰方法，所以方法表的访问标志中没有这两个对应的标志，但是增加了"),a("code",[t._v("synchronized")]),t._v("、"),a("code",[t._v("native")]),t._v("、"),a("code",[t._v("abstract")]),t._v("等关键字修饰方法，所以也就多了这些关键字对应的标志。")]),t._v(" "),a("h3",{attrs:{id:"_2-8-属性表集合-attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-属性表集合-attributes"}},[t._v("#")]),t._v(" 2.8 属性表集合（Attributes）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("   u2             attributes_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此类的属性表中的属性数")]),t._v("\n   attribute_info attributes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attributes_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//属性表集合")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://coolshell.cn/articles/9229.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://coolshell.cn/articles/9229.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/luanlouis/article/details/39960815",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/luanlouis/article/details/39960815"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("《实战 Java 虚拟机》")])])])}),[],!1,null,null,null);s.default=n.exports}}]);