(window.webpackJsonp=window.webpackJsonp||[]).push([[1255],{1650:function(t,s,n){"use strict";n.r(s);var e=n(13),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("全是干货的技术号：\n本文已收录在github，欢迎 star/fork：\nhttps://github.com/Wasabi1234/Java-Interview-Tutorial")])]),t._v(" "),n("p",[t._v("Redis 服务器的事件主要处理两方面：")]),t._v(" "),n("ul",[n("li",[t._v("处理文件事件：在多个客户端中实现多路复用，接受它们发来的命令请求，并将命令的执行结果返回给客户端")]),t._v(" "),n("li",[t._v("时间事件：实现服务器常规操作")])]),t._v(" "),n("h1",{attrs:{id:"_1-文件事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-文件事件"}},[t._v("#")]),t._v(" 1 文件事件")]),t._v(" "),n("p",[t._v("Redis server通过在多个客户端间多路复用， 实现了高效的命令请求处理： 多个客户端通过socket连接到 Redis server， 但只有在socket可无阻塞读/写时， server才会和这些客户端交互。")]),t._v(" "),n("p",[t._v("Redis 将这类因为对socket进行多路复用而产生的事件称为文件事件， 文件事件可分类如下：")]),t._v(" "),n("h2",{attrs:{id:"_1-1-读事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-读事件"}},[t._v("#")]),t._v(" 1.1 读事件")]),t._v(" "),n("p",[t._v("读事件标志着客户端命令请求的发送状态。")]),t._v(" "),n("p",[t._v("当一个新的client连接到服务器时， server会给该client绑定读事件， 直到client断开连接后， 该读事件才会被移除。")]),t._v(" "),n("p",[t._v("读事件在整个网络连接的生命期内， 都会在等待和就绪两种状态之间切换：")]),t._v(" "),n("ul",[n("li",[t._v("当client只是连接到server，但并未向server发送命令时，该客户端的读事件就处于等待状态")]),t._v(" "),n("li",[t._v("当client给server发送命令请求，并且请求已到达时（相应的套接字可以无阻塞地执行读操作），该client的读事件处于就绪状态。")])]),t._v(" "),n("h3",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),n("p",[t._v("如图展示三个已连接到server、但并未发命令的client\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020090213262737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})]),t._v(" "),n("p",[t._v("此时客户端的状态：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Client")]),t._v(" "),n("th",[t._v("读事件状态")]),t._v(" "),n("th",[t._v("命令发送状态")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("A")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("未发送")])]),t._v(" "),n("tr",[n("td",[t._v("B")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("未发送")])]),t._v(" "),n("tr",[n("td",[t._v("C")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("未发送")])])])]),t._v(" "),n("p",[t._v("后来，A向服务器发送命令请求， 并且命令请求已到达时， A的读事件状态变为就绪：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020090213275226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}}),t._v("\n此时客户端的状态：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Client")]),t._v(" "),n("th",[t._v("读事件状态")]),t._v(" "),n("th",[t._v("命令发送状态")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("A")]),t._v(" "),n("td",[t._v("就绪")]),t._v(" "),n("td",[t._v("已发送且已到达")])]),t._v(" "),n("tr",[n("td",[t._v("B")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("未发送")])]),t._v(" "),n("tr",[n("td",[t._v("C")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("未发送")])])])]),t._v(" "),n("p",[t._v("当"),n("strong",[t._v("事件处理器")]),t._v("被执行时，就绪的"),n("strong",[t._v("文件事件")]),t._v("会被识别到，相应的命令请求就会被发送到"),n("strong",[t._v("命令执行器")]),t._v("，并对命令进行求值。")]),t._v(" "),n("h2",{attrs:{id:"_1-2-写事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-写事件"}},[t._v("#")]),t._v(" 1.2 写事件")]),t._v(" "),n("p",[t._v("写事件标志着client对命令结果的接收状态。")]),t._v(" "),n("p",[t._v("和client自始至终都关联着读事件不同， server只会在有命令结果要传回给client时， 才会为client关联写事件， 并且在命令结果传送完毕之后， client和写事件的关联就会被移除。")]),t._v(" "),n("p",[t._v("一个写事件会在两种状态之间切换：")]),t._v(" "),n("ul",[n("li",[t._v("当server有命令结果需返回给client，但client还未能执行无阻塞写，那么写事件处等待状态")]),t._v(" "),n("li",[t._v("当server有命令结果需返回给client，且client可无阻塞写，那么写事件处就绪状态")])]),t._v(" "),n("p",[t._v("当client向server发命令请求， 且请求被接受并执行后， server就需将保存在缓存内的命令执行结果返回给client， 这时server就会为client关联写事件。")]),t._v(" "),n("h3",{attrs:{id:"示例-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),n("p",[t._v("server正等待client A 变得可写， 从而将命令结果返回给A：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902140433912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}}),t._v("\n此时客户端的状态：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Client")]),t._v(" "),n("th",[t._v("读事件状态")]),t._v(" "),n("th",[t._v("写事件状态")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("A")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("等待")])]),t._v(" "),n("tr",[n("td",[t._v("B")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("无")])]),t._v(" "),n("tr",[n("td",[t._v("C")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("无")])])])]),t._v(" "),n("p",[t._v("当A的socket可无阻塞写时， 写事件就绪， server将保存在缓存内的命令执行结果返回给client：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902140750136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}}),t._v("\n此时client状态：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Client")]),t._v(" "),n("th",[t._v("读事件状态")]),t._v(" "),n("th",[t._v("写事件状态")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("A")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("已就绪")])]),t._v(" "),n("tr",[n("td",[t._v("B")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("无")])]),t._v(" "),n("tr",[n("td",[t._v("C")]),t._v(" "),n("td",[t._v("等待")]),t._v(" "),n("td",[t._v("无")])])])]),t._v(" "),n("p",[t._v("当命令执行结果被传回client后， client和写事件的关联会被解除（只剩读事件），返回命令执行结果的动作执行完毕，回到最初：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902140952982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"_1-3-同时关联读-写事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-同时关联读-写事件"}},[t._v("#")]),t._v(" 1.3 同时关联读/写事件")]),t._v(" "),n("p",[t._v("我们说过，读事件只有在client断开和server的连接时，才会被移除。即当client关联写事件时，实际上它在同时关联读/写事件。")]),t._v(" "),n("p",[t._v("因为在同一次文件事件处理器的调用中， 单个客户端只能执行其中一种事件（要么读，要么写，不能又读又写）， 当出现读事件和写事件同时就绪时，事件处理器"),n("strong",[t._v("优先处理读事件")]),t._v("。")]),t._v(" "),n("p",[t._v("即当server有命令结果要返回client， 而client又有新命令请求进入时， server先处理新命令请求。")]),t._v(" "),n("h1",{attrs:{id:"_2-时间事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-时间事件"}},[t._v("#")]),t._v(" 2 时间事件")]),t._v(" "),n("p",[t._v("时间事件记录着那些要在指定时间点运行的事件，多个时间事件以无序链表结构保存在服务器状态中。")]),t._v(" "),n("blockquote",[n("p",[t._v("无序链表并不影响时间事件处理器的性能。\n在Redis3.0版本，正常模式下的 Redis 只带有 serverCron 一个时间事件， 而在 benchmark 模式下， Redis 也只使用两个时间事件。\n在这种情况下， 程序几乎是将无序链表退化成一个指针来使用， 所以使用无序链表来保存时间事件， 并不影响事件处理器性能。")])]),t._v(" "),n("ul",[n("li",[t._v("时间事件的数据结构\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902173947946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})])]),t._v(" "),n("p",[t._v("根据 "),n("code",[t._v("timeProc")]),t._v(" 函数返回值，将时间事件分类如下：")]),t._v(" "),n("ul",[n("li",[t._v("返回 "),n("code",[t._v("AE_NOMORE")]),t._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902174708189.png#pic_center",alt:""}}),t._v("\n那么这个事件为单次执行事件。该事件会在指定时间被处理一次，之后该事件就会被删除")]),t._v(" "),n("li",[t._v("返回一个非 "),n("code",[t._v("AE_NOMORE")]),t._v(" 的整数值，则为循环执行事件。该事件会在指定时间被处理，之后它会按照timeProc的返回值，更新事件的 when 属性，让这个事件在之后某时间点再运行，以这种方式一直更新运行。")])]),t._v(" "),n("p",[t._v("伪代码表示的两种事件处理：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle_time_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行事件处理器，并获取返回值")]),t._v("\n    retval "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeProc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" retval "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AE_NOMORE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果返回 AE_NOMORE ，那么将事件从链表中删除，不再执行")]),t._v("\n        server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time_event_linked_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则，更新事件的 when 属性")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让它在当前时间之后的 retval 毫秒之后再次运行")]),t._v("\n        time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("when "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unix_ts_in_ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" retval\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("当时间事件处理器被执行时， 它遍历链表中所有的时间事件， 检查它们的"),n("code",[t._v("when")]),t._v(" 属性，并执行已到达事件：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_time_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历时间事件链表")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" time_event "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time_event_linked_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查事件是否已经到达")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("when "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" unix_ts_in_ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理已到达事件")]),t._v("\n            handle_time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h2",{attrs:{id:"时间事件实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间事件实例"}},[t._v("#")]),t._v(" 时间事件实例")]),t._v(" "),n("p",[t._v("服务器需要定期对自身的资源和状态进行检查、整理， 保证服务器维持在一个健康稳定状态， 这类操作被统称为常规操作（cron job）。")]),t._v(" "),n("p",[t._v("在 Redis 中， 常规操作由 "),n("code",[t._v("redis.c/serverCron")]),t._v(" 实现， 包括如下操作：")]),t._v(" "),n("ul",[n("li",[t._v("更新服务器的各类统计信息，比如时间、内存占用、数据库占用情况等")]),t._v(" "),n("li",[t._v("清理数据库中的过期键值对")]),t._v(" "),n("li",[t._v("对不合理的数据库进行大小调整")]),t._v(" "),n("li",[t._v("关闭和清理连接失效的客户端")]),t._v(" "),n("li",[t._v("尝试进行 AOF 或 RDB 持久化操作")]),t._v(" "),n("li",[t._v("如果服务器是主节点的话，对附属节点进行定期同步")]),t._v(" "),n("li",[t._v("如果处于集群模式的话，对集群进行定期同步和连接测试")])]),t._v(" "),n("p",[t._v("Redis 将 serverCron（后文简称为sC） 作为时间事件运行， 确保它能够定期自动运行一次，又因 sC 需要在 Redis 服务器运行期一直定期运行， 所以它是一个循环时间事件：sC 会一直定期执行，直至服务器关闭。")]),t._v(" "),n("p",[t._v("Redis 2.6 的 sC 每秒运行 10 次，即平均每 100 ms运行一次。\nRedis 2.8 用户可以通过修改 "),n("code",[t._v("hz")]),t._v(" 选项设置 sC 的每秒执行次数。")]),t._v(" "),n("h1",{attrs:{id:"_3-两种事件的调度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-两种事件的调度"}},[t._v("#")]),t._v(" 3 两种事件的调度")]),t._v(" "),n("p",[t._v("简单地说， Redis 里面的两种事件呈协作关系， 它们之间包含如下属性：")]),t._v(" "),n("ul",[n("li",[t._v("一种事件会等待另一种事件执行完后，才开始执行，事件之间不会出现抢占")]),t._v(" "),n("li",[t._v("事件处理器先处理文件事件（即处理命令请求），再执行时间事件（调用 sC）")]),t._v(" "),n("li",[t._v("文件事件的等待时间（类 poll 函数的最大阻塞时间），由距离到达时间最短的时间事件决定")])]),t._v(" "),n("p",[t._v("这表明， 实际处理时间事件的时间， 通常会比事件所预定的时间要晚， 延迟时间取决于时间事件执行前， 执行完成文件事件所耗时间。")]),t._v(" "),n("h2",{attrs:{id:"示例-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),n("h3",{attrs:{id:"常规案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常规案例"}},[t._v("#")]),t._v(" 常规案例")]),t._v(" "),n("p",[t._v("虽然时间事件 "),n("strong",[t._v("Time Event Y")]),t._v(" 可设置其"),n("code",[t._v("when")]),t._v("属性计划在 "),n("code",[t._v("t1")]),t._v(" 时间执行， 但因为文件事件 "),n("strong",[t._v("File Event X")]),t._v(" 正在运行， 所以 "),n("strong",[t._v("Time Event Y")]),t._v(" 的执行被延迟。\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902204150894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"sc-案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sc-案例"}},[t._v("#")]),t._v(" sC 案例")]),t._v(" "),n("p",[t._v("而且对于 "),n("strong",[t._v("sC")]),t._v(" 这类循环执行的时间事件来说，如果事件处理器的返回值是 t ，那么 Redis 只保证：")]),t._v(" "),n("ul",[n("li",[t._v("如果两次执行时间事件处理器之间的时间间隔≥t ，则该时间事件至少会被处理一次")]),t._v(" "),n("li",[t._v("而非，每隔 t 时间，就一定要执行一次事件\n这对于不使用抢占调度的 Redis 事件处理器而言，也不可能做到")])]),t._v(" "),n("p",[t._v("比如，虽然 sC 设定的间隔为 10 ms，但它并非是如下那样每隔 10 ms就运行一次：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902213555519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})]),t._v(" "),n("p",[t._v("实际的 sC 运行方式更可能如下：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902214433599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70#pic_center",alt:""}})]),t._v(" "),n("p",[t._v("根据情况，如果处理文件事件耗费了非常多的时间，sC 被推迟到一两秒之后才能执行，也有可能。\n整个事件处理器程序可以用以下伪代码描述：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取执行时间最接近现在的一个时间事件")]),t._v("\n\tte "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_nearest_time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time_event_linked_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查该事件的执行时间和现在时间之差")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果值 <= 0 ，说明至少有一个时间事件已到达")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果值 > 0 ，说明目前没有任何时间事件到达")]),t._v("\n\tnearest_te_remaind_ms "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" te"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("when "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" now_in_ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nearest_te_remaind_ms "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 若有时间事件已达，则调用不阻塞的文件事件等待函数")]),t._v("\n\t\tpoll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 若时间事件还没到达，则阻塞的最大时间不超过 te 的到达时间")]),t._v("\n\t\tpoll"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nearest_te_remaind_ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 优先处理已就绪的文件事件")]),t._v("\n\tprocess_file_events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再处理已到达的时间事件")]),t._v("\n\tprocess_time_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br")])]),n("p",[t._v("可以看出：")]),t._v(" "),n("ul",[n("li",[t._v("到达时间最近的时间事件，决定了 poll 的最大阻塞时长")]),t._v(" "),n("li",[t._v("文件事件优先于时间事件处理")])]),t._v(" "),n("p",[t._v("将这个事件处理函数置于一个循环中，加上初始化和清理函数，这就构成了 Redis 服务器的主\n函数调用：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("redis_main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化服务器")]),t._v("\n\tinit_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一直处理事件，直到服务器关闭为止")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" server_is_not_shutdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tprocess_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清理服务器")]),t._v("\n\tclean_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("参考")]),t._v(" "),n("ul",[n("li",[t._v("《Redis 设计与实现》")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200825235213822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70#pic_center",alt:""}})])])}),[],!1,null,null,null);s.default=a.exports}}]);