(window.webpackJsonp=window.webpackJsonp||[]).push([[626],{1016:function(e,s,n){"use strict";n.r(s);var a=n(13),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[e._v("概述")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#selector%E7%9A%84%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7"}},[e._v("Selector的中的重要属性")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#selector-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90"}},[e._v("Selector 源码解析")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1%E3%80%81selector%E7%9A%84%E6%9E%84%E5%BB%BA"}},[e._v("1、Selector的构建")]),e._v("\n* "),n("a",{attrs:{href:"#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9C%8B%E4%B8%8B-selectoropen%EF%BC%9A"}},[e._v("接下来看下 selector.open()：")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#epollselectorimpl"}},[e._v("EPollSelectorImpl")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#epollarraywrapper"}},[e._v("EPollArrayWrapper")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#serversocketchannel%E7%9A%84%E6%9E%84%E5%BB%BA"}},[e._v("ServerSocketChannel的构建")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B0%86serversocketchannel%E6%B3%A8%E5%86%8C%E5%88%B0selector"}},[e._v("将ServerSocketChannel注册到Selector")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#epollselectorimpl-implregister"}},[e._v("EPollSelectorImpl. implRegister")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#selection%E6%93%8D%E4%BD%9C"}},[e._v("Selection操作")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#epoll%E5%8E%9F%E7%90%86"}},[e._v("epoll原理")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%90%8E%E8%AE%B0"}},[e._v("后记")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[e._v("参考文章")])])]),e._v(" "),n("p",[e._v("本文转自互联网")]),e._v(" "),n("p",[e._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),n("p",[e._v("喜欢的话麻烦点下Star哈")]),e._v(" "),n("p",[e._v("文章将同步到我的个人博客：")]),e._v(" "),n("blockquote",[n("p",[e._v("www.how2playlife.com")])]),e._v(" "),n("p",[e._v("本文是微信公众号【Java技术江湖】的《不可轻视的Java网络编程》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),e._v(" "),n("p",[e._v("该系列博文会告诉你如何从计算机网络的基础知识入手，一步步地学习Java网络基础，从socket到nio、bio、aio和netty等网络编程知识，并且进行实战，网络编程是每一个Java后端工程师必须要学习和理解的知识点，进一步来说，你还需要掌握Linux中的网络编程原理，包括IO模型、网络编程框架netty的进阶原理，才能更完整地了解整个Java网络编程的知识体系，形成自己的知识框架。")]),e._v(" "),n("p",[e._v("为了更好地总结和检验你的学习成果，本系列文章也会提供部分知识点对应的面试题以及参考答案。")]),e._v(" "),n("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),n("p",[e._v("Selector是NIO中实现I/O多路复用的关键类。Selector实现了通过一个线程管理多个Channel，从而管理多个网络连接的目的。")]),e._v(" "),n("p",[e._v("Channel代表这一个网络连接通道，我们可以将Channel注册到Selector中以实现Selector对其的管理。一个Channel可以注册到多个不同的Selector中。")]),e._v(" "),n("p",[e._v("当Channel注册到Selector后会返回一个SelectionKey对象，该SelectionKey对象则代表这这个Channel和它注册的Selector间的关系。并且SelectionKey中维护着两个很重要的属性：interestOps、readyOps\ninterestOps是我们希望Selector监听Channel的哪些事件。")]),e._v(" "),n("p",[e._v("我们将我们感兴趣的事件设置到该字段，这样在selection操作时，当发现该Channel有我们所感兴趣的事件发生时，就会将我们感兴趣的事件再设置到readyOps中，这样我们就能得知是哪些事件发生了以做相应处理。")]),e._v(" "),n("h2",{attrs:{id:"selector的中的重要属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#selector的中的重要属性"}},[e._v("#")]),e._v(" Selector的中的重要属性")]),e._v(" "),n("p",[e._v("Selector中维护3个特别重要的SelectionKey集合，分别是")]),e._v(" "),n("ul",[n("li",[e._v("keys：所有注册到Selector的Channel所表示的SelectionKey都会存在于该集合中。keys元素的添加会在Channel注册到Selector时发生。")]),e._v(" "),n("li",[e._v("selectedKeys：该集合中的每个SelectionKey都是其对应的Channel在上一次操作selection期间被检查到至少有一种SelectionKey中所感兴趣的操作已经准备好被处理。该集合是keys的一个子集。")]),e._v(" "),n("li",[e._v("cancelledKeys：执行了取消操作的SelectionKey会被放入到该集合中。该集合是keys的一个子集。")])]),e._v(" "),n("p",[e._v("下面的源码解析会说明上面3个集合的用处")]),e._v(" "),n("h2",{attrs:{id:"selector-源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#selector-源码解析"}},[e._v("#")]),e._v(" Selector 源码解析")]),e._v(" "),n("p",[e._v("下面我们通过一段对Selector的使用流程讲解来进一步深入其实现原理。\n首先先来段Selector最简单的使用片段")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        ServerSocketChannel serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        int port = 5566;          \n        serverChannel.socket().bind(new InetSocketAddress(port));\n        Selector selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        while(true){\n            int n = selector.select();\n            if(n > 0) {\n                Iterator<SelectionKey> iter = selector.selectedKeys().iterator();\n                while (iter.hasNext()) {\n                    SelectionKey selectionKey = iter.next();\n                    ......\n                    iter.remove();\n                }\n            }\n        }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("h3",{attrs:{id:"_1、selector的构建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、selector的构建"}},[e._v("#")]),e._v(" 1、Selector的构建")]),e._v(" "),n("p",[e._v("SocketChannel、ServerSocketChannel和Selector的实例初始化都通过SelectorProvider类实现。")]),e._v(" "),n("p",[e._v("ServerSocketChannel.open();")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static ServerSocketChannel open() throws IOException {\n        return SelectorProvider.provider().openServerSocketChannel();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("SocketChannel.open();")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static SocketChannel open() throws IOException {\n        return SelectorProvider.provider().openSocketChannel();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("Selector.open();")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static Selector open() throws IOException {\n        return SelectorProvider.provider().openSelector();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("我们来进一步的了解下SelectorProvider.provider()")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static SelectorProvider provider() {\n        synchronized (lock) {\n            if (provider != null)\n                return provider;\n            return AccessController.doPrivileged(\n                new PrivilegedAction<>() {\n                    public SelectorProvider run() {\n                            if (loadProviderFromProperty())\n                                return provider;\n                            if (loadProviderAsService())\n                                return provider;\n                            provider = sun.nio.ch.DefaultSelectorProvider.create();\n                            return provider;\n                        }\n                    });\n        }\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("① 如果配置了“java.nio.channels.spi.SelectorProvider”属性，则通过该属性值load对应的SelectorProvider对象，如果构建失败则抛异常。\n② 如果provider类已经安装在了对系统类加载程序可见的jar包中，并且该jar包的源码目录META-INF/services包含有一个java.nio.channels.spi.SelectorProvider提供类配置文件，则取文件中第一个类名进行load以构建对应的SelectorProvider对象，如果构建失败则抛异常。\n③ 如果上面两种情况都不存在，则返回系统默认的SelectorProvider，即，sun.nio.ch.DefaultSelectorProvider.create();\n④ 随后在调用该方法，即SelectorProvider.provider()。则返回第一次调用的结果。")]),e._v(" "),n("p",[e._v("不同系统对应着不同的sun.nio.ch.DefaultSelectorProvider")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4235178-a02c498e08979aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:""}})]),e._v(" "),n("p",[e._v("这里我们看linux下面的sun.nio.ch.DefaultSelectorProvider")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class DefaultSelectorProvider {\n\n    /**\n     * Prevent instantiation.\n     */\n    private DefaultSelectorProvider() { }\n\n    /**\n     * Returns the default SelectorProvider.\n     */\n    public static SelectorProvider create() {\n        return new sun.nio.ch.EPollSelectorProvider();\n    }\n\n}\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("可以看见，linux系统下sun.nio.ch.DefaultSelectorProvider.create(); 会生成一个sun.nio.ch.EPollSelectorProvider类型的SelectorProvider，这里对应于linux系统的epoll")]),e._v(" "),n("h6",{attrs:{id:"接下来看下-selector-open"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接下来看下-selector-open"}},[e._v("#")]),e._v(" 接下来看下 selector.open()：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    /**\n     * Opens a selector.\n     *\n     * <p> The new selector is created by invoking the {@link\n     * java.nio.channels.spi.SelectorProvider#openSelector openSelector} method\n     * of the system-wide default {@link\n     * java.nio.channels.spi.SelectorProvider} object.  </p>\n     *\n     * @return  A new selector\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     */\n    public static Selector open() throws IOException {\n        return SelectorProvider.provider().openSelector();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("p",[e._v("在得到sun.nio.ch.EPollSelectorProvider后调用openSelector()方法构建Selector，这里会构建一个EPollSelectorImpl对象。")]),e._v(" "),n("h3",{attrs:{id:"epollselectorimpl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epollselectorimpl"}},[e._v("#")]),e._v(" EPollSelectorImpl")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class EPollSelectorImpl\n    extends SelectorImpl\n{\n\n    // File descriptors used for interrupt\n    protected int fd0;\n    protected int fd1;\n\n    // The poll object\n    EPollArrayWrapper pollWrapper;\n\n    // Maps from file descriptors to keys\n    private Map<Integer,SelectionKeyImpl> fdToKey;\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("EPollSelectorImpl(SelectorProvider sp) throws IOException {\n        super(sp);\n        long pipeFds = IOUtil.makePipe(false);\n        fd0 = (int) (pipeFds >>> 32);\n        fd1 = (int) pipeFds;\n        try {\n            pollWrapper = new EPollArrayWrapper();\n            pollWrapper.initInterrupt(fd0, fd1);\n            fdToKey = new HashMap<>();\n        } catch (Throwable t) {\n            try {\n                FileDispatcherImpl.closeIntFD(fd0);\n            } catch (IOException ioe0) {\n                t.addSuppressed(ioe0);\n            }\n            try {\n                FileDispatcherImpl.closeIntFD(fd1);\n            } catch (IOException ioe1) {\n                t.addSuppressed(ioe1);\n            }\n            throw t;\n        }\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("EPollSelectorImpl构造函数完成：\n① EPollArrayWrapper的构建，EpollArrayWapper将Linux的epoll相关系统调用封装成了native方法供EpollSelectorImpl使用。\n② 通过EPollArrayWrapper向epoll注册中断事件")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    void initInterrupt(int fd0, int fd1) {\n        outgoingInterruptFD = fd1;\n        incomingInterruptFD = fd0;\n        epollCtl(epfd, EPOLL_CTL_ADD, fd0, EPOLLIN);\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("③ fdToKey：构建文件描述符-SelectionKeyImpl映射表，所有注册到selector的channel对应的SelectionKey和与之对应的文件描述符都会放入到该映射表中。")]),e._v(" "),n("h3",{attrs:{id:"epollarraywrapper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epollarraywrapper"}},[e._v("#")]),e._v(" EPollArrayWrapper")]),e._v(" "),n("p",[e._v("EPollArrayWrapper完成了对epoll文件描述符的构建，以及对linux系统的epoll指令操纵的封装。维护每次selection操作的结果，即epoll_wait结果的epoll_event数组。\nEPollArrayWrapper操纵了一个linux系统下epoll_event结构的本地数组。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("* typedef union epoll_data {\n*     void *ptr;\n*     int fd;\n*     __uint32_t u32;\n*     __uint64_t u64;\n*  } epoll_data_t;\n*\n* struct epoll_event {\n*     __uint32_t events;\n*     epoll_data_t data;\n* };\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("epoll_event的数据成员(epoll_data_t data)包含有与通过epoll_ctl将文件描述符注册到epoll时设置的数据相同的数据。这里data.fd为我们注册的文件描述符。这样我们在处理事件的时候持有有效的文件描述符了。")]),e._v(" "),n("p",[e._v("EPollArrayWrapper将Linux的epoll相关系统调用封装成了native方法供EpollSelectorImpl使用。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    private native int epollCreate();\n    private native void epollCtl(int epfd, int opcode, int fd, int events);\n    private native int epollWait(long pollAddress, int numfds, long timeout,\n                                 int epfd) throws IOException;\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上述三个native方法就对应Linux下epoll相关的三个系统调用")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    // The fd of the epoll driver\n    private final int epfd;\n\n     // The epoll_event array for results from epoll_wait\n    private final AllocatedNativeObject pollArray;\n\n    // Base address of the epoll_event array\n    private final long pollArrayAddress;\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    // 用于存储已经注册的文件描述符和其注册等待改变的事件的关联关系。在epoll_wait操作就是要检测这里文件描述法注册的事件是否有发生。\n    private final byte[] eventsLow = new byte[MAX_UPDATE_ARRAY_SIZE];\n    private final Map<Integer,Byte> eventsHigh = new HashMap<>();\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    EPollArrayWrapper() throws IOException {\n        // creates the epoll file descriptor\n        epfd = epollCreate();\n\n        // the epoll_event array passed to epoll_wait\n        int allocationSize = NUM_EPOLLEVENTS * SIZE_EPOLLEVENT;\n        pollArray = new AllocatedNativeObject(allocationSize, true);\n        pollArrayAddress = pollArray.address();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("EPoolArrayWrapper构造函数，创建了epoll文件描述符。构建了一个用于存放epoll_wait返回结果的epoll_event数组。")]),e._v(" "),n("h3",{attrs:{id:"serversocketchannel的构建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#serversocketchannel的构建"}},[e._v("#")]),e._v(" ServerSocketChannel的构建")]),e._v(" "),n("p",[e._v("ServerSocketChannel.open();")]),e._v(" "),n("p",[e._v("返回ServerSocketChannelImpl对象，构建linux系统下ServerSocket的文件描述符。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    // Our file descriptor\n    private final FileDescriptor fd;\n\n    // fd value needed for dev/poll. This value will remain valid\n    // even after the value in the file descriptor object has been set to -1\n    private int fdVal;\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    ServerSocketChannelImpl(SelectorProvider sp) throws IOException {\n        super(sp);\n        this.fd =  Net.serverSocket(true);\n        this.fdVal = IOUtil.fdVal(fd);\n        this.state = ST_INUSE;\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h3",{attrs:{id:"将serversocketchannel注册到selector"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#将serversocketchannel注册到selector"}},[e._v("#")]),e._v(" 将ServerSocketChannel注册到Selector")]),e._v(" "),n("p",[e._v("serverChannel.register(selector, SelectionKey.OP_ACCEPT);")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public final SelectionKey register(Selector sel, int ops,\n                                       Object att)\n        throws ClosedChannelException\n    {\n        synchronized (regLock) {\n            if (!isOpen())\n                throw new ClosedChannelException();\n            if ((ops & ~validOps()) != 0)\n                throw new IllegalArgumentException();\n            if (blocking)\n                throw new IllegalBlockingModeException();\n            SelectionKey k = findKey(sel);\n            if (k != null) {\n                k.interestOps(ops);\n                k.attach(att);\n            }\n            if (k == null) {\n                // New registration\n                synchronized (keyLock) {\n                    if (!isOpen())\n                        throw new ClosedChannelException();\n                    k = ((AbstractSelector)sel).register(this, ops, att);\n                    addKey(k);\n                }\n            }\n            return k;\n        }\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected final SelectionKey register(AbstractSelectableChannel ch,\n                                          int ops,\n                                          Object attachment)\n    {\n        if (!(ch instanceof SelChImpl))\n            throw new IllegalSelectorException();\n        SelectionKeyImpl k = new SelectionKeyImpl((SelChImpl)ch, this);\n        k.attach(attachment);\n        synchronized (publicKeys) {\n            implRegister(k);\n        }\n        k.interestOps(ops);\n        return k;\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("① 构建代表channel和selector间关系的SelectionKey对象\n② implRegister(k)将channel注册到epoll中\n③ k.interestOps(int) 完成下面两个操作：\na) 会将注册的感兴趣的事件和其对应的文件描述存储到EPollArrayWrapper对象的eventsLow或eventsHigh中，这是给底层实现epoll_wait时使用的。\nb) 同时该操作还会将设置SelectionKey的interestOps字段，这是给我们程序员获取使用的。")]),e._v(" "),n("h3",{attrs:{id:"epollselectorimpl-implregister"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epollselectorimpl-implregister"}},[e._v("#")]),e._v(" EPollSelectorImpl. implRegister")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected void implRegister(SelectionKeyImpl ski) {\n        if (closed)\n            throw new ClosedSelectorException();\n        SelChImpl ch = ski.channel;\n        int fd = Integer.valueOf(ch.getFDVal());\n        fdToKey.put(fd, ski);\n        pollWrapper.add(fd);\n        keys.add(ski);\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("① 将channel对应的fd(文件描述符)和对应的SelectionKeyImpl放到fdToKey映射表中。\n② 将channel对应的fd(文件描述符)添加到EPollArrayWrapper中，并强制初始化fd的事件为0 ( 强制初始更新事件为0，因为该事件可能存在于之前被取消过的注册中。)\n③ 将selectionKey放入到keys集合中。")]),e._v(" "),n("h3",{attrs:{id:"selection操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#selection操作"}},[e._v("#")]),e._v(" Selection操作")]),e._v(" "),n("p",[e._v("selection操作有3中类型：\n① select()：该方法会一直阻塞直到至少一个channel被选择(即，该channel注册的事件发生了)为止，除非当前线程发生中断或者selector的wakeup方法被调用。\n② select(long time)：该方法和select()类似，该方法也会导致阻塞直到至少一个channel被选择(即，该channel注册的事件发生了)为止，除非下面3种情况任意一种发生：a) 设置的超时时间到达；b) 当前线程发生中断；c) selector的wakeup方法被调用\n③ selectNow()：该方法不会发生阻塞，如果没有一个channel被选择也会立即返回。")]),e._v(" "),n("p",[e._v("我们主要来看看select()的实现 ：int n = selector.select();")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public int select() throws IOException {\n        return select(0);\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("最终会调用到EPollSelectorImpl的doSelect")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected int doSelect(long timeout) throws IOException {\n        if (closed)\n            throw new ClosedSelectorException();\n        processDeregisterQueue();\n        try {\n            begin();\n            pollWrapper.poll(timeout);\n        } finally {\n            end();\n        }\n        processDeregisterQueue();\n        int numKeysUpdated = updateSelectedKeys();\n        if (pollWrapper.interrupted()) {\n            // Clear the wakeup pipe\n            pollWrapper.putEventOps(pollWrapper.interruptedIndex(), 0);\n            synchronized (interruptLock) {\n                pollWrapper.clearInterrupted();\n                IOUtil.drain(fd0);\n                interruptTriggered = false;\n            }\n        }\n        return numKeysUpdated;\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("① 先处理注销的selectionKey队列\n② 进行底层的epoll_wait操作\n③ 再次对注销的selectionKey队列进行处理\n④ 更新被选择的selectionKey")]),e._v(" "),n("p",[e._v("先来看processDeregisterQueue():")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    void processDeregisterQueue() throws IOException {\n        Set var1 = this.cancelledKeys();\n        synchronized(var1) {\n            if (!var1.isEmpty()) {\n                Iterator var3 = var1.iterator();\n\n                while(var3.hasNext()) {\n                    SelectionKeyImpl var4 = (SelectionKeyImpl)var3.next();\n\n                    try {\n                        this.implDereg(var4);\n                    } catch (SocketException var12) {\n                        IOException var6 = new IOException("Error deregistering key");\n                        var6.initCause(var12);\n                        throw var6;\n                    } finally {\n                        var3.remove();\n                    }\n                }\n            }\n\n        }\n    }\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("从cancelledKeys集合中依次取出注销的SelectionKey，执行注销操作，将处理后的SelectionKey从cancelledKeys集合中移除。执行processDeregisterQueue()后cancelledKeys集合会为空。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected void implDereg(SelectionKeyImpl ski) throws IOException {\n        assert (ski.getIndex() >= 0);\n        SelChImpl ch = ski.channel;\n        int fd = ch.getFDVal();\n        fdToKey.remove(Integer.valueOf(fd));\n        pollWrapper.remove(fd);\n        ski.setIndex(-1);\n        keys.remove(ski);\n        selectedKeys.remove(ski);\n        deregister((AbstractSelectionKey)ski);\n        SelectableChannel selch = ski.channel();\n        if (!selch.isOpen() && !selch.isRegistered())\n            ((SelChImpl)selch).kill();\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("注销会完成下面的操作：\n① 将已经注销的selectionKey从fdToKey( 文件描述与SelectionKeyImpl的映射表 )中移除\n② 将selectionKey所代表的channel的文件描述符从EPollArrayWrapper中移除\n③ 将selectionKey从keys集合中移除，这样下次selector.select()就不会再将该selectionKey注册到epoll中监听\n④ 也会将selectionKey从对应的channel中注销\n⑤ 最后如果对应的channel已经关闭并且没有注册其他的selector了，则将该channel关闭\n完成👆的操作后，注销的SelectionKey就不会出现先在keys、selectedKeys以及cancelKeys这3个集合中的任何一个。")]),e._v(" "),n("p",[e._v("接着我们来看EPollArrayWrapper.poll(timeout)：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    int poll(long timeout) throws IOException {\n        updateRegistrations();\n        updated = epollWait(pollArrayAddress, NUM_EPOLLEVENTS, timeout, epfd);\n        for (int i=0; i<updated; i++) {\n            if (getDescriptor(i) == incomingInterruptFD) {\n                interruptedIndex = i;\n                interrupted = true;\n                break;\n            }\n        }\n        return updated;\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("updateRegistrations()方法会将已经注册到该selector的事件(eventsLow或eventsHigh)通过调用epollCtl(epfd, opcode, fd, events); 注册到linux系统中。\n这里epollWait就会调用linux底层的epoll_wait方法，并返回在epoll_wait期间有事件触发的entry的个数")]),e._v(" "),n("p",[e._v("再看updateSelectedKeys()：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    private int updateSelectedKeys() {\n        int entries = pollWrapper.updated;\n        int numKeysUpdated = 0;\n        for (int i=0; i<entries; i++) {\n            int nextFD = pollWrapper.getDescriptor(i);\n            SelectionKeyImpl ski = fdToKey.get(Integer.valueOf(nextFD));\n            // ski is null in the case of an interrupt\n            if (ski != null) {\n                int rOps = pollWrapper.getEventOps(i);\n                if (selectedKeys.contains(ski)) {\n                    if (ski.channel.translateAndSetReadyOps(rOps, ski)) {\n                        numKeysUpdated++;\n                    }\n                } else {\n                    ski.channel.translateAndSetReadyOps(rOps, ski);\n                    if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {\n                        selectedKeys.add(ski);\n                        numKeysUpdated++;\n                    }\n                }\n            }\n        }\n        return numKeysUpdated;\n    }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("p",[e._v("该方法会从通过EPollArrayWrapper pollWrapper 以及 fdToKey( 构建文件描述符-SelectorKeyImpl映射表 )来获取有事件触发的SelectionKeyImpl对象，然后将SelectionKeyImpl放到selectedKey集合( 有事件触发的selectionKey集合，可以通过selector.selectedKeys()方法获得 )中，即selectedKeys。并重新设置SelectionKeyImpl中相关的readyOps值。")]),e._v(" "),n("p",[e._v("但是，这里要注意两点：")]),e._v(" "),n("p",[e._v("① 如果SelectionKeyImpl已经存在于selectedKeys集合中，并且发现触发的事件已经存在于readyOps中了，则不会使numKeysUpdated++；这样会使得我们无法得知该事件的变化。")]),e._v(" "),n("p",[e._v("👆这点说明了为什么我们要在每次从selectedKey中获取到Selectionkey后，将其从selectedKey集合移除，就是为了当有事件触发使selectionKey能正确到放入selectedKey集合中，并正确的通知给调用者。")]),e._v(" "),n("p",[e._v("再者，如果不将已经处理的SelectionKey从selectedKey集合中移除，那么下次有新事件到来时，在遍历selectedKey集合时又会遍历到这个SelectionKey，这个时候就很可能出错了。比如，如果没有在处理完OP_ACCEPT事件后将对应SelectionKey从selectedKey集合移除，那么下次遍历selectedKey集合时，处理到到该SelectionKey，相应的ServerSocketChannel.accept()将返回一个空(null)的SocketChannel。")]),e._v(" "),n("p",[e._v("② 如果发现channel所发生I/O事件不是当前SelectionKey所感兴趣，则不会将SelectionKeyImpl放入selectedKeys集合中，也不会使numKeysUpdated++")]),e._v(" "),n("h3",{attrs:{id:"epoll原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll原理"}},[e._v("#")]),e._v(" epoll原理")]),e._v(" "),n("p",[e._v("select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。")]),e._v(" "),n("p",[e._v("epoll是Linux下的一种IO多路复用技术，可以非常高效的处理数以百万计的socket句柄。")]),e._v(" "),n("p",[e._v("在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)\n如果没有大量的idle -connection或者dead-connection，epoll的效率并不会比select/poll高很多，但是当遇到大量的idle- connection，就会发现epoll的效率大大高于select/poll。")]),e._v(" "),n("p",[e._v("注意：linux下Selector底层是通过epoll来实现的，当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。")]),e._v(" "),n("p",[e._v("先看看使用c封装的3个epoll系统调用:")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("int epoll_create(int size)")]),e._v("\nepoll_create建立一个epoll对象。参数size是内核保证能够正确处理的最大句柄数，多于这个最大数时内核可不保证效果。")])]),e._v(" "),n("li",[n("p",[e._v("*"),n("em",[e._v("int epoll_ctl(int epfd, int op, int fd, struct epoll_event "),n("em",[e._v("event)")])]),e._v("\nepoll_ctl可以操作epoll_create创建的epoll，如将socket句柄加入到epoll中让其监控，或把epoll正在监控的某个socket句柄移出epoll。")])]),e._v(" "),n("li",[n("p",[e._v("*"),n("em",[e._v("int epoll_wait(int epfd, struct epoll_event "),n("em",[e._v("events,int maxevents, int timeout)")])]),e._v("\nepoll_wait在调用时，在给定的timeout时间内，所监控的句柄中有事件发生时，就返回用户态的进程。")]),e._v(" "),n("p",[e._v("大概看看epoll内部是怎么实现的：")])])]),e._v(" "),n("ol",[n("li",[n("p",[e._v("epoll初始化时，会向内核注册一个文件系统，用于存储被监控的句柄文件，调用epoll_create时，会在这个文件系统中创建一个file节点。同时epoll会开辟自己的内核高速缓存区，以红黑树的结构保存句柄，以支持快速的查找、插入、删除。还会再建立一个list链表，用于存储准备就绪的事件。")])]),e._v(" "),n("li",[n("p",[e._v("当执行epoll_ctl时，除了把socket句柄放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后，就把socket插入到就绪链表里。")])]),e._v(" "),n("li",[n("p",[e._v("当epoll_wait调用时，仅仅观察就绪链表里有没有数据，如果有数据就返回，否则就sleep，超时时立刻返回。")]),e._v(" "),n("p",[e._v("epoll的两种工作模式：")])])]),e._v(" "),n("ul",[n("li",[e._v("LT：level-trigger，水平触发模式，只要某个socket处于readable/writable状态，无论什么时候进行epoll_wait都会返回该socket。")]),e._v(" "),n("li",[e._v("ET：edge-trigger，边缘触发模式，只有某个socket从unreadable变为readable或从unwritable变为writable时，epoll_wait才会返回该socket。")])]),e._v(" "),n("p",[e._v("socket读数据")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4235178-55ea1cf846c7d84c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540/format/webp",alt:""}})]),e._v(" "),n("p",[e._v("socket写数据")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4235178-39c86c1d52d6abce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/585/format/webp",alt:""}})]),e._v(" "),n("p",[e._v("最后顺便说下在Linux系统中JDK NIO使用的是 LT ，而Netty epoll使用的是 ET。")]),e._v(" "),n("h2",{attrs:{id:"后记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[e._v("#")]),e._v(" 后记")]),e._v(" "),n("p",[e._v("因为本人对计算机系统组成以及C语言等知识比较欠缺，因为文中相关知识点的表示也相当“肤浅”，如有不对不妥的地方望读者指出。同时我也会继续加强对该方面知识点的学习~")]),e._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/0d497fe5484a",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jianshu.com/p/0d497fe5484a"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://link.jianshu.com/?t=http://remcarpediem.com/2017/04/02/Netty",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://remcarpediem.com/2017/04/02/Netty"),n("OutboundLink")],1),e._v("源码-三-I-O模型和Java-NIO底层原理/\n圣思园netty课程")])])}),[],!1,null,null,null);s.default=t.exports}}]);