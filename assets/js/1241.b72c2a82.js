(window.webpackJsonp=window.webpackJsonp||[]).push([[1241],{1635:function(_,e,v){"use strict";v.r(e);var t=v(13),o=Object(t.a)({},(function(){var _=this,e=_.$createElement,v=_._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一致性非锁定读和锁定读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一致性非锁定读和锁定读"}},[_._v("#")]),_._v(" 一致性非锁定读和锁定读")]),_._v(" "),v("h3",{attrs:{id:"一致性非锁定读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一致性非锁定读"}},[_._v("#")]),_._v(" 一致性非锁定读")]),_._v(" "),v("p",[_._v("对于 "),v("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-consistent-read.html",target:"_blank",rel:"noopener noreferrer"}},[v("strong",[_._v("一致性非锁定读（Consistent Nonlocking Reads）")]),_._v(" "),v("OutboundLink")],1),_._v("的实现，通常做法是加一个版本号或者时间戳字段，在更新数据的同时版本号 + 1 或者更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("InnoDB")]),_._v(" 存储引擎中，"),v("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("多版本控制 (multi versioning)"),v("OutboundLink")],1),_._v(" 就是对非锁定读的实现。如果读取的行正在执行 "),v("code",[_._v("DELETE")]),_._v(" 或 "),v("code",[_._v("UPDATE")]),_._v(" 操作，这时读取操作不会去等待行上锁的释放。相反地，"),v("code",[_._v("InnoDB")]),_._v(" 存储引擎会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它快照读 (snapshot read)")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("Repeatable Read")]),_._v(" 和 "),v("code",[_._v("Read Committed")]),_._v(" 两个隔离级别下，如果是执行普通的 "),v("code",[_._v("select")]),_._v(" 语句（不包括 "),v("code",[_._v("select ... lock in share mode")]),_._v(" ,"),v("code",[_._v("select ... for update")]),_._v("）则会使用 "),v("code",[_._v("一致性非锁定读（MVCC）")]),_._v("。并且在 "),v("code",[_._v("Repeatable Read")]),_._v(" 下 "),v("code",[_._v("MVCC")]),_._v(" 实现了可重复读和防止部分幻读")]),_._v(" "),v("h3",{attrs:{id:"锁定读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁定读"}},[_._v("#")]),_._v(" 锁定读")]),_._v(" "),v("p",[_._v("如果执行的是下列语句，就是 "),v("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-locking-reads.html",target:"_blank",rel:"noopener noreferrer"}},[v("strong",[_._v("锁定读（Locking Reads）")]),v("OutboundLink")],1)]),_._v(" "),v("ul",[v("li",[v("code",[_._v("select ... lock in share mode")])]),_._v(" "),v("li",[v("code",[_._v("select ... for update")])]),_._v(" "),v("li",[v("code",[_._v("insert")]),_._v("、"),v("code",[_._v("update")]),_._v("、"),v("code",[_._v("delete")]),_._v(" 操作")])]),_._v(" "),v("p",[_._v("在锁定读下，读取的是数据的最新版本，这种读也被称为 "),v("code",[_._v("当前读（current read）")]),_._v("。锁定读会对读取到的记录加锁：")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("select ... lock in share mode")]),_._v("：对记录加 "),v("code",[_._v("S")]),_._v(" 锁，其它事务也可以加"),v("code",[_._v("S")]),_._v("锁，如果加 "),v("code",[_._v("x")]),_._v(" 锁则会被阻塞")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("select ... for update")]),_._v("、"),v("code",[_._v("insert")]),_._v("、"),v("code",[_._v("update")]),_._v("、"),v("code",[_._v("delete")]),_._v("：对记录加 "),v("code",[_._v("X")]),_._v(" 锁，且其它事务不能加任何锁")])])]),_._v(" "),v("p",[_._v("在一致性非锁定读下，即使读取的记录已被其它事务加上 "),v("code",[_._v("X")]),_._v(" 锁，这时记录也是可以被读取的，即读取的快照数据。上面说了，在 "),v("code",[_._v("Repeatable Read")]),_._v(" 下 "),v("code",[_._v("MVCC")]),_._v(" 防止了部分幻读，这边的 “部分” 是指在 "),v("code",[_._v("一致性非锁定读")]),_._v(" 情况下，只能读取到第一次查询之前所插入的数据（根据 Read View 判断数据可见性，Read View 在第一次查询时生成）。但是！如果是 "),v("code",[_._v("当前读")]),_._v(" ，每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读。所以， "),v("strong",[v("code",[_._v("InnoDB")]),_._v(" 在实现"),v("code",[_._v("Repeatable Read")]),_._v(" 时，如果执行的是当前读，则会对读取的记录使用 "),v("code",[_._v("Next-key Lock")]),_._v(" ，来防止其它事务在间隙间插入数据")])]),_._v(" "),v("h2",{attrs:{id:"innodb-对-mvcc-的实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innodb-对-mvcc-的实现"}},[_._v("#")]),_._v(" InnoDB 对 MVCC 的实现")]),_._v(" "),v("p",[v("code",[_._v("MVCC")]),_._v(" 的实现依赖于："),v("strong",[_._v("隐藏字段、Read View、undo log")]),_._v("。在内部实现中，"),v("code",[_._v("InnoDB")]),_._v(" 通过数据行的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 和 "),v("code",[_._v("Read View")]),_._v(" 来判断数据的可见性，如不可见，则通过数据行的 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 "),v("code",[_._v("Read View")]),_._v(" 之前已经提交的修改和该事务本身做的修改")]),_._v(" "),v("h3",{attrs:{id:"隐藏字段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隐藏字段"}},[_._v("#")]),_._v(" 隐藏字段")]),_._v(" "),v("p",[_._v("在内部，"),v("code",[_._v("InnoDB")]),_._v(" 存储引擎为每行数据添加了三个 "),v("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("隐藏字段"),v("OutboundLink")],1),_._v("：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("DB_TRX_ID（6字节）")]),_._v("：表示最后一次插入或更新该行的事务 id。此外，"),v("code",[_._v("delete")]),_._v(" 操作在内部被视为更新，只不过会在记录头 "),v("code",[_._v("Record header")]),_._v(" 中的 "),v("code",[_._v("deleted_flag")]),_._v(" 字段将其标记为已删除")]),_._v(" "),v("li",[v("code",[_._v("DB_ROLL_PTR（7字节）")]),_._v(" 回滚指针，指向该行的 "),v("code",[_._v("undo log")]),_._v(" 。如果该行未被更新，则为空")]),_._v(" "),v("li",[v("code",[_._v("DB_ROW_ID（6字节）")]),_._v("：如果没有设置主键且该表没有唯一非空索引时，"),v("code",[_._v("InnoDB")]),_._v(" 会使用该 id 来生成聚簇索引")])]),_._v(" "),v("h3",{attrs:{id:"readview"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#readview"}},[_._v("#")]),_._v(" ReadView")]),_._v(" "),v("div",{staticClass:"language-c line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-c"}},[v("code",[_._v("class ReadView "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* ... */")]),_._v("\nprivate"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("trx_id_t")]),_._v(" m_low_limit_id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("      "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 大于等于这个 ID 的事务均不可见 */")]),_._v("\n\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("trx_id_t")]),_._v(" m_up_limit_id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("       "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 小于这个 ID 的事务均可见 */")]),_._v("\n\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("trx_id_t")]),_._v(" m_creator_trx_id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("    "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 创建该 Read View 的事务ID */")]),_._v("\n\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("trx_id_t")]),_._v(" m_low_limit_no"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("      "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */")]),_._v("\n\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ids_t")]),_._v(" m_ids"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("                  "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 创建 Read View 时的活跃事务列表 */")]),_._v("\n\n  m_closed"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("                     "),v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("/* 标记 Read View 是否 close */")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br"),v("span",{staticClass:"line-number"},[_._v("3")]),v("br"),v("span",{staticClass:"line-number"},[_._v("4")]),v("br"),v("span",{staticClass:"line-number"},[_._v("5")]),v("br"),v("span",{staticClass:"line-number"},[_._v("6")]),v("br"),v("span",{staticClass:"line-number"},[_._v("7")]),v("br"),v("span",{staticClass:"line-number"},[_._v("8")]),v("br"),v("span",{staticClass:"line-number"},[_._v("9")]),v("br"),v("span",{staticClass:"line-number"},[_._v("10")]),v("br"),v("span",{staticClass:"line-number"},[_._v("11")]),v("br"),v("span",{staticClass:"line-number"},[_._v("12")]),v("br"),v("span",{staticClass:"line-number"},[_._v("13")]),v("br"),v("span",{staticClass:"line-number"},[_._v("14")]),v("br"),v("span",{staticClass:"line-number"},[_._v("15")]),v("br")])]),v("p",[v("a",{attrs:{href:"https://github.com/facebook/mysql-8.0/blob/8.0/storage/innobase/include/read0types.h#L298",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("Read View")]),v("OutboundLink")],1),_._v(" 主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”")]),_._v(" "),v("p",[_._v("主要有以下字段：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("m_low_limit_id")]),_._v("：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见")]),_._v(" "),v("li",[v("code",[_._v("m_up_limit_id")]),_._v("：活跃事务列表 "),v("code",[_._v("m_ids")]),_._v(" 中最小的事务 ID，如果 "),v("code",[_._v("m_ids")]),_._v(" 为空，则 "),v("code",[_._v("m_up_limit_id")]),_._v(" 为 "),v("code",[_._v("m_low_limit_id")]),_._v("。小于这个 ID 的数据版本均可见")]),_._v(" "),v("li",[v("code",[_._v("m_ids")]),_._v("："),v("code",[_._v("Read View")]),_._v(" 创建时其他未提交的活跃事务 ID 列表。创建 "),v("code",[_._v("Read View")]),_._v("时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。"),v("code",[_._v("m_ids")]),_._v(" 不包括当前事务自己和已提交的事务（正在内存中）")]),_._v(" "),v("li",[v("code",[_._v("m_creator_trx_id")]),_._v("：创建该 "),v("code",[_._v("Read View")]),_._v(" 的事务 ID")])]),_._v(" "),v("p",[v("strong",[_._v("事务可见性示意图")]),_._v("（"),v("a",{attrs:{href:"https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/#MVCC-1",target:"_blank",rel:"noopener noreferrer"}},[_._v("图源"),v("OutboundLink")],1),_._v("）：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/trans_visible.jpg",alt:"trans_visible"}})]),_._v(" "),v("h3",{attrs:{id:"undo-log"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[_._v("#")]),_._v(" undo-log")]),_._v(" "),v("p",[v("code",[_._v("undo log")]),_._v(" 主要有两个作用：")]),_._v(" "),v("ul",[v("li",[_._v("当事务回滚时用于将数据恢复到修改前的样子")]),_._v(" "),v("li",[_._v("另一个作用是 "),v("code",[_._v("MVCC")]),_._v(" ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 "),v("code",[_._v("undo log")]),_._v(" 读取之前的版本数据，以此实现非锁定读")])]),_._v(" "),v("p",[v("strong",[_._v("在 "),v("code",[_._v("InnoDB")]),_._v(" 存储引擎中 "),v("code",[_._v("undo log")]),_._v(" 分为两种： "),v("code",[_._v("insert undo log")]),_._v(" 和 "),v("code",[_._v("update undo log")]),_._v("：")])]),_._v(" "),v("ol",[v("li",[v("strong",[v("code",[_._v("insert undo log")])]),_._v(" ：指在 "),v("code",[_._v("insert")]),_._v(" 操作中产生的 "),v("code",[_._v("undo log")]),_._v("。因为 "),v("code",[_._v("insert")]),_._v(" 操作的记录只对事务本身可见，对其他事务不可见，故该 "),v("code",[_._v("undo log")]),_._v(" 可以在事务提交后直接删除。不需要进行 "),v("code",[_._v("purge")]),_._v(" 操作")])]),_._v(" "),v("p",[v("strong",[v("code",[_._v("insert")]),_._v(" 时的数据初始状态：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/317e91e1-1ee1-42ad-9412-9098d5c6a9ad.png",alt:""}})]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("strong",[v("code",[_._v("update undo log")])]),_._v(" ："),v("code",[_._v("update")]),_._v(" 或 "),v("code",[_._v("delete")]),_._v(" 操作中产生的 "),v("code",[_._v("undo log")]),_._v("。该 "),v("code",[_._v("undo log")]),_._v("可能需要提供 "),v("code",[_._v("MVCC")]),_._v(" 机制，因此不能在事务提交时就进行删除。提交时放入 "),v("code",[_._v("undo log")]),_._v(" 链表，等待 "),v("code",[_._v("purge线程")]),_._v(" 进行最后的删除")])]),_._v(" "),v("p",[v("strong",[_._v("数据第一次被修改时：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/c52ff79f-10e6-46cb-b5d4-3c9cbcc1934a.png",alt:""}})]),_._v(" "),v("p",[v("strong",[_._v("数据第二次被修改时：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/6a276e7a-b0da-4c7b-bdf7-c0c7b7b3b31c.png",alt:""}})]),_._v(" "),v("p",[_._v("不同事务或者相同事务的对同一记录行的修改，会使该记录行的 "),v("code",[_._v("undo log")]),_._v(" 成为一条链表，链首就是最新的记录，链尾就是最早的旧记录。")]),_._v(" "),v("h3",{attrs:{id:"数据可见性算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据可见性算法"}},[_._v("#")]),_._v(" 数据可见性算法")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("InnoDB")]),_._v(" 存储引擎中，创建一个新事务后，执行每个 "),v("code",[_._v("select")]),_._v(" 语句前，都会创建一个快照（Read View），"),v("strong",[_._v("快照中保存了当前数据库系统中正处于活跃（没有 commit）的事务的 ID 号")]),_._v("。其实简单的说保存的是系统中当前不应该被本事务看到的其他事务 ID 列表（即 m_ids）。当用户在这个事务中要读取某个记录行的时候，"),v("code",[_._v("InnoDB")]),_._v(" 会将该记录行的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 与 "),v("code",[_._v("Read View")]),_._v(" 中的一些变量及当前事务 ID 进行比较，判断是否满足可见性条件")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/facebook/mysql-8.0/blob/8.0/storage/innobase/include/read0types.h#L161",target:"_blank",rel:"noopener noreferrer"}},[_._v("具体的比较算法"),v("OutboundLink")],1),_._v("如下："),v("a",{attrs:{href:"https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/#MVCC-1",target:"_blank",rel:"noopener noreferrer"}},[_._v("图源"),v("OutboundLink")],1)]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/8778836b-34a8-480b-b8c7-654fe207a8c2.png",alt:""}})]),_._v(" "),v("ol",[v("li",[v("p",[_._v("如果记录 DB_TRX_ID < m_up_limit_id，那么表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照之前就提交了，所以该记录行的值对当前事务是可见的")])]),_._v(" "),v("li",[v("p",[_._v("如果 DB_TRX_ID >= m_low_limit_id，那么表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照之后才修改该行，所以该记录行的值对当前事务不可见。跳到步骤 5")])]),_._v(" "),v("li",[v("p",[_._v("m_ids 为空，则表明在当前事务创建快照之前，修改该行的事务就已经提交了，所以该记录行的值对当前事务是可见的")])]),_._v(" "),v("li",[v("p",[_._v("如果 m_up_limit_id <= DB_TRX_ID < m_low_limit_id，表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照的时候可能处于“活动状态”或者“已提交状态”；所以就要对活跃事务列表 m_ids 进行查找（源码中是用的二分查找，因为是有序的）")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("如果在活跃事务列表 m_ids 中能找到 DB_TRX_ID，表明：① 在当前事务创建快照前，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了，但没有提交；或者 ② 在当前事务创建快照后，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了。这些情况下，这个记录行的值对当前事务都是不可见的。跳到步骤 5")])]),_._v(" "),v("li",[v("p",[_._v("在活跃事务列表中找不到，则表明“id 为 trx_id 的事务”在修改“该记录行的值”后，在“当前事务”创建快照前就已经提交了，所以记录行对当前事务可见")])])])]),_._v(" "),v("li",[v("p",[_._v("在该记录行的 DB_ROLL_PTR 指针所指向的 "),v("code",[_._v("undo log")]),_._v(" 取出快照记录，用快照记录的 DB_TRX_ID 跳到步骤 1 重新开始判断，直到找到满足的快照版本或返回空")])])]),_._v(" "),v("h2",{attrs:{id:"rc-和-rr-隔离级别下-mvcc-的差异"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rc-和-rr-隔离级别下-mvcc-的差异"}},[_._v("#")]),_._v(" RC 和 RR 隔离级别下 MVCC 的差异")]),_._v(" "),v("p",[_._v("在事务隔离级别 "),v("code",[_._v("RC")]),_._v(" 和 "),v("code",[_._v("RR")]),_._v(" （InnoDB 存储引擎的默认事务隔离级别）下，"),v("code",[_._v("InnoDB")]),_._v(" 存储引擎使用 "),v("code",[_._v("MVCC")]),_._v("（非锁定一致性读），但它们生成 "),v("code",[_._v("Read View")]),_._v(" 的时机却不同")]),_._v(" "),v("ul",[v("li",[_._v("在 RC 隔离级别下的 "),v("strong",[v("code",[_._v("每次select")])]),_._v(" 查询前都生成一个"),v("code",[_._v("Read View")]),_._v(" (m_ids 列表)")]),_._v(" "),v("li",[_._v("在 RR 隔离级别下只在事务开始后 "),v("strong",[v("code",[_._v("第一次select")])]),_._v(" 数据前生成一个"),v("code",[_._v("Read View")]),_._v("（m_ids 列表）")])]),_._v(" "),v("h2",{attrs:{id:"mvcc-解决不可重复读问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-解决不可重复读问题"}},[_._v("#")]),_._v(" MVCC 解决不可重复读问题")]),_._v(" "),v("p",[_._v("虽然 RC 和 RR 都通过 "),v("code",[_._v("MVCC")]),_._v(" 来读取快照数据，但由于 "),v("strong",[_._v("生成 Read View 时机不同")]),_._v("，从而在 RR 级别下实现可重复读")]),_._v(" "),v("p",[_._v("举个例子：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/6fb2b9a1-5f14-4dec-a797-e4cf388ed413.png",alt:""}})]),_._v(" "),v("h3",{attrs:{id:"在-rc-下-readview-生成情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在-rc-下-readview-生成情况"}},[_._v("#")]),_._v(" 在 RC 下 ReadView 生成情况")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[v("code",[_._v("假设时间线来到 T4 ，那么此时数据行 id = 1 的版本链为")]),_._v("：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/a3fd1ec6-8f37-42fa-b090-7446d488fd04.png",alt:""}})])])]),_._v(" "),v("p",[_._v("由于 RC 级别下每次查询都会生成"),v("code",[_._v("Read View")]),_._v(" ，并且事务 101、102 并未提交，此时 "),v("code",[_._v("103")]),_._v(" 事务生成的 "),v("code",[_._v("Read View")]),_._v(" 中活跃的事务 "),v("strong",[v("code",[_._v("m_ids")]),_._v(" 为：[101,102]")]),_._v(" ，"),v("code",[_._v("m_low_limit_id")]),_._v("为：104，"),v("code",[_._v("m_up_limit_id")]),_._v("为：101，"),v("code",[_._v("m_creator_trx_id")]),_._v(" 为：103")]),_._v(" "),v("ul",[v("li",[_._v("此时最新记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 101，m_up_limit_id <= 101 < m_low_limit_id，所以要在 "),v("code",[_._v("m_ids")]),_._v(" 列表中查找，发现 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 存在列表中，那么这个记录不可见")]),_._v(" "),v("li",[_._v("根据 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的上一版本记录，上一条记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 还是 101，不可见")]),_._v(" "),v("li",[_._v("继续找上一条 "),v("code",[_._v("DB_TRX_ID")]),_._v("为 1，满足 1 < m_up_limit_id，可见，所以事务 103 查询到数据为 "),v("code",[_._v("name = 菜花")])])]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[v("code",[_._v("时间线来到 T6 ，数据的版本链为")]),_._v("：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/528559e9-dae8-4d14-b78d-a5b657c88391.png",alt:"markdown"}})])])]),_._v(" "),v("p",[_._v("因为在 RC 级别下，重新生成 "),v("code",[_._v("Read View")]),_._v("，这时事务 101 已经提交，102 并未提交，所以此时 "),v("code",[_._v("Read View")]),_._v(" 中活跃的事务 "),v("strong",[v("code",[_._v("m_ids")]),_._v("：[102]")]),_._v(" ，"),v("code",[_._v("m_low_limit_id")]),_._v("为：104，"),v("code",[_._v("m_up_limit_id")]),_._v("为：102，"),v("code",[_._v("m_creator_trx_id")]),_._v("为：103")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("此时最新记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 102，m_up_limit_id <= 102 < m_low_limit_id，所以要在 "),v("code",[_._v("m_ids")]),_._v(" 列表中查找，发现 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 存在列表中，那么这个记录不可见")])]),_._v(" "),v("li",[v("p",[_._v("根据 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的上一版本记录，上一条记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 101，满足 101 < m_up_limit_id，记录可见，所以在 "),v("code",[_._v("T6")]),_._v(" 时间点查询到数据为 "),v("code",[_._v("name = 李四")]),_._v("，与时间 T4 查询到的结果不一致，不可重复读！")])])]),_._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("strong",[v("code",[_._v("时间线来到 T9 ，数据的版本链为")]),_._v("：")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/6f82703c-36a1-4458-90fe-d7f4edbac71a.png",alt:"markdown"}})]),_._v(" "),v("p",[_._v("重新生成 "),v("code",[_._v("Read View")]),_._v("， 这时事务 101 和 102 都已经提交，所以 "),v("strong",[_._v("m_ids")]),_._v(" 为空，则 m_up_limit_id = m_low_limit_id = 104，最新版本事务 ID 为 102，满足 102 < m_low_limit_id，可见，查询结果为 "),v("code",[_._v("name = 赵六")])]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("总结：")]),_._v(" "),v("strong",[_._v("在 RC 隔离级别下，事务在每次查询开始时都会生成并设置新的 Read View，所以导致不可重复读")])])]),_._v(" "),v("h3",{attrs:{id:"在-rr-下-readview-生成情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在-rr-下-readview-生成情况"}},[_._v("#")]),_._v(" 在 RR 下 ReadView 生成情况")]),_._v(" "),v("p",[v("strong",[_._v("在可重复读级别下，只会在事务开始后第一次读取数据时生成一个 Read View（m_ids 列表）")])]),_._v(" "),v("ol",[v("li",[v("strong",[v("code",[_._v("在 T4 情况下的版本链为")]),_._v("：")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/0e906b95-c916-4f30-beda-9cb3e49746bf.png",alt:"markdown"}})]),_._v(" "),v("p",[_._v("在当前执行 "),v("code",[_._v("select")]),_._v(" 语句时生成一个 "),v("code",[_._v("Read View")]),_._v("，此时 "),v("strong",[v("code",[_._v("m_ids")]),_._v("：[101,102]")]),_._v(" ，"),v("code",[_._v("m_low_limit_id")]),_._v("为：104，"),v("code",[_._v("m_up_limit_id")]),_._v("为：101，"),v("code",[_._v("m_creator_trx_id")]),_._v(" 为：103")]),_._v(" "),v("p",[_._v("此时和 RC 级别下一样：")]),_._v(" "),v("ul",[v("li",[_._v("最新记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 101，m_up_limit_id <= 101 < m_low_limit_id，所以要在 "),v("code",[_._v("m_ids")]),_._v(" 列表中查找，发现 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 存在列表中，那么这个记录不可见")]),_._v(" "),v("li",[_._v("根据 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的上一版本记录，上一条记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 还是 101，不可见")]),_._v(" "),v("li",[_._v("继续找上一条 "),v("code",[_._v("DB_TRX_ID")]),_._v("为 1，满足 1 < m_up_limit_id，可见，所以事务 103 查询到数据为 "),v("code",[_._v("name = 菜花")])])]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[v("code",[_._v("时间点 T6 情况下")]),_._v("：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/79ed6142-7664-4e0b-9023-cf546586aa39.png",alt:"markdown"}})]),_._v(" "),v("p",[_._v("在 RR 级别下只会生成一次"),v("code",[_._v("Read View")]),_._v("，所以此时依然沿用 "),v("strong",[v("code",[_._v("m_ids")]),_._v(" ：[101,102]")]),_._v(" ，"),v("code",[_._v("m_low_limit_id")]),_._v("为：104，"),v("code",[_._v("m_up_limit_id")]),_._v("为：101，"),v("code",[_._v("m_creator_trx_id")]),_._v(" 为：103")])])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("最新记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 102，m_up_limit_id <= 102 < m_low_limit_id，所以要在 "),v("code",[_._v("m_ids")]),_._v(" 列表中查找，发现 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 存在列表中，那么这个记录不可见")])]),_._v(" "),v("li",[v("p",[_._v("根据 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的上一版本记录，上一条记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 为 101，不可见")])]),_._v(" "),v("li",[v("p",[_._v("继续根据 "),v("code",[_._v("DB_ROLL_PTR")]),_._v(" 找到 "),v("code",[_._v("undo log")]),_._v(" 中的上一版本记录，上一条记录的 "),v("code",[_._v("DB_TRX_ID")]),_._v(" 还是 101，不可见")])]),_._v(" "),v("li",[v("p",[_._v("继续找上一条 "),v("code",[_._v("DB_TRX_ID")]),_._v("为 1，满足 1 < m_up_limit_id，可见，所以事务 103 查询到数据为 "),v("code",[_._v("name = 菜花")])])])]),_._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("strong",[_._v("时间点 T9 情况下：")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://ddmcc-1255635056.file.myqcloud.com/cbbedbc5-0e3c-4711-aafd-7f3d68a4ed4e.png",alt:"markdown"}})]),_._v(" "),v("p",[_._v("此时情况跟 T6 完全一样，由于已经生成了 "),v("code",[_._v("Read View")]),_._v("，此时依然沿用 "),v("strong",[v("code",[_._v("m_ids")]),_._v(" ：[101,102]")]),_._v(" ，所以查询结果依然是 "),v("code",[_._v("name = 菜花")])]),_._v(" "),v("h2",{attrs:{id:"mvcc➕next-key-lock-防止幻读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc➕next-key-lock-防止幻读"}},[_._v("#")]),_._v(" MVCC➕Next-key-Lock 防止幻读")]),_._v(" "),v("p",[v("code",[_._v("InnoDB")]),_._v("存储引擎在 RR 级别下通过 "),v("code",[_._v("MVCC")]),_._v("和 "),v("code",[_._v("Next-key Lock")]),_._v(" 来解决幻读问题：")]),_._v(" "),v("p",[v("strong",[_._v("1、执行普通 "),v("code",[_._v("select")]),_._v("，此时会以 "),v("code",[_._v("MVCC")]),_._v(" 快照读的方式读取数据")])]),_._v(" "),v("p",[_._v("在快照读的情况下，RR 隔离级别只会在事务开启后的第一次查询生成 "),v("code",[_._v("Read View")]),_._v(" ，并使用至事务提交。所以在生成 "),v("code",[_._v("Read View")]),_._v(" 之后其它事务所做的更新、插入记录版本对当前事务并不可见，实现了可重复读和防止快照读下的 “幻读”")]),_._v(" "),v("p",[v("strong",[_._v("2、执行 select...for update/lock in share mode、insert、update、delete 等当前读")])]),_._v(" "),v("p",[_._v("在当前读下，读取的都是最新的数据，如果其它事务有插入新的记录，并且刚好在当前事务查询范围内，就会产生幻读！"),v("code",[_._v("InnoDB")]),_._v(" 使用 "),v("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks",target:"_blank",rel:"noopener noreferrer"}},[_._v("Next-key Lock"),v("OutboundLink")],1),_._v(" 来防止这种情况。当执行当前读时，会锁定读取到的记录的同时，锁定它们的间隙，防止其它事务在查询范围内插入数据。只要我不让你插入，就不会发生幻读")]),_._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[_._v("#")]),_._v(" 参考")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("《MySQL 技术内幕 InnoDB 存储引擎第 2 版》")])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("Innodb 中的事务隔离级别和锁的关系"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/qq_35190492/article/details/109044141",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL 事务与 MVCC 如何实现的隔离级别"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/",target:"_blank",rel:"noopener noreferrer"}},[_._v("InnoDB 事务分析-MVCC"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=o.exports}}]);