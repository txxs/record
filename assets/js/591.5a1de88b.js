(window.webpackJsonp=window.webpackJsonp||[]).push([[591],{985:function(n,s,a){"use strict";a.r(s);var e=a(13),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[n._v("简介")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#aqs-%E7%BB%93%E6%9E%84"}},[n._v("AQS 结构")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E7%BA%BF%E7%A8%8B%E6%8A%A2%E9%94%81"}},[n._v("线程抢锁")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E8%A7%A3%E9%94%81%E6%93%8D%E4%BD%9C"}},[n._v("解锁操作")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[n._v("总结")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E7%A4%BA%E4%BE%8B%E5%9B%BE%E8%A7%A3%E6%9E%90"}},[n._v("示例图解析")])])]),n._v(" "),a("p",[n._v("本文转自：https://www.javadoop.com/post/AbstractQueuedSynchronizer#toc4")]),n._v(" "),a("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),a("blockquote",[a("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),a("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),a("p",[n._v("文章同步发于我的个人博客：")]),n._v(" "),a("blockquote",[a("p",[n._v("www.how2playlife.com")])]),n._v(" "),a("p",[n._v("本文是微信公众号【Java技术江湖】的《Java并发指南》其中一篇，本文大部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),n._v(" "),a("p",[n._v("该系列博文会告诉你如何全面深入地学习Java并发技术，从Java多线程基础，再到并发编程的基础知识，从Java并发包的入门和实战，再到JUC的源码剖析，一步步地学习Java并发编程，并上手进行实战，以便让你更完整地了解整个Java并发编程知识体系，形成自己的知识框架。")]),n._v(" "),a("p",[n._v("为了更好地总结和检验你的学习成果，本系列文章也会提供一些对应的面试题以及参考答案。")]),n._v(" "),a("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。\n")]),n._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),a("p",[n._v("在分析 Java 并发包 java.util.concurrent 源码的时候，少不了需要了解 AbstractQueuedSynchronizer（以下简写AQS）这个抽象类，因为它是 Java 并发包的基础工具类，是实现 ReentrantLock、CountDownLatch、Semaphore、FutureTask 等类的基础。")]),n._v(" "),a("p",[n._v("Google 一下 AbstractQueuedSynchronizer，我们可以找到很多关于 AQS 的介绍，但是很多都没有介绍清楚，因为大部分文章没有把其中的一些关键的细节说清楚。")]),n._v(" "),a("p",[n._v("本文将从 ReentrantLock 的公平锁源码出发，分析下 AbstractQueuedSynchronizer 这个类是怎么工作的，希望能给大家提供一些简单的帮助。")]),n._v(" "),a("p",[n._v("申明以下几点：")]),n._v(" "),a("ol",[a("li",[n._v("本文有点长，但还是挺简单，主要面向读者对象为并发编程的初学者，或者想要阅读 Java 并发包源码的开发者。对于新手来说，可能需要花好几个小时才能完全看懂，但是这时间肯定是值得的。")]),n._v(" "),a("li",[n._v("源码环境 JDK1.7（1.8没啥变化），看到不懂或有疑惑的部分，最好能自己打开源码看看。Doug Lea 大神的代码写得真心不错。")]),n._v(" "),a("li",[n._v("本文不分析共享模式，这样可以给读者减少很多负担，"),a("a",{attrs:{href:"https://www.javadoop.com/post/AbstractQueuedSynchronizer-3",target:"_blank",rel:"noopener noreferrer"}},[n._v("第三篇文章"),a("OutboundLink")],1),n._v("对共享模式进行了分析。而且也不分析 condition 部分，所以应该说很容易就可以看懂了。")]),n._v(" "),a("li",[n._v("本文大量使用我们平时用得最多的 ReentrantLock 的概念，本质上来说是不正确的，读者应该清楚，AQS 不仅仅用来实现可重入锁，只是希望读者可以用锁来联想 AQS 的使用场景，降低阅读压力。")]),n._v(" "),a("li",[n._v("ReentrantLock 的公平锁和非公平锁只有一点点区别，"),a("a",{attrs:{href:"https://www.javadoop.com/post/AbstractQueuedSynchronizer-2",target:"_blank",rel:"noopener noreferrer"}},[n._v("第二篇文章"),a("OutboundLink")],1),n._v("做了介绍。")]),n._v(" "),a("li",[n._v("评论区有读者反馈本文直接用代码说不友好，应该多配点流程图，这篇文章确实有这个问题。但是作为过来人，我想告诉大家，对于 AQS 来说，形式真的不重要，重要的是把细节说清楚。")])]),n._v(" "),a("h2",{attrs:{id:"aqs-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs-结构"}},[n._v("#")]),n._v(" AQS 结构")]),n._v(" "),a("p",[n._v("先来看看 AQS 有哪些属性，搞清楚这些基本就知道 AQS 是什么套路了，毕竟可以猜嘛！")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的\nprivate transient volatile Node head;\n\n// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表\nprivate transient volatile Node tail;\n\n// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁\n// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1\nprivate volatile int state;\n\n// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入\n// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁\n// if (currentThread == getExclusiveOwnerThread()) {state++}\nprivate transient Thread exclusiveOwnerThread; //继承自AbstractOwnableSynchronizer\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("怎么样，看样子应该是很简单的吧，毕竟也就四个属性啊。")]),n._v(" "),a("p",[n._v("AbstractQueuedSynchronizer 的等待队列示意如下所示，注意了，之后分析过程中所说的 queue，也就是阻塞队列"),a("strong",[n._v("不包含 head，不包含 head，不包含 head")]),n._v("。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/AbstractQueuedSynchronizer/aqs-0.png",alt:"aqs-0"}})]),n._v(" "),a("p",[n._v("等待队列中每个线程被包装成一个 Node 实例，数据结构是链表，一起看看源码吧：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("static final class Node {\n    // 标识节点当前在共享模式下\n    static final Node SHARED = new Node();\n    // 标识节点当前在独占模式下\n    static final Node EXCLUSIVE = null;\n\n    // ======== 下面的几个int常量是给waitStatus用的 ===========\n    /** waitStatus value to indicate thread has cancelled */\n    // 代码此线程取消了争抢这个锁\n    static final int CANCELLED =  1;\n    /** waitStatus value to indicate successor's thread needs unparking */\n    // 官方的描述是，其表示当前node的后继节点对应的线程需要被唤醒\n    static final int SIGNAL    = -1;\n    /** waitStatus value to indicate thread is waiting on condition */\n    // 本文不分析condition，所以略过吧，下一篇文章会介绍这个\n    static final int CONDITION = -2;\n    /**\n     * waitStatus value to indicate the next acquireShared should\n     * unconditionally propagate\n     */\n    // 同样的不分析，略过吧\n    static final int PROPAGATE = -3;\n    // =====================================================\n\n    // 取值为上面的1、-1、-2、-3，或者0(以后会讲到)\n    // 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，\n    //    ps: 半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的。。。\n    volatile int waitStatus;\n    // 前驱节点的引用\n    volatile Node prev;\n    // 后继节点的引用\n    volatile Node next;\n    // 这个就是线程本尊\n    volatile Thread thread;\n\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br")])]),a("p",[n._v("Node 的数据结构其实也挺简单的，就是 thread + waitStatus + pre + next 四个属性而已，大家先要有这个概念在心里。")]),n._v(" "),a("p",[n._v("上面的是基础知识，后面会多次用到，心里要时刻记着它们，心里想着这个结构图就可以了。下面，我们开始说 ReentrantLock 的公平锁。再次强调，我说的阻塞队列不包含 head 节点。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/AbstractQueuedSynchronizer/aqs-0.png",alt:"aqs-0"}})]),n._v(" "),a("p",[n._v("首先，我们先看下 ReentrantLock 的使用方式。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 我用个web开发中的service概念吧\npublic class OrderService {\n    // 使用static，这样每个线程拿到的是同一把锁，当然，spring mvc中service默认就是单例，别纠结这个\n    private static ReentrantLock reentrantLock = new ReentrantLock(true);\n\n    public void createOrder() {\n        // 比如我们同一时间，只允许一个线程创建订单\n        reentrantLock.lock();\n        // 通常，lock 之后紧跟着 try 语句\n        try {\n            // 这块代码同一时间只能有一个线程进来(获取到锁的线程)，\n            // 其他的线程在lock()方法上阻塞，等待获取到锁，再进来\n            // 执行代码...\n            // 执行代码...\n            // 执行代码...\n        } finally {\n            // 释放锁\n            reentrantLock.unlock();\n        }\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("p",[n._v("ReentrantLock 在内部用了内部类 Sync 来管理锁，所以真正的获取锁和释放锁是由 Sync 的实现类来控制的。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("abstract static class Sync extends AbstractQueuedSynchronizer {\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("Sync 有两个实现，分别为 NonfairSync（非公平锁）和 FairSync（公平锁），我们看 FairSync 部分。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h2",{attrs:{id:"线程抢锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程抢锁"}},[n._v("#")]),n._v(" 线程抢锁")]),n._v(" "),a("p",[n._v("很多人肯定开始嫌弃上面废话太多了，下面跟着代码走，我就不废话了。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("static final class FairSync extends Sync {\n    private static final long serialVersionUID = -3000897897090466540L;\n      // 争锁\n    final void lock() {\n        acquire(1);\n    }\n      // 来自父类AQS，我直接贴过来这边，下面分析的时候同样会这样做，不会给读者带来阅读压力\n    // 我们看到，这个方法，如果tryAcquire(arg) 返回true, 也就结束了。\n    // 否则，acquireQueued方法会将线程压到队列中\n    public final void acquire(int arg) { // 此时 arg == 1\n        // 首先调用tryAcquire(1)一下，名字上就知道，这个只是试一试\n        // 因为有可能直接就成功了呢，也就不需要进队列排队了，\n        // 对于公平锁的语义就是：本来就没人持有锁，根本没必要进队列等待(又是挂起，又是等待被唤醒的)\n        if (!tryAcquire(arg) &&\n            // tryAcquire(arg)没有成功，这个时候需要把当前线程挂起，放到阻塞队列中。\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) {\n              selfInterrupt();\n        }\n    }\n\n    /**\n     * Fair version of tryAcquire.  Don't grant access unless\n     * recursive call or no waiters or is first.\n     */\n    // 尝试直接获取锁，返回值是boolean，代表是否获取到锁\n    // 返回true：1.没有线程在等待锁；2.重入锁，线程本来就持有锁，也就可以理所当然可以直接获取\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        // state == 0 此时此刻没有线程持有锁\n        if (c == 0) {\n            // 虽然此时此刻锁是可以用的，但是这是公平锁，既然是公平，就得讲究先来后到，\n            // 看看有没有别人在队列中等了半天了\n            if (!hasQueuedPredecessors() &&\n                // 如果没有线程在等待，那就用CAS尝试一下，成功了就获取到锁了，\n                // 不成功的话，只能说明一个问题，就在刚刚几乎同一时刻有个线程抢先了 =_=\n                // 因为刚刚还没人的，我判断过了\n                compareAndSetState(0, acquires)) {\n\n                // 到这里就是获取到锁了，标记一下，告诉大家，现在是我占用了锁\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }\n          // 会进入这个else if分支，说明是重入了，需要操作：state=state+1\n        // 这里不存在并发问题\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        // 如果到这里，说明前面的if和else if都没有返回true，说明没有获取到锁\n        // 回到上面一个外层调用方法继续看:\n        // if (!tryAcquire(arg) \n        //        && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) \n        //     selfInterrupt();\n        return false;\n    }\n\n    // 假设tryAcquire(arg) 返回false，那么代码将执行：\n      //        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，\n    // 这个方法，首先需要执行：addWaiter(Node.EXCLUSIVE)\n\n    /**\n     * Creates and enqueues node for current thread and given mode.\n     *\n     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared\n     * @return the new node\n     */\n    // 此方法的作用是把线程包装成node，同时进入到队列中\n    // 参数mode此时是Node.EXCLUSIVE，代表独占模式\n    private Node addWaiter(Node mode) {\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        // 以下几行代码想把当前node加到链表的最后面去，也就是进到阻塞队列的最后\n        Node pred = tail;\n\n        // tail!=null => 队列不为空(tail==head的时候，其实队列是空的，不过不管这个吧)\n        if (pred != null) { \n            // 将当前的队尾节点，设置为自己的前驱 \n            node.prev = pred; \n            // 用CAS把自己设置为队尾, 如果成功后，tail == node 了，这个节点成为阻塞队列新的尾巴\n            if (compareAndSetTail(pred, node)) { \n                // 进到这里说明设置成功，当前node==tail, 将自己与之前的队尾相连，\n                // 上面已经有 node.prev = pred，加上下面这句，也就实现了和之前的尾节点双向连接了\n                pred.next = node;\n                // 线程入队了，可以返回了\n                return node;\n            }\n        }\n        // 仔细看看上面的代码，如果会到这里，\n        // 说明 pred==null(队列是空的) 或者 CAS失败(有线程在竞争入队)\n        // 读者一定要跟上思路，如果没有跟上，建议先不要往下读了，往回仔细看，否则会浪费时间的\n        enq(node);\n        return node;\n    }\n\n    /**\n     * Inserts node into queue, initializing if necessary. See picture above.\n     * @param node the node to insert\n     * @return node's predecessor\n     */\n    // 采用自旋的方式入队\n    // 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，\n    // 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的\n    private Node enq(final Node node) {\n        for (;;) {\n            Node t = tail;\n            // 之前说过，队列为空也会进来这里\n            if (t == null) { // Must initialize\n                // 初始化head节点\n                // 细心的读者会知道原来 head 和 tail 初始化的时候都是 null 的\n                // 还是一步CAS，你懂的，现在可能是很多线程同时进来呢\n                if (compareAndSetHead(new Node()))\n                    // 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了\n\n                    // 这个时候有了head，但是tail还是null，设置一下，\n                    // 把tail指向head，放心，马上就有线程要来了，到时候tail就要被抢了\n                    // 注意：这里只是设置了tail=head，这里可没return哦，没有return，没有return\n                    // 所以，设置完了以后，继续for循环，下次就到下面的else分支了\n                    tail = head;\n            } else {\n                // 下面几行，和上一个方法 addWaiter 是一样的，\n                // 只是这个套在无限循环里，反正就是将当前线程排到队尾，有线程竞争的话排不上重复排\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n    }\n\n    // 现在，又回到这段代码了\n    // if (!tryAcquire(arg) \n    //        && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) \n    //     selfInterrupt();\n\n    // 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列\n    // 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，\n    // 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false\n    // 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                // p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head\n                // 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列\n                // 所以当前节点可以去试抢一下锁\n                // 这里我们说一下，为什么可以去试试：\n                // 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，\n                // enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程\n                // 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，\n                // tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                // 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，\n                // 要么就是tryAcquire(arg)没有抢赢别人，继续往下看\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            // 什么时候 failed 会为 true???\n            // tryAcquire() 方法抛异常的情况\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * Checks and updates status for a node that failed to acquire.\n     * Returns true if thread should block. This is the main signal\n     * control in all acquire loops.  Requires that pred == node.prev\n     *\n     * @param pred node's predecessor holding status\n     * @param node the node\n     * @return {@code true} if thread should block\n     */\n    // 刚刚说过，会到这里就是没有抢到锁呗，这个方法说的是：\"当前线程没有抢到锁，是否需要挂起当前线程？\"\n    // 第一个参数是前驱节点，第二个参数才是代表当前线程的节点\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        // 前驱节点的 waitStatus == -1 ，说明前驱节点状态正常，当前线程需要挂起，直接可以返回true\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n\n        // 前驱节点 waitStatus大于0 ，之前说过，大于0 说明前驱节点取消了排队。\n        // 这里需要知道这点：进入阻塞队列排队的线程会被挂起，而唤醒的操作是由前驱节点完成的。\n        // 所以下面这块代码说的是将当前节点的prev指向waitStatus<=0的节点，\n        // 简单说，就是为了找个好爹，因为你还得依赖它来唤醒呢，如果前驱节点取消了排队，\n        // 找前驱节点的前驱节点做爹，往前遍历总能找到一个好爹的\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            // 仔细想想，如果进入到这个分支意味着什么\n            // 前驱节点的waitStatus不等于-1和1，那也就是只可能是0，-2，-3\n            // 在我们前面的源码中，都没有看到有设置waitStatus的，所以每个新的node入队时，waitStatu都是0\n            // 正常情况下，前驱节点是之前的 tail，那么它的 waitStatus 应该是 0\n            // 用CAS将前驱节点的waitStatus设置为Node.SIGNAL(也就是-1)\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        // 这个方法返回 false，那么会再走一次 for 循序，\n        //     然后再次进来此方法，此时会从第一个分支返回 true\n        return false;\n    }\n\n    // private static boolean shouldParkAfterFailedAcquire(Node pred, Node node)\n    // 这个方法结束根据返回值我们简单分析下：\n    // 如果返回true, 说明前驱节点的waitStatus==-1，是正常情况，那么当前线程需要被挂起，等待以后被唤醒\n    //        我们也说过，以后是被前驱节点唤醒，就等着前驱节点拿到锁，然后释放锁的时候叫你好了\n    // 如果返回false, 说明当前不需要被挂起，为什么呢？往后看\n\n    // 跳回到前面是这个方法\n    // if (shouldParkAfterFailedAcquire(p, node) &&\n    //                parkAndCheckInterrupt())\n    //                interrupted = true;\n\n    // 1\\. 如果shouldParkAfterFailedAcquire(p, node)返回true，\n    // 那么需要执行parkAndCheckInterrupt():\n\n    // 这个方法很简单，因为前面返回true，所以需要挂起线程，这个方法就是负责挂起线程的\n    // 这里用了LockSupport.park(this)来挂起线程，然后就停在这里了，等待被唤醒=======\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n\n    // 2\\. 接下来说说如果shouldParkAfterFailedAcquire(p, node)返回false的情况\n\n   // 仔细看shouldParkAfterFailedAcquire(p, node)，我们可以发现，其实第一次进来的时候，一般都不会返回true的，原因很简单，前驱节点的waitStatus=-1是依赖于后继节点设置的。也就是说，我都还没给前驱设置-1呢，怎么可能是true呢，但是要看到，这个方法是套在循环里的，所以第二次进来的时候状态就是-1了。\n\n    // 解释下为什么shouldParkAfterFailedAcquire(p, node)返回false的时候不直接挂起线程：\n    // => 是为了应对在经过这个方法后，node已经是head的直接后继节点了。剩下的读者自己想想吧。\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br"),a("span",{staticClass:"line-number"},[n._v("125")]),a("br"),a("span",{staticClass:"line-number"},[n._v("126")]),a("br"),a("span",{staticClass:"line-number"},[n._v("127")]),a("br"),a("span",{staticClass:"line-number"},[n._v("128")]),a("br"),a("span",{staticClass:"line-number"},[n._v("129")]),a("br"),a("span",{staticClass:"line-number"},[n._v("130")]),a("br"),a("span",{staticClass:"line-number"},[n._v("131")]),a("br"),a("span",{staticClass:"line-number"},[n._v("132")]),a("br"),a("span",{staticClass:"line-number"},[n._v("133")]),a("br"),a("span",{staticClass:"line-number"},[n._v("134")]),a("br"),a("span",{staticClass:"line-number"},[n._v("135")]),a("br"),a("span",{staticClass:"line-number"},[n._v("136")]),a("br"),a("span",{staticClass:"line-number"},[n._v("137")]),a("br"),a("span",{staticClass:"line-number"},[n._v("138")]),a("br"),a("span",{staticClass:"line-number"},[n._v("139")]),a("br"),a("span",{staticClass:"line-number"},[n._v("140")]),a("br"),a("span",{staticClass:"line-number"},[n._v("141")]),a("br"),a("span",{staticClass:"line-number"},[n._v("142")]),a("br"),a("span",{staticClass:"line-number"},[n._v("143")]),a("br"),a("span",{staticClass:"line-number"},[n._v("144")]),a("br"),a("span",{staticClass:"line-number"},[n._v("145")]),a("br"),a("span",{staticClass:"line-number"},[n._v("146")]),a("br"),a("span",{staticClass:"line-number"},[n._v("147")]),a("br"),a("span",{staticClass:"line-number"},[n._v("148")]),a("br"),a("span",{staticClass:"line-number"},[n._v("149")]),a("br"),a("span",{staticClass:"line-number"},[n._v("150")]),a("br"),a("span",{staticClass:"line-number"},[n._v("151")]),a("br"),a("span",{staticClass:"line-number"},[n._v("152")]),a("br"),a("span",{staticClass:"line-number"},[n._v("153")]),a("br"),a("span",{staticClass:"line-number"},[n._v("154")]),a("br"),a("span",{staticClass:"line-number"},[n._v("155")]),a("br"),a("span",{staticClass:"line-number"},[n._v("156")]),a("br"),a("span",{staticClass:"line-number"},[n._v("157")]),a("br"),a("span",{staticClass:"line-number"},[n._v("158")]),a("br"),a("span",{staticClass:"line-number"},[n._v("159")]),a("br"),a("span",{staticClass:"line-number"},[n._v("160")]),a("br"),a("span",{staticClass:"line-number"},[n._v("161")]),a("br"),a("span",{staticClass:"line-number"},[n._v("162")]),a("br"),a("span",{staticClass:"line-number"},[n._v("163")]),a("br"),a("span",{staticClass:"line-number"},[n._v("164")]),a("br"),a("span",{staticClass:"line-number"},[n._v("165")]),a("br"),a("span",{staticClass:"line-number"},[n._v("166")]),a("br"),a("span",{staticClass:"line-number"},[n._v("167")]),a("br"),a("span",{staticClass:"line-number"},[n._v("168")]),a("br"),a("span",{staticClass:"line-number"},[n._v("169")]),a("br"),a("span",{staticClass:"line-number"},[n._v("170")]),a("br"),a("span",{staticClass:"line-number"},[n._v("171")]),a("br"),a("span",{staticClass:"line-number"},[n._v("172")]),a("br"),a("span",{staticClass:"line-number"},[n._v("173")]),a("br"),a("span",{staticClass:"line-number"},[n._v("174")]),a("br"),a("span",{staticClass:"line-number"},[n._v("175")]),a("br"),a("span",{staticClass:"line-number"},[n._v("176")]),a("br"),a("span",{staticClass:"line-number"},[n._v("177")]),a("br"),a("span",{staticClass:"line-number"},[n._v("178")]),a("br"),a("span",{staticClass:"line-number"},[n._v("179")]),a("br"),a("span",{staticClass:"line-number"},[n._v("180")]),a("br"),a("span",{staticClass:"line-number"},[n._v("181")]),a("br"),a("span",{staticClass:"line-number"},[n._v("182")]),a("br"),a("span",{staticClass:"line-number"},[n._v("183")]),a("br"),a("span",{staticClass:"line-number"},[n._v("184")]),a("br"),a("span",{staticClass:"line-number"},[n._v("185")]),a("br"),a("span",{staticClass:"line-number"},[n._v("186")]),a("br"),a("span",{staticClass:"line-number"},[n._v("187")]),a("br"),a("span",{staticClass:"line-number"},[n._v("188")]),a("br"),a("span",{staticClass:"line-number"},[n._v("189")]),a("br"),a("span",{staticClass:"line-number"},[n._v("190")]),a("br"),a("span",{staticClass:"line-number"},[n._v("191")]),a("br"),a("span",{staticClass:"line-number"},[n._v("192")]),a("br"),a("span",{staticClass:"line-number"},[n._v("193")]),a("br"),a("span",{staticClass:"line-number"},[n._v("194")]),a("br"),a("span",{staticClass:"line-number"},[n._v("195")]),a("br"),a("span",{staticClass:"line-number"},[n._v("196")]),a("br"),a("span",{staticClass:"line-number"},[n._v("197")]),a("br"),a("span",{staticClass:"line-number"},[n._v("198")]),a("br"),a("span",{staticClass:"line-number"},[n._v("199")]),a("br"),a("span",{staticClass:"line-number"},[n._v("200")]),a("br"),a("span",{staticClass:"line-number"},[n._v("201")]),a("br"),a("span",{staticClass:"line-number"},[n._v("202")]),a("br"),a("span",{staticClass:"line-number"},[n._v("203")]),a("br"),a("span",{staticClass:"line-number"},[n._v("204")]),a("br"),a("span",{staticClass:"line-number"},[n._v("205")]),a("br"),a("span",{staticClass:"line-number"},[n._v("206")]),a("br"),a("span",{staticClass:"line-number"},[n._v("207")]),a("br"),a("span",{staticClass:"line-number"},[n._v("208")]),a("br"),a("span",{staticClass:"line-number"},[n._v("209")]),a("br"),a("span",{staticClass:"line-number"},[n._v("210")]),a("br"),a("span",{staticClass:"line-number"},[n._v("211")]),a("br"),a("span",{staticClass:"line-number"},[n._v("212")]),a("br"),a("span",{staticClass:"line-number"},[n._v("213")]),a("br"),a("span",{staticClass:"line-number"},[n._v("214")]),a("br"),a("span",{staticClass:"line-number"},[n._v("215")]),a("br"),a("span",{staticClass:"line-number"},[n._v("216")]),a("br"),a("span",{staticClass:"line-number"},[n._v("217")]),a("br"),a("span",{staticClass:"line-number"},[n._v("218")]),a("br"),a("span",{staticClass:"line-number"},[n._v("219")]),a("br"),a("span",{staticClass:"line-number"},[n._v("220")]),a("br"),a("span",{staticClass:"line-number"},[n._v("221")]),a("br"),a("span",{staticClass:"line-number"},[n._v("222")]),a("br"),a("span",{staticClass:"line-number"},[n._v("223")]),a("br"),a("span",{staticClass:"line-number"},[n._v("224")]),a("br"),a("span",{staticClass:"line-number"},[n._v("225")]),a("br"),a("span",{staticClass:"line-number"},[n._v("226")]),a("br"),a("span",{staticClass:"line-number"},[n._v("227")]),a("br"),a("span",{staticClass:"line-number"},[n._v("228")]),a("br"),a("span",{staticClass:"line-number"},[n._v("229")]),a("br"),a("span",{staticClass:"line-number"},[n._v("230")]),a("br"),a("span",{staticClass:"line-number"},[n._v("231")]),a("br"),a("span",{staticClass:"line-number"},[n._v("232")]),a("br"),a("span",{staticClass:"line-number"},[n._v("233")]),a("br"),a("span",{staticClass:"line-number"},[n._v("234")]),a("br"),a("span",{staticClass:"line-number"},[n._v("235")]),a("br"),a("span",{staticClass:"line-number"},[n._v("236")]),a("br"),a("span",{staticClass:"line-number"},[n._v("237")]),a("br"),a("span",{staticClass:"line-number"},[n._v("238")]),a("br"),a("span",{staticClass:"line-number"},[n._v("239")]),a("br"),a("span",{staticClass:"line-number"},[n._v("240")]),a("br"),a("span",{staticClass:"line-number"},[n._v("241")]),a("br"),a("span",{staticClass:"line-number"},[n._v("242")]),a("br"),a("span",{staticClass:"line-number"},[n._v("243")]),a("br"),a("span",{staticClass:"line-number"},[n._v("244")]),a("br"),a("span",{staticClass:"line-number"},[n._v("245")]),a("br"),a("span",{staticClass:"line-number"},[n._v("246")]),a("br"),a("span",{staticClass:"line-number"},[n._v("247")]),a("br"),a("span",{staticClass:"line-number"},[n._v("248")]),a("br"),a("span",{staticClass:"line-number"},[n._v("249")]),a("br"),a("span",{staticClass:"line-number"},[n._v("250")]),a("br"),a("span",{staticClass:"line-number"},[n._v("251")]),a("br"),a("span",{staticClass:"line-number"},[n._v("252")]),a("br"),a("span",{staticClass:"line-number"},[n._v("253")]),a("br"),a("span",{staticClass:"line-number"},[n._v("254")]),a("br"),a("span",{staticClass:"line-number"},[n._v("255")]),a("br"),a("span",{staticClass:"line-number"},[n._v("256")]),a("br"),a("span",{staticClass:"line-number"},[n._v("257")]),a("br"),a("span",{staticClass:"line-number"},[n._v("258")]),a("br"),a("span",{staticClass:"line-number"},[n._v("259")]),a("br")])]),a("p",[n._v("说到这里，也就明白了，多看几遍 "),a("code",[n._v("final boolean acquireQueued(final Node node, int arg)")]),n._v(" 这个方法吧。自己推演下各个分支怎么走，哪种情况下会发生什么，走到哪里。")]),n._v(" "),a("h2",{attrs:{id:"解锁操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解锁操作"}},[n._v("#")]),n._v(" 解锁操作")]),n._v(" "),a("p",[n._v("最后，就是还需要介绍下唤醒的动作了。我们知道，正常情况下，如果线程没获取到锁，线程会被 "),a("code",[n._v("LockSupport.park(this);")]),n._v(" 挂起停止，等待被唤醒。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 唤醒的代码还是比较简单的，你如果上面加锁的都看懂了，下面都不需要看就知道怎么回事了\npublic void unlock() {\n    sync.release(1);\n}\n\npublic final boolean release(int arg) {\n    // 往后看吧\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n\n// 回到ReentrantLock看tryRelease方法\nprotected final boolean tryRelease(int releases) {\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    // 是否完全释放锁\n    boolean free = false;\n    // 其实就是重入的问题，如果c==0，也就是说没有嵌套锁了，可以释放了，否则还不能释放掉\n    if (c == 0) {\n        free = true;\n        setExclusiveOwnerThread(null);\n    }\n    setState(c);\n    return free;\n}\n\n/**\n * Wakes up node's successor, if one exists.\n *\n * @param node the node\n */\n// 唤醒后继节点\n// 从上面调用处知道，参数node是head头结点\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    // 如果head节点当前waitStatus<0, 将其修改为0\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     */\n    // 下面的代码就是唤醒后继节点，但是有可能后继节点取消了等待（waitStatus==1）\n    // 从队尾往前找，找到waitStatus<=0的所有节点中排在最前面的\n    Node s = node.next;\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        // 从后往前找，仔细看代码，不必担心中间有节点取消(waitStatus==1)的情况\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        // 唤醒线程\n        LockSupport.unpark(s.thread);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br")])]),a("p",[n._v("唤醒线程以后，被唤醒的线程将从以下代码中继续往前走：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private final boolean parkAndCheckInterrupt() {\n    LockSupport.park(this); // 刚刚线程被挂起在这里了\n    return Thread.interrupted();\n}\n// 又回到这个方法了：acquireQueued(final Node node, int arg)，这个时候，node的前驱是head了\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("好了，后面就不分析源码了，剩下的还有问题自己去仔细看看代码吧。")]),n._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),a("p",[n._v("总结一下吧。")]),n._v(" "),a("p",[n._v("在并发环境下，加锁和解锁需要以下三个部件的协调：")]),n._v(" "),a("ol",[a("li",[n._v("锁状态。我们要知道锁是不是被别的线程占有了，这个就是 state 的作用，它为 0 的时候代表没有线程占有锁，可以去争抢这个锁，用 CAS 将 state 设为 1，如果 CAS 成功，说明抢到了锁，这样其他线程就抢不到了，如果锁重入的话，state进行 +1 就可以，解锁就是减 1，直到 state 又变为 0，代表释放锁，所以 lock() 和 unlock() 必须要配对啊。然后唤醒等待队列中的第一个线程，让其来占有锁。")]),n._v(" "),a("li",[n._v("线程的阻塞和解除阻塞。AQS 中采用了 LockSupport.park(thread) 来挂起线程，用 unpark 来唤醒线程。")]),n._v(" "),a("li",[n._v("阻塞队列。因为争抢锁的线程可能很多，但是只能有一个线程拿到锁，其他的线程都必须等待，这个时候就需要一个 queue 来管理这些线程，AQS 用的是一个 FIFO 的队列，就是一个链表，每个 node 都持有后继节点的引用。AQS 采用了 CLH 锁的变体来实现，感兴趣的读者可以参考这篇文章"),a("a",{attrs:{href:"http://coderbee.net/index.php/concurrent/20131115/577",target:"_blank",rel:"noopener noreferrer"}},[n._v("关于CLH的介绍"),a("OutboundLink")],1),n._v("，写得简单明了。")])]),n._v(" "),a("h2",{attrs:{id:"示例图解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例图解析"}},[n._v("#")]),n._v(" 示例图解析")]),n._v(" "),a("p",[n._v("下面属于回顾环节，用简单的示例来说一遍，如果上面的有些东西没看懂，这里还有一次帮助你理解的机会。")]),n._v(" "),a("p",[n._v("首先，第一个线程调用 reentrantLock.lock()，翻到最前面可以发现，tryAcquire(1) 直接就返回 true 了，结束。只是设置了 state=1，连 head 都没有初始化，更谈不上什么阻塞队列了。要是线程 1 调用 unlock() 了，才有线程 2 来，那世界就太太太平了，完全没有交集嘛，那我还要 AQS 干嘛。")]),n._v(" "),a("p",[n._v("如果线程 1 没有调用 unlock() 之前，线程 2 调用了 lock(), 想想会发生什么？")]),n._v(" "),a("p",[n._v("线程 2 会初始化 head【new Node()】，同时线程 2 也会插入到阻塞队列并挂起 (注意看这里是一个 for 循环，而且设置 head 和 tail 的部分是不 return 的，只有入队成功才会跳出循环)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private Node enq(final Node node) {\n    for (;;) {\n        Node t = tail;\n        if (t == null) { // Must initialize\n            if (compareAndSetHead(new Node()))\n                tail = head;\n        } else {\n            node.prev = t;\n            if (compareAndSetTail(t, node)) {\n                t.next = node;\n                return t;\n            }\n        }\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("首先，是线程 2 初始化 head 节点，此时 head==tail, waitStatus==0")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/AbstractQueuedSynchronizer/aqs-1.png",alt:"aqs-1"}})]),n._v(" "),a("p",[n._v("然后线程 2 入队：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/AbstractQueuedSynchronizer/aqs-2.png",alt:"aqs-2"}})]),n._v(" "),a("p",[n._v("同时我们也要看此时节点的 waitStatus，我们知道 head 节点是线程 2 初始化的，此时的 waitStatus 没有设置， java 默认会设置为 0，但是到 shouldParkAfterFailedAcquire 这个方法的时候，线程 2 会把前驱节点，也就是 head 的waitStatus设置为 -1。")]),n._v(" "),a("p",[n._v("那线程 2 节点此时的 waitStatus 是多少呢，由于没有设置，所以是 0；")]),n._v(" "),a("p",[n._v("如果线程 3 此时再进来，直接插到线程 2 的后面就可以了，此时线程 3 的 waitStatus 是 0，到 shouldParkAfterFailedAcquire 方法的时候把前驱节点线程 2 的 waitStatus 设置为 -1。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/AbstractQueuedSynchronizer/aqs-3.png",alt:"aqs-3"}})]),n._v(" "),a("p",[n._v("这里可以简单说下 waitStatus 中 SIGNAL(-1) 状态的意思，Doug Lea 注释的是：代表后继节点需要被唤醒。也就是说这个 waitStatus 其实代表的不是自己的状态，而是后继节点的状态，我们知道，每个 node 在入队的时候，都会把前驱节点的状态改为 SIGNAL，然后阻塞，等待被前驱唤醒。这里涉及的是两个问题：有线程取消了排队、唤醒操作。其实本质是一样的，读者也可以顺着 “waitStatus代表后继节点的状态” 这种思路去看一遍源码。")])])}),[],!1,null,null,null);s.default=t.exports}}]);