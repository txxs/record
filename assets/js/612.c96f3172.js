(window.webpackJsonp=window.webpackJsonp||[]).push([[612],{1003:function(a,t,v){"use strict";v.r(t);var _=v(13),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"table-of-contents"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E4%B8%80%E7%9B%AE%E6%A0%87%EF%BC%9A"}},[a._v("一.目标：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BA%8C%E5%8E%9F%E7%90%86-%EF%BC%88%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%85%B6%E6%9C%80%E7%BB%88%E4%BA%A7%E5%93%81%EF%BC%89"}},[a._v("二.原理 （类的加载过程及其最终产品）:")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%89%E8%BF%87%E7%A8%8B%EF%BC%88%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89%EF%BC%9A"}},[a._v("三.过程（类的生命周期）：")]),a._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E5%8A%A0%E8%BD%BD%EF%BC%9A"}},[a._v("加载：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E6%A0%A1%E9%AA%8C%EF%BC%9A"}},[a._v("校验：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E5%87%86%E5%A4%87%EF%BC%9A"}},[a._v("准备：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%EF%BC%9A"}},[a._v("解析：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%9A"}},[a._v("初始化：")])])])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%9A"}},[a._v("四.类加载器：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BA%94%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%EF%BC%9A"}},[a._v("五.双亲委派机制：")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])]),a._v(" "),v("p",[a._v("本文转自互联网，侵删")]),a._v(" "),v("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),v("blockquote",[v("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),v("p",[a._v("喜欢的话麻烦点下Star哈")]),a._v(" "),v("p",[a._v("文章将同步到我的个人博客：")]),a._v(" "),v("blockquote",[v("p",[a._v("www.how2playlife.com")])]),a._v(" "),v("p",[a._v("本文是微信公众号【Java技术江湖】的《深入理解JVM虚拟机》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),a._v(" "),v("p",[a._v("该系列博文会告诉你如何从入门到进阶，一步步地学习JVM基础知识，并上手进行JVM调优实战，JVM是每一个Java工程师必须要学习和理解的知识点，你必须要掌握其实现原理，才能更完整地了解整个Java技术体系，形成自己的知识框架。")]),a._v(" "),v("p",[a._v("为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),a._v(" "),v("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),v("h2",{attrs:{id:"一-目标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一-目标"}},[a._v("#")]),a._v(" 一.目标：")]),a._v(" "),v("p",[a._v("1.什么是类的加载？")]),a._v(" "),v("p",[a._v("2.类的生命周期？")]),a._v(" "),v("p",[a._v("3.类加载器是什么？")]),a._v(" "),v("p",[a._v("4.双亲委派机制是什么？")]),a._v(" "),v("h2",{attrs:{id:"二-原理-类的加载过程及其最终产品"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二-原理-类的加载过程及其最终产品"}},[a._v("#")]),a._v(" 二.原理 （类的加载过程及其最终产品）:")]),a._v(" "),v("p",[a._v("JVM将class文件字节码文件加载到内存中， 并将这些静态数据转换成方法区中的运行时数据结构，在堆(并不一定在堆中，HotSpot在方法区中)中生成一个代表这个类的java.lang.Class 对象，作为方法区类数据的访问入口。")]),a._v(" "),v("h2",{attrs:{id:"三-过程-类的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三-过程-类的生命周期"}},[a._v("#")]),a._v(" 三.过程（类的生命周期）：")]),a._v(" "),v("p",[a._v("JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。其中加载、检验、准备、初始化和卸载这个五个阶段的顺序是固定的，而解析则未必。为了支持动态绑定，解析这个过程可以发生在初始化阶段之后。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13202633-3cb11d1712a9efc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/739/format/webp",alt:""}})]),a._v(" "),v("h3",{attrs:{id:"加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[a._v("#")]),a._v(" 加载：")]),a._v(" "),v("p",[a._v("加载过程主要完成三件事情：")]),a._v(" "),v("ol",[v("li",[a._v("通过类的全限定名来获取定义此类的二进制字节流")]),a._v(" "),v("li",[a._v("将这个类字节流代表的静态存储结构转为方法区的运行时数据结构")]),a._v(" "),v("li",[a._v("在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。")])]),a._v(" "),v("p",[a._v("这个过程主要就是类加载器完成。")]),a._v(" "),v("h3",{attrs:{id:"校验"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#校验"}},[a._v("#")]),a._v(" 校验：")]),a._v(" "),v("p",[a._v("此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。")]),a._v(" "),v("ol",[v("li",[a._v("文件格式验证：基于字节流验证。")]),a._v(" "),v("li",[a._v("元数据验证：基于**"),v("em",[a._v("方法区")]),a._v("**的存储结构验证。")]),a._v(" "),v("li",[a._v("字节码验证：基于方法区的存储结构验证。")]),a._v(" "),v("li",[a._v("符号引用验证：基于方法区的存储结构验证。")])]),a._v(" "),v("h3",{attrs:{id:"准备"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[a._v("#")]),a._v(" 准备：")]),a._v(" "),v("p",[a._v("为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间。例如：")]),a._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("public static int value = 123;\n\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br")])]),v("p",[a._v("此时在准备阶段过后的初始值为0而不是123；将value赋值为123的putstatic指令是程序被编译后，存放于类构造器"),v("client",[a._v("方法之中.特例：")])],1),a._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("public static final int value = 123;\n\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br")])]),v("p",[a._v("此时value的值在准备阶段过后就是123。")]),a._v(" "),v("h3",{attrs:{id:"解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[a._v("#")]),a._v(" 解析：")]),a._v(" "),v("p",[a._v("把类型中的符号引用转换为直接引用。")]),a._v(" "),v("ul",[v("li",[a._v("符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。")]),a._v(" "),v("li",[a._v("直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在")])]),a._v(" "),v("p",[a._v("主要有以下四种：")]),a._v(" "),v("ol",[v("li",[a._v("类或接口的解析")]),a._v(" "),v("li",[a._v("字段解析")]),a._v(" "),v("li",[a._v("类方法解析")]),a._v(" "),v("li",[a._v("接口方法解析")])]),a._v(" "),v("h3",{attrs:{id:"初始化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" 初始化：")]),a._v(" "),v("p",[a._v("初始化阶段是执行类构造器"),v("client",[a._v("方法的过程。"),v("client",[a._v("方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证"),v("client",[a._v("方法执行之前，父类的"),v("client",[a._v("方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成"),v("client",[a._v("()方法。")])],1)],1)],1)],1)],1),a._v(" "),v("p",[a._v("java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：")]),a._v(" "),v("ol",[v("li",[a._v("使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。")]),a._v(" "),v("li",[a._v("初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。")]),a._v(" "),v("li",[a._v("使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。")]),a._v(" "),v("li",[a._v("虚拟机启动时，用户会先初始化要执行的主类（含有main）")]),a._v(" "),v("li",[a._v("jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。")])]),a._v(" "),v("h2",{attrs:{id:"四-类加载器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四-类加载器"}},[a._v("#")]),a._v(" 四.类加载器：")]),a._v(" "),v("p",[a._v("把类加载阶段的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作交给虚拟机之外的类加载器来完成。这样的好处在于，我们可以自行实现类加载器来加载其他格式的类，只要是二进制字节流就行，这就大大增强了加载器灵活性。系统自带的类加载器分为三种：")]),a._v(" "),v("ol",[v("li",[a._v("启动类加载器。")]),a._v(" "),v("li",[a._v("扩展类加载器。")]),a._v(" "),v("li",[a._v("应用程序类加载器。")])]),a._v(" "),v("h2",{attrs:{id:"五-双亲委派机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五-双亲委派机制"}},[a._v("#")]),a._v(" 五.双亲委派机制：")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13202633-4c819649aebff4df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/590/format/webp",alt:""}})]),a._v(" "),v("p",[a._v("双亲委派机制工作过程：")]),a._v(" "),v("p",[a._v("如果一个类加载器收到了类加载器的请求.它首先不会自己去尝试加载这个类.而是把这个请求委派给父加载器去完成.每个层次的类加载器都是如此.因此所有的加载请求最终都会传送到Bootstrap类加载器(启动类加载器)中.只有父类加载反馈自己无法加载这个请求(它的搜索范围中没有找到所需的类)时.子加载器才会尝试自己去加载。")]),a._v(" "),v("p",[a._v("双亲委派模型的优点：java类随着它的加载器一起具备了一种带有优先级的层次关系.")]),a._v(" "),v("p",[a._v("例如类java.lang.Object,它存放在rt.jart之中.无论哪一个类加载器都要加载这个类.最终都是双亲委派模型最顶端的Bootstrap类加载器去加载.因此Object类在程序的各种类加载器环境中都是同一个类.相反.如果没有使用双亲委派模型.由各个类加载器自行去加载的话.如果用户编写了一个称为“java.lang.Object”的类.并存放在程序的ClassPath中.那系统中将会出现多个不同的Object类.java类型体系中最基础的行为也就无法保证.应用程序也将会一片混乱.")]),a._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),v("p",[v("a",{attrs:{href:"https://segmentfault.com/a/1190000009707894",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://segmentfault.com/a/1190000009707894"),v("OutboundLink")],1)]),a._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/hysum/p/7100874.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/hysum/p/7100874.html"),v("OutboundLink")],1)]),a._v(" "),v("p",[v("a",{attrs:{href:"http://c.biancheng.net/view/939.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://c.biancheng.net/view/939.html"),v("OutboundLink")],1)]),a._v(" "),v("p",[v("a",{attrs:{href:"https://www.runoob.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.runoob.com/"),v("OutboundLink")],1)]),a._v(" "),v("p",[a._v("https://blog.csdn.net/android_hl/article/details/53228348")]),a._v(" "),v("h2",{attrs:{id:"微信公众号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),v("h3",{attrs:{id:"java技术江湖"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),v("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),v("p",[v("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),v("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),v("h3",{attrs:{id:"个人公众号-黄小斜"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),v("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),v("p",[v("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),v("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);