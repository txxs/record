(window.webpackJsonp=window.webpackJsonp||[]).push([[1198],{1591:function(s,a,t){"use strict";t.r(a);var e=t(13),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("现在主流网站都支持手机号登录，如何在手机号这样的字符串字段建立合适的索引呢？")]),s._v(" "),t("p",[s._v("假设，你现在维护一个支持邮箱登录的系统，用户表是这么定义的：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\tID "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bigint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\temail "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("engine")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("innodb")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("要使用邮箱登录，会有语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" f1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xxx'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("若email字段无索引，该语句只能全表扫描。")]),s._v(" "),t("p",[s._v("MySQL支持前缀索引，可定义字符串的一部分作为索引。\n若创建索引的语句不指定前缀长度，那么索引默认包含整个字符串。")]),s._v(" "),t("p",[s._v("比如，这俩在email字段创建索引的语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("第一个语句创建的index1索引，包含每个记录的整个字符串\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/202007261526195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("li",[s._v("第二个语句创建的index2索引，对每个记录都只取前6个字节\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200726152700656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})])]),s._v(" "),t("p",[s._v("可见，email(6)索引结构中每个邮箱字段都只取前6字节（zhangs），占用空间更小，这就是前缀索引优势。")]),s._v(" "),t("p",[s._v("这同时带来损失：可能会增加额外的记录扫描次数。")]),s._v(" "),t("p",[s._v("看看下面这语句，在这俩索引定义分别怎么执行。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果使用index1，执行顺序如下：")]),s._v(" "),t("ol",[t("li",[s._v("从index1索引树找到满足索引值 'zhangssxyz@xxx.com'的记录，取得ID2的值")]),s._v(" "),t("li",[s._v("到主键上查到主键值是ID2的行，判断email值是正确的，将改行记录加入结果集")]),s._v(" "),t("li",[s._v("取index1索引树上刚刚查到位置的下条记录，发现已不满足email='zhangssxyz@xxx.com’条件，结束循环")])]),s._v(" "),t("p",[s._v("该过程，只需回主键索引取一次数据，所以系统认为只扫描一行。")]),s._v(" "),t("p",[s._v("如果使用是index2，执行顺序如下：")]),s._v(" "),t("ol",[t("li",[s._v("从index2索引树找到满足索引值是’zhangs’的记录，找到的第一个是ID1")]),s._v(" "),t("li",[s._v("到主键上查到主键值是ID1的行，判断出email的值不是’zhangssxyz@xxx.com’，该行记录丢弃")]),s._v(" "),t("li",[s._v("取index2上刚刚查到的位置的下条记录，仍是’zhangs’，取出ID2，再到ID索引取整行判断，这次值对，将该行记录加入结果集")]),s._v(" "),t("li",[s._v("重复上一步，直到在idxe2上取值不是’zhangs’，结束循环结束")])]),s._v(" "),t("p",[s._v("该过程，要回主键索引取4次数据，即扫描4行。")]),s._v(" "),t("p",[s._v("对比发现，使用前缀索引，可能导致查询语句读数据的次数变多。")]),s._v(" "),t("p",[s._v("但对该查询语句，如果定义index2不是email(6)而是email(7），即取email字段前7字节构建索引，即满足前缀’zhangss’记录只有一个，也能直接查到ID2，只扫描一行结束。")]),s._v(" "),t("p",[s._v("即使用前缀索引，定义好长度，就可做到既节省空间，又不用增加额外太多的查询成本。")]),s._v(" "),t("p",[s._v("要给字符串创建前缀索引")]),s._v(" "),t("h1",{attrs:{id:"_1-确定前缀长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-确定前缀长度"}},[s._v("#")]),s._v(" 1 确定前缀长度")]),s._v(" "),t("p",[s._v("在建立索引时我们关注的是区分度，区分度越高越好。区分度越高，重复的键值越少。因此可通过统计索引上有多少不同值判断要使用多长前缀。")]),s._v(" "),t("p",[s._v("可使用如下语句，计算该列上有多少不同值")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("依次选取不同长度前缀来测该值，比如看4~7个字节前缀索引：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" \n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L7"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("使用前缀索引可能会损失区分度，所以需要预先设定一个可接受损失比例，比如5%。\n然后，在返回的L4~L7中，找出不小于 L * 95%的值，假设L6、L7都满足时，即可选择前缀长度最短为6。")]),s._v(" "),t("h1",{attrs:{id:"_2-前缀索引对覆盖索引的影响"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-前缀索引对覆盖索引的影响"}},[s._v("#")]),s._v(" 2 前缀索引对覆盖索引的影响")]),s._v(" "),t("p",[s._v("看如下SQL：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("与前例SQL语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("相比，该语句只要求返回id和email。")]),s._v(" "),t("p",[s._v("若使用index1，可利用覆盖索引，从index1查到结果后直接返回，不需回到ID索引再查一次。\n而若使用index2（email(6)），得回ID索引再判断email字段值。")]),s._v(" "),t("p",[s._v("即使将index2定义改为email(18)，虽然index2已包含所有信息，但InnoDB还是要回id索引再查，因为系统并不确定前缀索引的定义是否截断了完整信息。\n即前缀索引根本用不上覆盖索引对查询的优化，这也是选择是否使用前缀索引时需要考虑的因素。")]),s._v(" "),t("h1",{attrs:{id:"_3-其他方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他方案"}},[s._v("#")]),s._v(" 3 其他方案")]),s._v(" "),t("p",[s._v("对类似邮箱这样字段，前缀索引可能还行。但遇到前缀区分度不好的，怎么办？")]),s._v(" "),t("p",[s._v("比如身份证号18位，前6位是地址码，所以同县人身份证号前6位一般相同。\n假设维护数据库是个市公民信息系统，若对身份证号做长度6前缀索引，区分度非常低。\n可能需创建长度12以上前缀索引，才能够满足区分度要求。")]),s._v(" "),t("p",[s._v("但"),t("strong",[s._v("索引选取越长，占磁盘空间越大，相同数据页能放下索引值越少，查询效率就越低。")])]),s._v(" "),t("ul",[t("li",[s._v("若能确定业务需求只有按身份证进行等值查询的需求，还有没有别的处理方法，既可占用更小空间，也能达到相同查询效率？\nYes！")])]),s._v(" "),t("p",[s._v("第一种方式使用")]),s._v(" "),t("h2",{attrs:{id:"_3-1-倒序存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-倒序存储"}},[s._v("#")]),s._v(" 3.1 倒序存储")]),s._v(" "),t("p",[s._v("如果存储身份证号时把它倒过来存，每次查询这么写：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" field_list "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id_card "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reverse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("由于身份证号最后6位没有地址码这样重复逻辑，所以最后6位可能提供足够的区分度。\n实践中也别忘记使用count(distinct)验证区分度哦！")]),s._v(" "),t("p",[s._v("第二种方式是使用")]),s._v(" "),t("h2",{attrs:{id:"_3-2-hash字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-hash字段"}},[s._v("#")]),s._v(" 3.2 hash字段")]),s._v(" "),t("p",[s._v("可在表再创建整数字段，保存身份证的校验码，同时在该字段创建索引。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" id_card_crc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id_card_crc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("每次插新记录时，同时用crc32()函数得到校验码填到该新字段。\n由于校验码可能存在冲突，即两不同身份证号crc32()所得结果可能相同（哈希冲突），所以查询语句where部分要判断id_card值是否精确相同。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" field_list "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" \nid_card_crc"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("crc32"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" id_card"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这索引长度变4字节，比原来小很多。")]),s._v(" "),t("h2",{attrs:{id:"_3-3-倒序存储和使用hash字段异同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-倒序存储和使用hash字段异同点"}},[s._v("#")]),s._v(" 3.3 倒序存储和使用hash字段异同点")]),s._v(" "),t("h3",{attrs:{id:"相同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[s._v("#")]),s._v(" 相同点")]),s._v(" "),t("p",[s._v("都不支持范围查询。")]),s._v(" "),t("ul",[t("li",[s._v("倒序存储的字段上创建的索引\n按倒序字符串的方式排序，已无法利用索引查出身份证号码在[ID_X, ID_Y]的所有市民")]),s._v(" "),t("li",[s._v("hash字段也只支持等值查询")])]),s._v(" "),t("h3",{attrs:{id:"区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),t("h4",{attrs:{id:"占用的额外空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#占用的额外空间"}},[s._v("#")]),s._v(" 占用的额外空间")]),s._v(" "),t("ul",[t("li",[s._v("倒序存储在主键索引上，不会消耗额外存储空间\n当然，倒序存储使用4字节前缀长度应该不够，若再长点，这消耗和hash字段也差不多了")]),s._v(" "),t("li",[s._v("hash字段需要加个字段")])]),s._v(" "),t("h4",{attrs:{id:"cpu消耗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu消耗"}},[s._v("#")]),s._v(" CPU消耗")]),s._v(" "),t("ul",[t("li",[s._v("倒序方式每次读写时，都需额外调用次reverse函数")]),s._v(" "),t("li",[s._v("hash字段需额外调用一次crc32()函数")])]),s._v(" "),t("p",[s._v("若只从这俩函数计算复杂度看，reverse函数额外消耗CPU资源较少。")]),s._v(" "),t("h4",{attrs:{id:"查询效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询效率"}},[s._v("#")]),s._v(" 查询效率")]),s._v(" "),t("ul",[t("li",[s._v("hash字段查询性能较稳定\n因为crc32值虽然会冲突，但概率很小，可认为每次查询的平均扫描行数接近1")]),s._v(" "),t("li",[s._v("倒序存储\n还是前缀索引，即还是会增加扫描行数")])]),s._v(" "),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("字符串字段创建索引的场景，可使用的方式如下：")]),s._v(" "),t("ol",[t("li",[s._v("直接创建完整索引，这样可能比较占用空间")]),s._v(" "),t("li",[s._v("创建前缀索引，节省空间，但增加查询扫描次数，且不能使用覆盖索引")]),s._v(" "),t("li",[s._v("倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不足缺陷")]),s._v(" "),t("li",[s._v("创建hash字段索引，查询性能稳定，有额外存储和计算消耗，跟第三种方式一样不支持范围扫描")])]),s._v(" "),t("p",[s._v("实际应用中，根据业务字段的特点选择使用哪种方式。")]),s._v(" "),t("h1",{attrs:{id:"思考题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[s._v("#")]),s._v(" 思考题")]),s._v(" "),t("p",[s._v('维护学生信息数据库，学生登录名的统一格式是”学号@gmail.com"\n学号的则是：十五位的数字，其中前三位是所在城市编号、第四到第六位是学校编号、第七位到第十位是入学年份、最后五位是顺序编号。')]),s._v(" "),t("p",[s._v("系统登录时输入登录名和密码，验证正确后才能继续使用系统。\n只考虑登录验证，怎么设计这个登录名的索引呢？\n上期我留给你的问题是，给一个学号字段创建索引，有哪些方法。")]),s._v(" "),t("p",[s._v("由于学号规则，无论正向反向前缀索引，重复度都较高。\n因为维护的只是一个学校的，因此前面6位（其中，前三位是所在城市编号、第四到第六位是学校编号）固定，邮箱后缀都是@gamil.com，因此可只存入学年份加顺序编号，长度9位。")]),s._v(" "),t("p",[s._v("在此基础，可用数字型存这9位数字。比如201100001，只需占4字节。其实这就是种hash，只是用最简单转换规则：字符串转数字，而刚好我们设定背景，可保证转换结果唯一。")]),s._v(" "),t("p",[s._v("当然了，一个学校的总人数这种数据量，50年才100万学生，这表肯定是小表。为了业务简单，直接存原来的字符串。“优化成本和收益”的思想。")])])}),[],!1,null,null,null);a.default=n.exports}}]);