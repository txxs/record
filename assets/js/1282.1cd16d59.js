(window.webpackJsonp=window.webpackJsonp||[]).push([[1282],{1679:function(s,a,e){"use strict";e.r(a);var t=e(13),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("一切网络通信，皆需要双方遵守协议才能互联。Redis协议在以下几点之间做出了折衷：")]),s._v(" "),e("ul",[e("li",[s._v("简单的实现")]),s._v(" "),e("li",[s._v("快速被计算机解析")]),s._v(" "),e("li",[s._v("简单到可被人工解析")])]),s._v(" "),e("h1",{attrs:{id:"网络层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[s._v("#")]),s._v(" 网络层")]),s._v(" "),e("p",[s._v("Redis在TCP端口6379上监听到来的连接，客户端连接到来时，Redis服务器为此创建一个TCP连接。在客户端与服务器端之间传输的每个Redis命令或者数据都以"),e("code",[s._v("\\r\\n")]),s._v("结尾。")]),s._v(" "),e("h2",{attrs:{id:"请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求"}},[s._v("#")]),s._v(" 请求")]),s._v(" "),e("p",[s._v("Redis接收由不同参数组成的命令。一旦收到命令，将会立刻被处理，并响应给客户端。")]),s._v(" "),e("h2",{attrs:{id:"新的统一请求协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新的统一请求协议"}},[s._v("#")]),s._v(" 新的统一请求协议")]),s._v(" "),e("p",[s._v("新的统一协议在Redis 1.2中引入，在Redis 2.0中，成为与Redis服务器通讯的标准方式。")]),s._v(" "),e("p",[s._v("在这个统一协议里，发送给Redis服务端的所有参数都是二进制安全的。")]),s._v(" "),e("p",[s._v("如下是通用形式：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("*"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number of arguments"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" CR LF\n$"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number of bytes of argument "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" CR LF\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("argument data"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" CR LF\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n$"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number of bytes of argument N"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" CR LF\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("argument data"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" CR LF\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("示例：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("➜  ~ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("nc")]),s._v(" localhost "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v("\nkeys *\n*2\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),s._v("\nuser:sign:5:202101\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),s._v("\nseckill_vouchers:6\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面的命令看上去像是单引号字符串，所以可在查询中看到每个字节的准确值：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*2'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("user:sign:5:202101"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("seckill_vouchers:6"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在Redis的响应中也使用这样的格式。批量回复时，这种格式用于每个参数$6\\r\\nmydata\\r\\n。 实际的统一请求协议是Redis用于返回列表项，并调用 Multi-bulk回复。 仅仅是N个以以*\\r\\n为前缀的不同批量回复，是紧随的参数（批量回复）数目。")]),s._v(" "),e("h2",{attrs:{id:"响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应"}},[s._v("#")]),s._v(" 响应")]),s._v(" "),e("p",[s._v("Redis用不同的响应类型回复命令。它可能从服务器发送的第一个字节开始校验回复类型：")]),s._v(" "),e("ul",[e("li",[s._v("单行回复\n回复的第一个字节将是"),e("code",[s._v("+")])])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" java edge\n+OK\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("错误消息\n回复的第一个字节将是"),e("code",[s._v("-")])])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("keys*\n-ERR unknown "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("keys*"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(", with args beginning with:\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("整型数字\n回复的第一个字节将是"),e("code",[s._v(":")])]),s._v(" "),e("li",[s._v("批量回复\n回复的第一个字节将是"),e("code",[s._v("$")])])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("keys *\n*2\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),s._v("\nuser:sign:5:202101\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$18")]),s._v("\nseckill_vouchers:6\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("多个批量回复\n回复的第一个字节将是"),e("code",[s._v("*")])])]),s._v(" "),e("h3",{attrs:{id:"simple-strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-strings"}},[s._v("#")]),s._v(" Simple Strings")]),s._v(" "),e("p",[s._v("状态回复（或者单行回复）以“+”开始以“\\r\\n”结尾的单行字符串形式。例如：")]),s._v(" "),e("p",[s._v('"+OK\\r\\n"\n客户端库将在“+”后面返回所有数据，正如上例中字符串“OK”一样。')]),s._v(" "),e("h3",{attrs:{id:"errors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#errors"}},[s._v("#")]),s._v(" Errors")]),s._v(" "),e("p",[s._v("错误回复发送类似于状态回复。唯一的不同是第一个字节用“-”代替“+”。")]),s._v(" "),e("p",[s._v("错误回复仅仅在一些意料之外的事情发生时发送，例如：如果你试图执行一个操作来应付错误的数据类型，或者如果命令不存在等等。所以当收到一个错误回复时，客户端将会出现一个异常。")]),s._v(" "),e("h3",{attrs:{id:"integers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#integers"}},[s._v("#")]),s._v(" Integers")]),s._v(" "),e("p",[s._v("这种回复类型只是用CRLF结尾字符串来表示整型，用一个字节的“：”作为前缀。例如：“：0\\r\\n”，或者“:1000\\r\\n”是整型回复。")]),s._v(" "),e("p",[s._v("像INCR或者LASTAVE命令用整型回复作为实际回复值，此时对于返回的整型没有特殊的意思。它仅仅是为INCR、LASTSAVE的UNIX时间等增加数值。")]),s._v(" "),e("p",[s._v("一些命令像EXISTS将为true返回1，为false返回0。")]),s._v(" "),e("p",[s._v("其它命令像SADD、SREM和SETNX如果操作实际完成了的话将返回1，否则返回0。")]),s._v(" "),e("p",[s._v("接下来的命令将回复一个整型回复：SETNX、DEL、EXISTS、INCR、INCRBY、DECR、DECRBY、DBSIZE、LASTSAVE、RENAMENX、MOVE、LLEN、SADD、SREM、SISMEMBER、SCARD。")]),s._v(" "),e("h3",{attrs:{id:"bulk-strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bulk-strings"}},[s._v("#")]),s._v(" Bulk Strings")]),s._v(" "),e("p",[s._v("批量响应被服务器用于返回一个单二进制安全字符串。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: GET mykey\nS: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nfoobar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("服务器发送第一行响应，该行以“$”开始后面跟随实际要发送的字节数，随后是CRLF，然后发送实际数据，随后是2个字节的额外数据用于最后的CRLF。服务器发送的准确序列如下：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$6")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("foobar"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("如果请求的值不存在，批量响应将使用特殊的值-1来作为数据长度，例如：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: GET nonexistingkey\nS: $-1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("当请求的对象不存在时，客户端库API不会返回空字符串，而会返回空对象。例如：Ruby库返回‘nil’，而C库返回NULL（或者在回复的对象里设置指定的标志）等等。")]),s._v(" "),e("h1",{attrs:{id:"arrays"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[s._v("#")]),s._v(" Arrays")]),s._v(" "),e("p",[s._v("像命令LRNGE需要返回多个值（列表的每个元素是一个值，而LRANGE需要返回多于一个单元素）。使用多批量写是有技巧的，用一个初始行作为前缀来指示多少个批量写紧随其后。批量回复的第一个字节总是*，例如：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: LRANGE mylist "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\ns: *4\ns: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\ns: foo\ns: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\ns: bar\ns: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$5")]),s._v("\ns: Hello\ns: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$5")]),s._v("\ns: World\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("正如您可以看到的多批量回复是以完全相同的格式使用Redis统一协议将命令发送给服务器。")]),s._v(" "),e("p",[s._v("服务器发送的第一行是*4\\r\\n，用于指定紧随着4个批量回复。然后传送每个批量写。")]),s._v(" "),e("p",[s._v("如果指定的键不存在，则该键被认为是持有一个空的列表，且数值0被当作多批量计数值来发送，例如：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: LRANGE nokey "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nS: *0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("当BLPOP命令超时时，它返回nil多批量回复。这种类型多批量回复的计数器是-1，且值被当作nil来解释。例如：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: BLPOP key "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nS: *-1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("当这种情况发生时，客户端库API将返回空nil对象，且不是一个空列表。这必须有别于空列表和错误条件（例如：BLPOP命令的超时条件）。")]),s._v(" "),e("p",[s._v("多批量回复中的Nil元素\n多批量回复的单元素长度可能是-1，为了发出信号这个元素被丢失且不是空字符串。这种情况发送在SORT命令时，此时使用GET模式选项且指定的键丢失。一个多批量回复包含一个空元素的例子如下：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("S: *3\nS: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\nS: foo\nS: $-1\nS: "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\nS: bar\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("第二个元素是空。客户端库返回如下:")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),s._v(",nil,"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bar"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h1",{attrs:{id:"多命令和管道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多命令和管道"}},[s._v("#")]),s._v(" 多命令和管道")]),s._v(" "),e("p",[s._v("客户端能使用同样条件为了发出多个命令。管道用于支持多命令能够被客户端用单写操作来发送，它不需要为了发送下一条命令而读取服务器的回复。所有回复都能在最后被读出。")]),s._v(" "),e("p",[s._v("通常Redis服务器和客户端拥有非常快速的连接，所以在客户端的实现中支持这个特性不是那么重要，如果一个应用需要在短时间内发出大量的命令，管道仍然会非常快。")]),s._v(" "),e("p",[s._v("旧协议发送命令\n在统一请求协议出现前，Redis用不同的协议发送命令，现在仍然支持，它简单通过手动telnet。在这种协议中，有两种类型的命令：")]),s._v(" "),e("p",[s._v("内联命令：简单命令其参数用空格分割字符串。非二进制安全。\n批量命令：批量命令准确如内联命令，但是最后的参数用特殊方式来处理用于保证最后参数二进制安全。 内联命令\n最简单的发送Redis命令的方式是通过内联命令。下面是一个使用内联命令聊天的服务器/客户端的例子（服务器聊天用S:开始，客户端聊天用C:开始）。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: PING\nS: +PONG\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("下面是另外一个内联命令返回整数的例子：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: EXISTS somekey\nS: :0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("因为‘somekey’不存在，所以服务器返回‘:0’。")]),s._v(" "),e("p",[s._v("注意：EXISTS命令带有一个参数。参数用空格分割。")]),s._v(" "),e("p",[s._v("批量命令")]),s._v(" "),e("p",[s._v("一些命令当用内联命令发送时需要一种特殊的格式用于支持最后参数二进制安全。这种命令用最后参数作为“字节计数器”，然后发送批量数据（因为服务器知道读取多少个字节，所以是二进制安全的）。")]),s._v(" "),e("p",[s._v("请看下面的例子：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("C: SET mykey "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\nC: foobar\nS: +OK\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这条命令的最后一个参数是‘6’。这用于指定随后数据的字节数，即字符串“foobar”。注意：虽然这个字节流是以额外的两个CRLF字节结尾的。")]),s._v(" "),e("p",[s._v("所有批量命令都是用这种准确的格式：用随后数据的字节数代替最后一个参数，紧跟着后面是组成参数本身的字节和CRLF。为了更清楚程序，下面是通过客户端发送字符串的例子：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SET mykey 6'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("foobar"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("Redis有一个内部列表，用于表示哪些命令是内联，哪些命令是批量，所以你不得不发送相应的命令。强烈建议使用新的统一请求协议来代替老的协议。")])])}),[],!1,null,null,null);a.default=n.exports}}]);