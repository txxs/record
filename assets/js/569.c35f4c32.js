(window.webpackJsonp=window.webpackJsonp||[]).push([[569],{969:function(a,e,t){"use strict";t.r(e);var s=t(13),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"table-of-contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E4%B8%ADclass%E7%B1%BB%E5%8F%8A%E7%94%A8%E6%B3%95"}},[a._v("Java中Class类及用法")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#class%E7%B1%BB%E5%8E%9F%E7%90%86"}},[a._v("Class类原理")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AAclass%E7%B1%BB%E5%AF%B9%E8%B1%A1"}},[a._v("如何获得一个Class类对象")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8class%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9D%A5%E7%94%9F%E6%88%90%E7%9B%AE%E6%A0%87%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B"}},[a._v("使用Class类的对象来生成目标类的实例")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#object%E7%B1%BB"}},[a._v("Object类")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E7%B1%BB%E6%9E%84%E9%80%A0%E5%99%A8public-object"}},[a._v("类构造器public Object();")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#registernatives%E6%96%B9%E6%B3%95"}},[a._v("registerNatives()方法;")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#clone%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%8B%B7%E8%B4%9D"}},[a._v("Clone()方法实现浅拷贝")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#getclass%E6%96%B9%E6%B3%95"}},[a._v("getClass()方法")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#equals%E6%96%B9%E6%B3%95"}},[a._v("equals()方法")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#hashcode%E6%96%B9%E6%B3%95"}},[a._v("hashCode()方法;")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#tostring%E6%96%B9%E6%B3%95"}},[a._v("toString()方法")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#wait-notify-notifall"}},[a._v("wait() notify() notifAll()")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#finalize%E6%96%B9%E6%B3%95"}},[a._v("finalize()方法")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#class%E7%B1%BB%E5%92%8Cobject%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB"}},[a._v("CLass类和Object类的关系")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])]),a._v(" "),t("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),t("blockquote",[t("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),t("p",[a._v("喜欢的话麻烦点下Star哈")]),a._v(" "),t("p",[a._v("文章首发于我的个人博客：")]),a._v(" "),t("blockquote",[t("p",[a._v("www.how2playlife.com")])]),a._v(" "),t("p",[a._v("本文是微信公众号【Java技术江湖】的《夯实Java基础系列博文》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。\n该系列博文会告诉你如何从入门到进阶，一步步地学习Java基础知识，并上手进行实战，接着了解每个Java知识点背后的实现原理，更完整地了解整个Java技术体系，形成自己的知识框架。为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),a._v(" "),t("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),t("h2",{attrs:{id:"java中class类及用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java中class类及用法"}},[a._v("#")]),a._v(" Java中Class类及用法")]),a._v(" "),t("p",[a._v("Java程序在运行时，Java运行时系统一直对所有的对象进行所谓的运行时类型标识，即所谓的RTTI。")]),a._v(" "),t("blockquote",[t("p",[a._v("这项信息纪录了每个对象所属的类。虚拟机通常使用运行时类型信息选准正确方法去执行，用来保存这些类型信息的类是Class类。Class类封装一个对象和接口运行时的状态，当装载类时，Class类型的对象自动创建。")])]),a._v(" "),t("p",[a._v("说白了就是：")]),a._v(" "),t("blockquote",[t("p",[a._v("Class类也是类的一种，只是名字和class关键字高度相似。Java是大小写敏感的语言。")])]),a._v(" "),t("blockquote",[t("p",[a._v("Class类的对象内容是你创建的类的类型信息，比如你创建一个shapes类，那么，Java会生成一个内容是shapes的Class类的对象")])]),a._v(" "),t("blockquote",[t("p",[a._v("Class类的对象不能像普通类一样，以 new shapes() 的方式创建，它的对象只能由JVM创建，因为这个类没有public构造函数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    /*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n     //私有构造方法，只能由jvm进行实例化\n    private Class(ClassLoader loader) {\n        // Initialize final field for classLoader.  The initialization value of non-null\n        // prevents future JIT optimizations from assuming this final field is null.\n        classLoader = loader;\n    }\n")])])]),t("blockquote",[t("p",[a._v("Class类的作用是运行时提供或获得某个对象的类型信息，和C++中的typeid()函数类似。这些信息也可用于反射。")])]),a._v(" "),t("h3",{attrs:{id:"class类原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class类原理"}},[a._v("#")]),a._v(" Class类原理")]),a._v(" "),t("p",[a._v("看一下Class类的部分源码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('//Class类中封装了类型的各种信息。在jvm中就是通过Class类的实例来获取每个Java类的所有信息的。\n\npublic class Class类 {\n    Class aClass = null;\n\n//    private EnclosingMethodInfo getEnclosingMethodInfo() {\n//        Object[] enclosingInfo = getEnclosingMethod0();\n//        if (enclosingInfo == null)\n//            return null;\n//        else {\n//            return new EnclosingMethodInfo(enclosingInfo);\n//        }\n//    }\n\n    /**提供原子类操作\n     * Atomic operations support.\n     */\n//    private static class Atomic {\n//        // initialize Unsafe machinery here, since we need to call Class.class instance method\n//        // and have to avoid calling it in the static initializer of the Class class...\n//        private static final Unsafe unsafe = Unsafe.getUnsafe();\n//        // offset of Class.reflectionData instance field\n//        private static final long reflectionDataOffset;\n//        // offset of Class.annotationType instance field\n//        private static final long annotationTypeOffset;\n//        // offset of Class.annotationData instance field\n//        private static final long annotationDataOffset;\n//\n//        static {\n//            Field[] fields = Class.class.getDeclaredFields0(false); // bypass caches\n//            reflectionDataOffset = objectFieldOffset(fields, "reflectionData");\n//            annotationTypeOffset = objectFieldOffset(fields, "annotationType");\n//            annotationDataOffset = objectFieldOffset(fields, "annotationData");\n//        }\n\n        //提供反射信息\n    // reflection data that might get invalidated when JVM TI RedefineClasses() is called\n//    private static class ReflectionData<T> {\n//        volatile Field[] declaredFields;\n//        volatile Field[] publicFields;\n//        volatile Method[] declaredMethods;\n//        volatile Method[] publicMethods;\n//        volatile Constructor<T>[] declaredConstructors;\n//        volatile Constructor<T>[] publicConstructors;\n//        // Intermediate results for getFields and getMethods\n//        volatile Field[] declaredPublicFields;\n//        volatile Method[] declaredPublicMethods;\n//        volatile Class<?>[] interfaces;\n//\n//        // Value of classRedefinedCount when we created this ReflectionData instance\n//        final int redefinedCount;\n//\n//        ReflectionData(int redefinedCount) {\n//            this.redefinedCount = redefinedCount;\n//        }\n//    }\n        //方法数组\n//    static class MethodArray {\n//        // Don\'t add or remove methods except by add() or remove() calls.\n//        private Method[] methods;\n//        private int length;\n//        private int defaults;\n//\n//        MethodArray() {\n//            this(20);\n//        }\n//\n//        MethodArray(int initialSize) {\n//            if (initialSize < 2)\n//                throw new IllegalArgumentException("Size should be 2 or more");\n//\n//            methods = new Method[initialSize];\n//            length = 0;\n//            defaults = 0;\n//        }\n\n    //注解信息\n    // annotation data that might get invalidated when JVM TI RedefineClasses() is called\n//    private static class AnnotationData {\n//        final Map<Class<? extends Annotation>, Annotation> annotations;\n//        final Map<Class<? extends Annotation>, Annotation> declaredAnnotations;\n//\n//        // Value of classRedefinedCount when we created this AnnotationData instance\n//        final int redefinedCount;\n//\n//        AnnotationData(Map<Class<? extends Annotation>, Annotation> annotations,\n//                       Map<Class<? extends Annotation>, Annotation> declaredAnnotations,\n//                       int redefinedCount) {\n//            this.annotations = annotations;\n//            this.declaredAnnotations = declaredAnnotations;\n//            this.redefinedCount = redefinedCount;\n//        }\n//    }\n}\n')])])]),t("blockquote",[t("p",[a._v("我们都知道所有的java类都是继承了object这个类，在object这个类中有一个方法：getclass().这个方法是用来取得该类已经被实例化了的对象的该类的引用，这个引用指向的是Class类的对象。")]),a._v(" "),t("p",[a._v("我们自己无法生成一个Class对象（构造函数为private)，而 这个Class类的对象是在当各类被调入时，由 Java 虚拟机自动创建 Class 对象，或通过类装载器中的 defineClass 方法生成。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("//通过该方法可以动态地将字节码转为一个Class类对象\nprotected final Class<?> defineClass(String name, byte[] b, int off, int len)\n    throws ClassFormatError\n{\n    return defineClass(name, b, off, len, null);\n}\n")])])]),t("blockquote",[t("p",[a._v("我们生成的对象都会有个字段记录该对象所属类在CLass类的对象的所在位置。如下图所示：")])]),a._v(" "),t("p",[a._v("[外链图片转存失败(img-ZfMJTzO4-1569074134147)(http://dl.iteye.com/upload/picture/pic/101542/0047a6e9-6608-3c3c-a67c-d8ee95e7fcb8.jpg)]")]),a._v(" "),t("h3",{attrs:{id:"如何获得一个class类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何获得一个class类对象"}},[a._v("#")]),a._v(" 如何获得一个Class类对象")]),a._v(" "),t("p",[a._v("请注意，以下这些方法都是值、指某个类对应的Class对象已经在堆中生成以后，我们通过不同方式获取对这个Class对象的引用。而上面说的DefineClass才是真正将字节码加载到虚拟机的方法，会在堆中生成新的一个Class对象。")]),a._v(" "),t("p",[a._v("第一种办法，Class类的forName函数")]),a._v(" "),t("blockquote",[t("p",[a._v("public class shapes{}"),t("br"),a._v('\nClass obj= Class.forName("shapes");\n第二种办法，使用对象的getClass()函数')])]),a._v(" "),t("blockquote",[t("p",[a._v("public class shapes{}\nshapes s1=new shapes();\nClass obj=s1.getClass();\nClass obj1=s1.getSuperclass();//这个函数作用是获取shapes类的父类的类型")])]),a._v(" "),t("p",[a._v("第三种办法，使用类字面常量")]),a._v(" "),t("blockquote",[t("p",[a._v("Class obj=String.class;\nClass obj1=int.class;\n注意，使用这种办法生成Class类对象时，不会使JVM自动加载该类（如String类）。==而其他办法会使得JVM初始化该类。==")])]),a._v(" "),t("h3",{attrs:{id:"使用class类的对象来生成目标类的实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用class类的对象来生成目标类的实例"}},[a._v("#")]),a._v(" 使用Class类的对象来生成目标类的实例")]),a._v(" "),t("blockquote",[t("p",[a._v("生成不精确的object实例")])]),a._v(" "),t("p",[a._v("==获取一个Class类的对象后，可以用 newInstance() 函数来生成目标类的一个实例。然而，该函数并不能直接生成目标类的实例，只能生成object类的实例==")]),a._v(" "),t("blockquote",[t("p",[a._v('Class obj=Class.forName("shapes");\nObject ShapesInstance=obj.newInstance();\n使用泛化Class引用生成带类型的目标实例')])]),a._v(" "),t("blockquote",[t("p",[a._v("Class"),t("shapes",[a._v(" obj=shapes.class;\nshapes newShape=obj.newInstance();\n因为有了类型限制，所以使用泛化Class语法的对象引用不能指向别的类。")])],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("Class obj1=int.class;\nClass<Integer> obj2=int.class;\nobj1=double.class;\n//obj2=double.class; 这一行代码是非法的，obj2不能改指向别的类\n\n然而，有个灵活的用法，使得你可以用Class的对象指向基类的任何子类。\nClass<? extends Number> obj=int.class;\nobj=Number.class;\nobj=double.class;\n\n因此，以下语法生成的Class对象可以指向任何类。\nClass<?> obj=int.class;\nobj=double.class;\nobj=shapes.class;\n最后一个奇怪的用法是，当你使用这种泛型语法来构建你手头有的一个Class类的对象的基类对象时，必须采用以下的特殊语法\n\npublic class shapes{}\nclass round extends shapes{}\nClass<round> rclass=round.class;\nClass<? super round> sclass= rclass.getSuperClass();\n//Class<shapes> sclass=rclass.getSuperClass();\n我们明知道，round的基类就是shapes，但是却不能直接声明 Class < shapes >，必须使用特殊语法\n\nClass < ? super round >\n")])])]),t("p",[a._v("这个记住就可以啦。")]),a._v(" "),t("h2",{attrs:{id:"object类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object类"}},[a._v("#")]),a._v(" Object类")]),a._v(" "),t("p",[a._v("这部分主要参考http://ihenu.iteye.com/blog/2233249")]),a._v(" "),t("p",[a._v("Object类是Java中其他所有类的祖先，没有Object类Java面向对象无从谈起。作为其他所有类的基类，Object具有哪些属性和行为，是Java语言设计背后的思维体现。")]),a._v(" "),t("p",[a._v("Object类位于java.lang包中，java.lang包包含着Java最基础和核心的类，在编译时会自动导入。Object类没有定义属性，一共有13个方法，13个方法之中并不是所有方法都是子类可访问的，一共有9个方法是所有子类都继承了的。")]),a._v(" "),t("p",[a._v("先大概介绍一下这些方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1．clone方法\n保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。\n2．getClass方法\nfinal方法，获得运行时类型。\n3．toString方法\n该方法用得比较多，一般子类都有覆盖。\n4．finalize方法\n该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。\n5．equals方法\n该方法是非常重要的一个方法。一般equals和==是不一样的，但是在Object中两者是一样的。子类一般都要重写这个方法。\n6．hashCode方法\n该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。\n一般必须满足obj1.equals(obj2)==true。可以推出obj1.hash- Code()==obj2.hashCode()，但是hashCode相等不一定就满足equals。不过为了提高效率，应该尽量使上面两个条件接近等价。\n7．wait方法\nwait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。\n调用该方法后当前线程进入睡眠状态，直到以下事件发生。\n（1）其他线程调用了该对象的notify方法。\n（2）其他线程调用了该对象的notifyAll方法。\n（3）其他线程调用了interrupt中断该线程。\n（4）时间间隔到了。\n此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。\n8．notify方法\n该方法唤醒在该对象上等待的某个线程。\n9．notifyAll方法\n该方法唤醒在该对象上等待的所有线程。\n")])])]),t("h3",{attrs:{id:"类构造器public-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类构造器public-object"}},[a._v("#")]),a._v(" 类构造器public Object();")]),a._v(" "),t("blockquote",[t("p",[a._v("大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。其中A即是类名，A(args..)即此类定义中相对应的构造函数。通过此种形式创建的对象都是通过类中的构造函数完成。")])]),a._v(" "),t("blockquote",[t("p",[a._v("为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，但实际上，此构造函数是存在的。")]),a._v(" "),t("p",[a._v("当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是public。")])]),a._v(" "),t("h3",{attrs:{id:"registernatives-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#registernatives-方法"}},[a._v("#")]),a._v(" registerNatives()方法;")]),a._v(" "),t("p",[a._v("private static native void registerNatives();")]),a._v(" "),t("blockquote",[t("p",[a._v("registerNatives函数前面有native关键字修饰，Java中，用native关键字修饰的函数表明该方法的实现并不是在Java中去完成，而是由C/C++去完成，并被编译成了.dll，由Java去调用。")]),a._v(" "),t("p",[a._v("方法的具体实现体在dll文件中，对于不同平台，其具体实现应该有所不同。用native修饰，即表示操作系统，需要提供此方法，Java本身需要使用。")]),a._v(" "),t("p",[a._v("具体到registerNatives()方法本身，其主要作用是将C/C++中的方法映射到Java中的native方法，实现方法命名的解耦。")]),a._v(" "),t("p",[a._v("既然如此，可能有人会问，registerNatives()修饰符为private，且并没有执行，作用何以达到？其实，在Java源码中，此方法的声明后有紧接着一段静态代码块：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("private static native void registerNatives();  \nstatic {  \n     registerNatives();  \n}  \n")])])]),t("h3",{attrs:{id:"clone-方法实现浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone-方法实现浅拷贝"}},[a._v("#")]),a._v(" Clone()方法实现浅拷贝")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("protected native Object clone() throwsCloneNotSupportedException;\n")])])]),t("blockquote",[t("p",[a._v('看，clode()方法又是一个被声明为native的方法，因此，我们知道了clone()方法并不是Java的原生方法，具体的实现是有C/C++完成的。clone英文翻译为"克隆"，其目的是创建并返回此对象的一个副本。')])]),a._v(" "),t("blockquote",[t("p",[a._v("形象点理解，这有一辆科鲁兹，你看着不错，想要个一模一样的。你调用此方法即可像变魔术一样变出一辆一模一样的科鲁兹出来。配置一样，长相一样。但从此刻起，原来的那辆科鲁兹如果进行了新的装饰，与你克隆出来的这辆科鲁兹没有任何关系了。")]),a._v(" "),t("p",[a._v("你克隆出来的对象变不变完全在于你对克隆出来的科鲁兹有没有进行过什么操作了。Java术语表述为：clone函数返回的是一个引用，指向的是新的clone出来的对象，此对象与原对象分别占用不同的堆空间。")])]),a._v(" "),t("p",[a._v("明白了clone的含义后，接下来看看如果调用clone()函数对象进行此克隆操作。")]),a._v(" "),t("p",[a._v("首先看一下下面的这个例子：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("package com.corn.objectsummary;  \n  \nimport com.corn.Person;  \n  \npublic class ObjectTest {  \n  \n    public static void main(String[] args) {  \n  \n        Object o1 = new Object();  \n        // The method clone() from the type Object is not visible  \n        Object clone = o1.clone();  \n    }  \n  \n}  \n")])])]),t("blockquote",[t("p",[a._v('例子很简单，在main()方法中，new一个Oject对象后，想直接调用此对象的clone方法克隆一个对象，但是出现错误提示："The method clone() from the type Object is not visible"')]),a._v(" "),t("p",[a._v("why? 根据提示，第一反应是ObjectTest类中定义的Oject对象无法访问其clone()方法。回到Object类中clone()方法的定义，可以看到其被声明为protected，估计问题就在这上面了，protected修饰的属性或方法表示：在同一个包内或者不同包的子类可以访问。")]),a._v(" "),t("p",[a._v('显然，Object类与ObjectTest类在不同的包中，但是ObjectTest继承自Object，是Object类的子类，于是，现在却出现子类中通过Object引用不能访问protected方法，原因在于对"不同包中的子类可以访问"没有正确理解。')]),a._v(" "),t("p",[a._v('"不同包中的子类可以访问"，是指当两个类不在同一个包中的时候，继承自父类的子类内部且主调（调用者）为子类的引用时才能访问父类用protected修饰的成员（属性/方法）。 在子类内部，主调为父类的引用时并不能访问此protected修饰的成员。！（super关键字除外）')])]),a._v(" "),t("p",[a._v("于是，上例改成如下形式，我们发现，可以正常编译：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    public class clone方法 {\n    public static void main(String[] args) {\n\n    }\n    public void test1() {\n\n        User user = new User();\n//        User copy = user.clone();\n    }\n    public void test2() {\n        User user = new User();\n//        User copy = (User)user.clone();\n    }\n}\n")])])]),t("p",[a._v("是的，因为此时的主调已经是子类的引用了。")]),a._v(" "),t("blockquote",[t("p",[a._v('上述代码在运行过程中会抛出"java.lang.CloneNotSupportedException",表明clone()方法并未正确执行完毕，问题的原因在与Java中的语法规定：')]),a._v(" "),t("p",[a._v("clone()的正确调用是需要实现Cloneable接口，如果没有实现Cloneable接口，并且子类直接调用Object类的clone()方法，则会抛出CloneNotSupportedException异常。")]),a._v(" "),t("p",[a._v("Cloneable接口仅是一个表示接口，接口本身不包含任何方法，用来指示Object.clone()可以合法的被子类引用所调用。")]),a._v(" "),t("p",[a._v("于是，上述代码改成如下形式，即可正确指定clone()方法以实现克隆。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public class User implements Cloneable{\npublic int id;\npublic String name;\npublic UserInfo userInfo;\n\npublic static void main(String[] args) {\n    User user = new User();\n    UserInfo userInfo = new UserInfo();\n    user.userInfo = userInfo;\n    System.out.println(user);\n    System.out.println(user.userInfo);\n    try {\n        User copy = (User) user.clone();\n        System.out.println(copy);\n        System.out.println(copy.userInfo);\n    } catch (CloneNotSupportedException e) {\n        e.printStackTrace();\n    }\n}\n//拷贝的User实例与原来不一样，是两个对象。\n//    com.javase.Class和Object.Object方法.用到的类.User@4dc63996\n//    com.javase.Class和Object.Object方法.用到的类.UserInfo@d716361\n        //而拷贝后对象的userinfo引用对象是同一个。\n    //所以这是浅拷贝\n//    com.javase.Class和Object.Object方法.用到的类.User@6ff3c5b5\n//    com.javase.Class和Object.Object方法.用到的类.UserInfo@d716361\n}\n")])])]),t("p",[a._v("总结：\nclone方法实现的是浅拷贝，只拷贝当前对象，并且在堆中分配新的空间，放这个复制的对象。但是对象如果里面有其他类的子对象，那么就不会拷贝到新的对象中。")]),a._v(" "),t("p",[a._v("==深拷贝和浅拷贝的区别==")]),a._v(" "),t("blockquote",[t("p",[a._v("浅拷贝\n浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。")]),a._v(" "),t("p",[a._v("深拷贝\n深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。\n现在为了要在clone对象时进行深拷贝， 那么就要Clonable接口，覆盖并实现clone方法，除了调用父类中的clone方法得到新的对象， 还要将该类中的引用变量也clone出来。如果只是用Object中默认的clone方法，是浅拷贝的。")])]),a._v(" "),t("p",[a._v("那么这两种方式有什么相同和不同呢？")]),a._v(" "),t("blockquote",[t("p",[a._v("new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。")]),a._v(" "),t("p",[a._v("分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。")]),a._v(" "),t("p",[a._v("而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域，")]),a._v(" "),t("p",[a._v("填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。")])]),a._v(" "),t("p",[a._v("==也就是说，一个对象在浅拷贝以后，只是把对象复制了一份放在堆空间的另一个地方，但是成员变量如果有引用指向其他对象，这个引用指向的对象和被拷贝的对象中引用指向的对象是一样的。当然，基本数据类型还是会重新拷贝一份的。==")]),a._v(" "),t("h3",{attrs:{id:"getclass-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getclass-方法"}},[a._v("#")]),a._v(" getClass()方法")]),a._v(" "),t("p",[a._v("4.public final native Class<?> getClass();")]),a._v(" "),t("blockquote",[t("p",[a._v("getClass()也是一个native方法，返回的是此Object对象的类对象/运行时类对象Class<?>。效果与Object.class相同。")]),a._v(" "),t("p",[a._v('首先解释下"类对象"的概念：在Java中，类是是对具有一组相同特征或行为的实例的抽象并进行描述，对象则是此类所描述的特征或行为的具体实例。')]),a._v(" "),t("p",[a._v("作为概念层次的类，其本身也具有某些共同的特性，如都具有类名称、由类加载器去加载，都具有包，具有父类，属性和方法等。")]),a._v(" "),t("p",[a._v('于是，Java中有专门定义了一个类，Class，去描述其他类所具有的这些特性，因此，从此角度去看，类本身也都是属于Class类的对象。为与经常意义上的对象相区分，在此称之为"类对象"。')])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public class getClass方法 {\n    public static void main(String[] args) {\n        User user = new User();\n        //getclass方法是native方法，可以取到堆区唯一的Class<User>对象\n        Class<?> aClass = user.getClass();\n        Class bClass = User.class;\n        try {\n            Class cClass = Class.forName("com.javase.Class和Object.Object方法.用到的类.User");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        System.out.println(aClass);\n        System.out.println(bClass);\n//        class com.javase.Class和Object.Object方法.用到的类.User\n//        class com.javase.Class和Object.Object方法.用到的类.User\n        try {\n            User a = (User) aClass.newInstance();\n\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n} \n')])])]),t("p",[a._v("此处主要大量涉及到Java中的反射知识")]),a._v(" "),t("h3",{attrs:{id:"equals-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#equals-方法"}},[a._v("#")]),a._v(" equals()方法")]),a._v(" "),t("p",[a._v("5.public boolean equals(Object obj);")]),a._v(" "),t("blockquote",[t("p",[a._v("与equals在Java中经常被使用，大家也都知道与equals的区别：")]),a._v(" "),t("p",[a._v("==表示的是变量值完成相同（对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址）；")]),a._v(" "),t("p",[a._v("equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。")])]),a._v(" "),t("p",[a._v("实际上，上面说法是不严谨的，更多的只是常见于String类中。首先看一下Object类中关于equals()方法的定义：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public boolean equals(Object obj) {  \n     return (this == obj);  \n}  \n")])])]),t("blockquote",[t("p",[a._v("由此可见，Object原生的equals()方法内部调用的正是==，与==具有相同的含义。既然如此，为什么还要定义此equals()方法？")]),a._v(" "),t("p",[a._v("equals()方法的正确理解应该是：判断两个对象是否相等。那么判断对象相等的标尺又是什么？")]),a._v(" "),t("p",[a._v("如上，在object类中，此标尺即为==。当然，这个标尺不是固定的，其他类中可以按照实际的需要对此标尺含义进行重定义。如String类中则是依据字符串内容是否相等来重定义了此标尺含义。如此可以增加类的功能型和实际编码的灵活性。当然了，如果自定义的类没有重写equals()方法来重新定义此标尺，那么默认的将是其父类的equals()，直到object基类。")]),a._v(" "),t("p",[a._v("如下场景的实际业务需求，对于User bean，由实际的业务需求可知当属性uid相同时，表示的是同一个User，即两个User对象相等。则可以重写equals以重定义User对象相等的标尺。")])]),a._v(" "),t("p",[a._v("ObjectTest中打印出true，因为User类定义中重写了equals()方法，这很好理解，很可能张三是一个人小名，张三丰才是其大名，判断这两个人是不是同一个人，这时只用判断uid是否相同即可。")]),a._v(" "),t("blockquote",[t("p",[a._v("如上重写equals方法表面上看上去是可以了，实则不然。因为它破坏了Java中的约定：重写equals()方法必须重写hasCode()方法。")])]),a._v(" "),t("h3",{attrs:{id:"hashcode-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-方法"}},[a._v("#")]),a._v(" hashCode()方法;")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("public native int hashCode()")])]),a._v(" "),t("p",[a._v("hashCode()方法返回一个整形数值，表示该对象的哈希码值。")]),a._v(" "),t("p",[a._v("hashCode()具有如下约定：")]),a._v(" "),t("blockquote",[t("p",[a._v("1).在Java应用程序程序执行期间，对于同一对象多次调用hashCode()方法时，其返回的哈希码是相同的，前提是将对象进行equals比较时所用的标尺信息未做修改。在Java应用程序的一次执行到另外一次执行，同一对象的hashCode()返回的哈希码无须保持一致；")]),a._v(" "),t("p",[a._v("2).如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；")]),a._v(" "),t("p",[a._v("3).反之，两个对象调用hasCode()返回的哈希码相等，这两个对象不一定相等。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("即严格的数学逻辑表示为： 两个对象相等 <=>  equals()相等  => hashCode()相等。因此，重写equlas()方法必须重写hashCode()方法，以保证此逻辑严格成立，同时可以推理出：hasCode()不相等 => equals（）不相等 <=> 两个对象不相等。\n \n可能有人在此产生疑问：既然比较两个对象是否相等的唯一条件（也是冲要条件）是equals，那么为什么还要弄出一个hashCode()，并且进行如此约定，弄得这么麻烦？\n \n其实，这主要体现在hashCode()方法的作用上，其主要用于增强哈希表的性能。\n \n以集合类中，以Set为例，当新加一个对象时，需要判断现有集合中是否已经存在与此对象相等的对象，如果没有hashCode()方法，需要将Set进行一次遍历，并逐一用equals()方法判断两个对象是否相等，此种算法时间复杂度为o(n)。通过借助于hasCode方法，先计算出即将新加入对象的哈希码，然后根据哈希算法计算出此对象的位置，直接判断此位置上是否已有对象即可。（注：Set的底层用的是Map的原理实现）\n")])])]),t("blockquote",[t("p",[a._v("在此需要纠正一个理解上的误区：对象的hashCode()返回的不是对象所在的物理内存地址。甚至也不一定是对象的逻辑地址，hashCode()相同的两个对象，不一定相等，换言之，不相等的两个对象，hashCode()返回的哈希码可能相同。")]),a._v(" "),t("p",[a._v("因此，在上述代码中，重写了equals()方法后，需要重写hashCode()方法。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public class equals和hashcode方法 {\n    @Override\n    //修改equals时必须同时修改hashcode方法，否则在作为key时会出问题\n    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n    \n    @Override\n    //相同的对象必须有相同hashcode，不同对象可能有相同hashcode\n    public int hashCode() {\n        return hashCode() >> 2;\n    }\n}\n")])])]),t("h3",{attrs:{id:"tostring-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tostring-方法"}},[a._v("#")]),a._v(" toString()方法")]),a._v(" "),t("p",[a._v("7.public String toString();")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('toString()方法返回该对象的字符串表示。先看一下Object中的具体方法体：\n\n public String toString() {  \n    return getClass().getName() + "@" + Integer.toHexString(hashCode());  \n}  \n')])])]),t("blockquote",[t("p",[a._v("toString()方法相信大家都经常用到，即使没有显式调用，但当我们使用System.out.println(obj)时，其内部也是通过toString()来实现的。")]),a._v(" "),t("p",[a._v("getClass()返回对象的类对象，getClassName()以String形式返回类对象的名称（含包名）。Integer.toHexString(hashCode())则是以对象的哈希码为实参，以16进制无符号整数形式返回此哈希码的字符串表示形式。")]),a._v(" "),t("p",[a._v("如上例中的u1的哈希码是638，则对应的16进制为27e，调用toString()方法返回的结果为：com.corn.objectsummary.User@27e。")]),a._v(" "),t("p",[a._v("因此：toString()是由对象的类型和其哈希码唯一确定，同一类型但不相等的两个对象分别调用toString()方法返回的结果可能相同。")])]),a._v(" "),t("h3",{attrs:{id:"wait-notify-notifall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wait-notify-notifall"}},[a._v("#")]),a._v(" wait() notify() notifAll()")]),a._v(" "),t("p",[a._v("8/9/10/11/12. wait(...) / notify() / notifyAll()")]),a._v(" "),t("blockquote",[t("p",[a._v("一说到wait(...) / notify() | notifyAll()几个方法，首先想到的是线程。确实，这几个方法主要用于java多线程之间的协作。先具体看下这几个方法的主要含义：")]),a._v(" "),t("p",[a._v("wait()：调用此方法所在的当前线程等待，直到在其他线程上调用此方法的主调（某一对象）的notify()/notifyAll()方法。")]),a._v(" "),t("p",[a._v("wait(long timeout)/wait(long timeout, int nanos)：调用此方法所在的当前线程等待，直到在其他线程上调用此方法的主调（某一对象）的notisfy()/notisfyAll()方法，或超过指定的超时时间量。")]),a._v(" "),t("p",[a._v("notify()/notifyAll()：唤醒在此对象监视器上等待的单个线程/所有线程。")]),a._v(" "),t("p",[a._v("wait(...) / notify() | notifyAll()一般情况下都是配套使用。下面来看一个简单的例子：")])]),a._v(" "),t("p",[a._v("这是一个生产者消费者的模型，只不过这里只用flag来标识哪个线程需要工作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public class wait和notify {\n    //volatile保证线程可见性\n    volatile static int flag = 1;\n    //object作为锁对象，用于线程使用wait和notify方法\n    volatile static Object o = new Object();\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //wait和notify只能在同步代码块内使用\n                synchronized (o) {\n                    while (true) {\n                        if (flag == 0) {\n                            try {\n                                Thread.sleep(2000);\n                                System.out.println("thread1 wait");\n                                //释放锁，线程挂起进入object的等待队列，后续代码运行\n                                o.wait();\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        System.out.println("thread1 run");\n                        System.out.println("notify t2");\n                        flag = 0;\n                        //通知等待队列的一个线程获取锁\n                        o.notify();\n                    }\n                }\n            }\n        }).start();\n        //解释同上\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true) {\n                    synchronized (o) {\n                        if (flag == 1) {\n                            try {\n                                Thread.sleep(2000);\n                                System.out.println("thread2 wait");\n                                o.wait();\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        System.out.println("thread2 run");\n                        System.out.println("notify t1");\n                        flag = 1;\n                        o.notify();\n                    }\n                }\n            }\n        }).start();\n    }\n\n    //输出结果是\n//    thread1 run\n//    notify t2\n//    thread1 wait\n//    thread2 run\n//    notify t1\n//    thread2 wait\n//    thread1 run\n//    notify t2\n//不断循环\n}\n')])])]),t("blockquote",[t("p",[a._v("从上述例子的输出结果中可以得出如下结论：")]),a._v(" "),t("p",[a._v("1、wait(...)方法调用后当前线程将立即阻塞，且适当其所持有的同步代码块中的锁，直到被唤醒或超时或打断后且重新获取到锁后才能继续执行；")]),a._v(" "),t("p",[a._v("2、notify()/notifyAll()方法调用后，其所在线程不会立即释放所持有的锁，直到其所在同步代码块中的代码执行完毕，此时释放锁，因此，如果其同步代码块后还有代码，其执行则依赖于JVM的线程调度。")])]),a._v(" "),t("p",[a._v("在Java源码中，可以看到wait()具体定义如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public final void wait() throws InterruptedException {  \n     wait(0);  \n}  \n")])])]),t("blockquote",[t("p",[a._v("且wait(long timeout, int nanos)方法定义内部实质上也是通过调用wait(long timeout)完成。而wait(long timeout)是一个native方法。因此，wait(...)方法本质上都是native方式实现。")])]),a._v(" "),t("p",[a._v("notify()/notifyAll()方法也都是native方法。")]),a._v(" "),t("p",[a._v("Java中线程具有较多的知识点，是一块比较大且重要的知识点。后期会有博文专门针对Java多线程作出详细总结。此处不再细述。")]),a._v(" "),t("h3",{attrs:{id:"finalize-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finalize-方法"}},[a._v("#")]),a._v(" finalize()方法")]),a._v(" "),t("ol",{attrs:{start:"13"}},[t("li",[a._v("protected void finalize();")])]),a._v(" "),t("p",[a._v("finalize方法主要与Java垃圾回收机制有关。首先我们看一下finalized方法在Object中的具体定义：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("protected void finalize() throws Throwable { }  \n")])])]),t("blockquote",[t("p",[a._v("我们发现Object类中finalize方法被定义成一个空方法，为什么要如此定义呢？finalize方法的调用时机是怎么样的呢？")]),a._v(" "),t("p",[a._v("首先，Object中定义finalize方法表明Java中每一个对象都将具有finalize这种行为，其具体调用时机在：JVM准备对此对形象所占用的内存空间进行垃圾回收前，将被调用。由此可以看出，此方法并不是由我们主动去调用的（虽然可以主动去调用，此时与其他自定义方法无异）。")])]),a._v(" "),t("h2",{attrs:{id:"class类和object类的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class类和object类的关系"}},[a._v("#")]),a._v(" CLass类和Object类的关系")]),a._v(" "),t("blockquote",[t("p",[a._v("Object类和Class类没有直接的关系。")]),a._v(" "),t("p",[a._v("Object类是一切java类的父类，对于普通的java类，即便不声明，也是默认继承了Object类。典型的，可以使用Object类中的toString()方法。")]),a._v(" "),t("p",[a._v("Class类是用于java反射机制的，一切java类，都有一个对应的Class对象，他是一个final类。Class 类的实例表示，正在运行的 Java 应用程序中的类和接口。")])]),a._v(" "),t("p",[a._v("转一个知乎很有趣的问题\nhttps://www.zhihu.com/question/30301819")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("Java的对象模型中：\n1 所有的类都是Class类的实例，Object是类，那么Object也是Class类的一个实例。\n\n2 所有的类都最终继承自Object类，Class是类，那么Class也继承自Object。\n\n3 这就像是先有鸡还是先有蛋的问题，请问实际中JVM是怎么处理的？\n")])])]),t("blockquote",[t("p",[a._v("这个问题中，第1个假设是错的：java.lang.Object是一个Java类，但并不是java.lang.Class的一个实例。后者只是一个用于描述Java类与接口的、用于支持反射操作的类型。这点上Java跟其它一些更纯粹的面向对象语言（例如Python和Ruby）不同。")]),a._v(" "),t("p",[a._v("而第2个假设是对的：java.lang.Class是java.lang.Object的派生类，前者继承自后者。虽然第1个假设不对，但“鸡蛋问题”仍然存在：在一个已经启动完毕、可以使用的Java对象系统里，必须要有一个java.lang.Class实例对应java.lang.Object这个类；而java.lang.Class是java.lang.Object的派生类，按“一般思维”前者应该要在后者完成初始化之后才可以初始化…")]),a._v(" "),t("p",[a._v("事实是：这些相互依赖的核心类型完全可以在“混沌”中一口气都初始化好，然后对象系统的状态才叫做完成了“bootstrap”，后面就可以按照Java对象系统的一般规则去运行。JVM、JavaScript、Python、Ruby等的运行时都有这样的bootstrap过程。")]),a._v(" "),t("p",[a._v("在“混沌”（boostrap过程）里，JVM可以为对象系统中最重要的一些核心类型先分配好内存空间，让它们进入[已分配空间]但[尚未完全初始化]状态。此时这些对象虽然已经分配了空间，但因为状态还不完整所以尚不可使用。")]),a._v(" "),t("p",[a._v("然后，通过这些分配好的空间把这些核心类型之间的引用关系串好。到此为止所有动作都由JVM完成，尚未执行任何Java字节码。然后这些核心类型就进入了[完全初始化]状态，对象系统就可以开始自我运行下去，也就是可以开始执行Java字节码来进一步完成Java系统的初始化了。")])]),a._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),t("p",[a._v("https://www.cnblogs.com/congsg2016/p/5317362.html\nhttps://www.jb51.net/article/125936.htm\nhttps://blog.csdn.net/dufufd/article/details/80537638\nhttps://blog.csdn.net/farsight1/article/details/80664104\nhttps://blog.csdn.net/xiaomingdetianxia/article/details/77429180")]),a._v(" "),t("h2",{attrs:{id:"微信公众号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),t("h3",{attrs:{id:"java技术江湖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),t("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),t("p",[t("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),t("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),t("h3",{attrs:{id:"个人公众号-黄小斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),t("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),t("p",[t("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),t("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);e.default=n.exports}}]);