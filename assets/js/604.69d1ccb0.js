(window.webpackJsonp=window.webpackJsonp||[]).push([[604],{993:function(a,s,t){"use strict";t.r(s);var n=t(13),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"table-of-contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%AE%9E%E6%88%98%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8"}},[a._v("实战内存溢出异常")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#1--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B"}},[a._v("1 . 对象的创建过程")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#2--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80"}},[a._v("2 . 对象的内存布局")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#3--%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D"}},[a._v("3 . 对象的访问定位")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#4-%E5%AE%9E%E6%88%98%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8"}},[a._v("4 .实战内存异常")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E5%A0%86%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8"}},[a._v("Java堆内存异常")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#java%E6%A0%88%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8"}},[a._v("Java栈内存异常")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%8C%BA%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8"}},[a._v("方法区内存异常")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%8C%BA%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0oom"}},[a._v("方法区与运行时常量池OOM")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E9%99%84%E5%8A%A0-%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8"}},[a._v("附加-直接内存异常")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F"}},[a._v("Java内存泄漏")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#java%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%EF%BC%9F"}},[a._v("Java是如何管理内存？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AFjava%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%EF%BC%9F"}},[a._v("什么是Java中的内存泄露？")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F"}},[a._v("其他常见内存泄漏")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#1%E3%80%81%E9%9D%99%E6%80%81%E9%9B%86%E5%90%88%E7%B1%BB%E5%BC%95%E8%B5%B7%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%EF%BC%9A"}},[a._v("1、静态集合类引起内存泄露：")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#2%E3%80%81%E5%BD%93%E9%9B%86%E5%90%88%E9%87%8C%E9%9D%A2%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%A2%AB%E4%BF%AE%E6%94%B9%E5%90%8E%EF%BC%8C%E5%86%8D%E8%B0%83%E7%94%A8remove%EF%BC%88%EF%BC%89%E6%96%B9%E6%B3%95%E6%97%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E3%80%82"}},[a._v("2、当集合里面的对象属性被修改后，再调用remove（）方法时不起作用。")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#3%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8"}},[a._v("3、监听器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#4%E3%80%81%E5%90%84%E7%A7%8D%E8%BF%9E%E6%8E%A5"}},[a._v("4、各种连接")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#5%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%A4%96%E9%83%A8%E6%A8%A1%E5%9D%97%E7%AD%89%E7%9A%84%E5%BC%95%E7%94%A8"}},[a._v("5、内部类和外部模块等的引用")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#6%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"}},[a._v("6、单例模式")])])])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F"}},[a._v("如何检测内存泄漏")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])]),a._v(" "),t("p",[a._v("本文转自互联网，侵删")]),a._v(" "),t("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),t("blockquote",[t("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),t("p",[a._v("喜欢的话麻烦点下Star哈")]),a._v(" "),t("p",[a._v("文章将同步到我的个人博客：")]),a._v(" "),t("blockquote",[t("p",[a._v("www.how2playlife.com")])]),a._v(" "),t("p",[a._v("本文是微信公众号【Java技术江湖】的《深入理解JVM虚拟机》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),a._v(" "),t("p",[a._v("该系列博文会告诉你如何从入门到进阶，一步步地学习JVM基础知识，并上手进行JVM调优实战，JVM是每一个Java工程师必须要学习和理解的知识点，你必须要掌握其实现原理，才能更完整地了解整个Java技术体系，形成自己的知识框架。")]),a._v(" "),t("p",[a._v("为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),a._v(" "),t("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),t("h2",{attrs:{id:"实战内存溢出异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战内存溢出异常"}},[a._v("#")]),a._v(" 实战内存溢出异常")]),a._v(" "),t("p",[a._v("大家好，相信大部分Javaer在code时经常会遇到本地代码运行正常，但在生产环境偶尔会莫名其妙的报一些关于内存的异常，StackOverFlowError,OutOfMemoryError异常是最常见的。今天就基于上篇文章JVM系列之Java内存结构详解讲解的各个内存区域重点实战分析下内存溢出的情况。在此之前，我还是想多余累赘一些其他关于对象的问题，具体内容如下:")]),a._v(" "),t("blockquote",[t("p",[a._v("文章结构：\n对象的创建过程\n对象的内存布局\n对象的访问定位\n实战内存异常")])]),a._v(" "),t("h2",{attrs:{id:"_1-对象的创建过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象的创建过程"}},[a._v("#")]),a._v(" 1 . 对象的创建过程")]),a._v(" "),t("p",[a._v("关于对象的创建，第一反应是new关键字，那么本文就主要讲解new关键字创建对象的过程。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Student stu =new Student("张三"，"18");\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("就拿上面这句代码来说，虚拟机首先会去检查Student这个类有没有被加载，如果没有，首先去加载这个类到方法区，然后根据加载的Class类对象创建stu实例对象，需要注意的是，stu对象所需的内存大小在Student类加载完成后便可完全确定。内存分配完成后，虚拟机需要将分配到的内存空间的实例数据部分初始化为零值,这也就是为什么我们在编写Java代码时创建一个变量不需要初始化。紧接着，虚拟机会对对象的对象头进行必要的设置，如这个对象属于哪个类，如何找到类的元数据(Class对象),对象的锁信息，GC分代年龄等。设置完对象头信息后，调用类的构造函数。\n其实讲实话，虚拟机创建对象的过程远不止这么简单，我这里只是把大致的脉络讲解了一下，方便大家理解。")]),a._v(" "),t("h2",{attrs:{id:"_2-对象的内存布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象的内存布局"}},[a._v("#")]),a._v(" 2 . 对象的内存布局")]),a._v(" "),t("p",[a._v("刚刚提到的实例数据，对象头，有些小伙伴也许有点陌生，这一小节就详细讲解一下对象的内存布局,对象创建完成后大致可以分为以下几个部分:")]),a._v(" "),t("ul",[t("li",[a._v("对象头")]),a._v(" "),t("li",[a._v("实例数据")]),a._v(" "),t("li",[a._v("对齐填充")])]),a._v(" "),t("p",[t("strong",[a._v("对象头:")]),a._v(" 对象头中包含了对象运行时一些必要的信息，如GC分代信息，锁信息，哈希码，指向Class类元信息的指针等，其中对Javaer比较有用的是"),t("strong",[a._v("锁信息与指向Class对象的指针")]),a._v("，关于锁信息，后期有机会讲解并发编程JUC时再扩展，关于指向Class对象的指针其实很好理解。比如上面那个Student的例子，当我们拿到stu对象时，调用Class stuClass=stu.getClass();的时候，其实就是根据这个指针去拿到了stu对象所属的Student类在方法区存放的Class类对象。虽然说的有点拗口，但这句话我反复琢磨了好几遍，应该是说清楚了。")]),a._v(" "),t("p",[t("strong",[a._v("实例数据:")]),a._v(" 实例数据部分是对象真正存储的有效信息，就是程序代码中所定义的各种类型的字段内容。")]),a._v(" "),t("p",[t("strong",[a._v("对齐填充:")]),a._v(" 虚拟机规范要求对象大小必须是8字节的整数倍。对齐填充其实就是来补全对象大小的。")]),a._v(" "),t("h2",{attrs:{id:"_3-对象的访问定位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象的访问定位"}},[a._v("#")]),a._v(" 3 . 对象的访问定位")]),a._v(" "),t("p",[a._v("谈到对象的访问，还拿上面学生的例子来说，当我们拿到stu对象时，直接调用stu.getName();时，其实就完成了对对象的访问。但这里要累赘说一下的是，stu虽然通常被认为是一个对象，其实准确来说是不准确的，stu只是一个变量，变量里存储的是指向对象的指针，(如果干过C或者C++的小伙伴应该比较清楚指针这个概念)，当我们调用stu.getName()时，虚拟机会根据指针找到堆里面的对象然后拿到实例数据name.需要注意的是，当我们调用stu.getClass()时，虚拟机会首先根据stu指针定位到堆里面的对象，然后根据对象头里面存储的指向Class类元信息的指针再次到方法区拿到Class对象，进行了两次指针寻找。具体讲解图如下:\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/201901092235030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MjczMg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"_4-实战内存异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-实战内存异常"}},[a._v("#")]),a._v(" 4 .实战内存异常")]),a._v(" "),t("p",[a._v("内存异常是我们工作当中经常会遇到问题，但如果仅仅会通过加大内存参数来解决问题显然是不够的，应该通过一定的手段定位问题，到底是因为参数问题，还是程序问题(无限创建，内存泄露)。定位问题后才能采取合适的解决方案，而不是一内存溢出就查找相关参数加大。")]),a._v(" "),t("blockquote",[t("p",[a._v("概念\n内存泄露:代码中的某个对象本应该被虚拟机回收，但因为拥有GCRoot引用而没有被回收。关于GCRoot概念，下一篇文章讲解。\n内存溢出: 虚拟机由于堆中拥有太多不可回收对象没有回收，导致无法继续创建新对象。")])]),a._v(" "),t("p",[a._v("在分析问题之前先给大家讲一讲排查内存溢出问题的方法，内存溢出时JVM虚拟机会退出，"),t("strong",[a._v("那么我们怎么知道JVM运行时的各种信息呢，Dump机制会帮助我们，可以通过加上VM参数-XX:+HeapDumpOnOutOfMemoryError让虚拟机在出现内存溢出异常时生成dump文件，然后通过外部工具(作者使用的是VisualVM)来具体分析异常的原因。")])]),a._v(" "),t("p",[a._v("下面从以下几个方面来配合代码实战演示内存溢出及如何定位:")]),a._v(" "),t("ul",[t("li",[a._v("Java堆内存异常")]),a._v(" "),t("li",[a._v("Java栈内存异常")]),a._v(" "),t("li",[a._v("方法区内存异常")])]),a._v(" "),t("h3",{attrs:{id:"java堆内存异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java堆内存异常"}},[a._v("#")]),a._v(" Java堆内存异常")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n    VM Args:\n    //这两个参数保证了堆中的可分配内存固定为20M\n    -Xms20m\n    -Xmx20m  \n    //文件生成的位置，作则生成在桌面的一个目录\n    -XX:+HeapDumpOnOutOfMemoryError //文件生成的位置，作则生成在桌面的一个目录\n    //文件生成的位置，作则生成在桌面的一个目录\n    -XX:HeapDumpPath=/Users/zdy/Desktop/dump/ \n */\npublic class HeapOOM {\n    //创建一个内部类用于创建对象使用\n    static class OOMObject {\n    }\n    public static void main(String[] args) {\n        List<OOMObject> list = new ArrayList<OOMObject>();\n        //无限创建对象，在堆中\n        while (true) {\n            list.add(new OOMObject());\n        }\n    }\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])]),t("p",[a._v("Run起来代码后爆出异常如下:")]),a._v(" "),t("p",[a._v("java.lang.OutOfMemoryError: Java heap space\nDumping heap to /Users/zdy/Desktop/dump/java_pid1099.hprof …")]),a._v(" "),t("p",[a._v("可以看到生成了dump文件到指定目录。并且爆出了OutOfMemoryError，还告诉了你是哪一片区域出的问题:heap space")]),a._v(" "),t("p",[a._v("打开VisualVM工具导入对应的heapDump文件(如何使用请读者自行查阅相关资料)，相应的说明见图:\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190109224456933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MjczMg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190109224531128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MjczMg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\n分析dump文件后，我们可以知道，OOMObject这个类创建了810326个实例。所以它能不溢出吗？接下来就在代码里找这个类在哪new的。排查问题。(我们的样例代码就不用排查了，While循环太凶猛了)分析dump文件后，我们可以知道，OOMObject这个类创建了810326个实例。所以它能不溢出吗？接下来就在代码里找这个类在哪new的。排查问题。(我们的样例代码就不用排查了，While循环太凶猛了)")]),a._v(" "),t("h3",{attrs:{id:"java栈内存异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java栈内存异常"}},[a._v("#")]),a._v(" Java栈内存异常")]),a._v(" "),t("p",[a._v("老实说，在栈中出现异常(StackOverFlowError)的概率小到和去苹果专卖店买手机，买回来后发现是Android系统的概率是一样的。因为作者确实没有在生产环境中遇到过，除了自己作死写样例代码测试。先说一下异常出现的情况，前面讲到过，方法调用的过程就是方法帧进虚拟机栈和出虚拟机栈的过程，那么有两种情况可以导致StackOverFlowError,当一个方法帧(比如需要2M内存)进入到虚拟机栈(比如还剩下1M内存)的时候，就会报出StackOverFlow.这里先说一个概念，栈深度:指目前虚拟机栈中没有出栈的方法帧。虚拟机栈容量通过参数-Xss来控制,下面通过一段代码，把栈容量人为的调小一点，然后通过递归调用触发异常。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/**\n * VM Args：\n    //设置栈容量为160K，默认1M\n   -Xss160k\n */\npublic class JavaVMStackSOF {\n    private int stackLength = 1;\n    public void stackLeak() {\n        stackLength++;\n        //递归调用，触发异常\n        stackLeak();\n    }\n\n    public static void main(String[] args) throws Throwable {\n        JavaVMStackSOF oom = new JavaVMStackSOF();\n        try {\n            oom.stackLeak();\n        } catch (Throwable e) {\n            System.out.println("stack length:" + oom.stackLength);\n            throw e;\n        }\n    }\n}\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br")])]),t("blockquote",[t("p",[a._v("结果如下:\nstack length:751 Exception in thread “main”\njava.lang.StackOverflowError")])]),a._v(" "),t("p",[a._v("可以看到，递归调用了751次，栈容量不够用了。\n默认的栈容量在正常的方法调用时，栈深度可以达到1000-2000深度，所以，一般的递归是可以承受的住的。如果你的代码出现了StackOverflowError，首先检查代码，而不是改参数。")]),a._v(" "),t("p",[a._v("这里顺带提一下，很多人在做多线程开发时，当创建很多线程时，"),t("strong",[a._v("容易出现OOM(OutOfMemoryError),")]),a._v(" 这时可以通过具体情况，减少最大堆容量，或者栈容量来解决问题，这是为什么呢。请看下面的公式:")]),a._v(" "),t("p",[t("font",{attrs:{color:"red"}},[a._v("线程数*(最大栈容量)+最大堆值+其他内存(忽略不计或者一般不改动)=机器最大内存")])],1),a._v(" "),t("p",[a._v("当线程数比较多时，且无法通过业务上削减线程数，那么再不换机器的情况下，"),t("strong",[a._v("你只能把最大栈容量设置小一点，或者把最大堆值设置小一点。")])]),a._v(" "),t("h3",{attrs:{id:"方法区内存异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区内存异常"}},[a._v("#")]),a._v(" 方法区内存异常")]),a._v(" "),t("p",[a._v('写到这里时，作者本来想写一个无限创建动态代理对象的例子来演示方法区溢出，避开谈论JDK7与JDK8的内存区域变更的过渡，但细想一想，还是把这一块从始致终的说清楚。在上一篇文章中JVM系列之Java内存结构详解讲到方法区时提到，JDK7环境下方法区包括了(运行时常量池),其实这么说是不准确的。因为从JDK7开始，HotSpot团队就想到开始去"永久代",大家首先明确一个概念，'),t("strong",[a._v('方法区和"永久代"(PermGen space)是两个概念，方法区是JVM虚拟机规范，任何虚拟机实现(J9等)都不能少这个区间，而"永久代"只是HotSpot对方法区的一个实现。')]),a._v(" 为了把知识点列清楚，我还是才用列表的形式:")]),a._v(" "),t("ul",[t("li",[a._v('[ ]  JDK7之前(包括JDK7)拥有"永久代"(PermGen space),用来实现方法区。但在JDK7中已经逐渐在实现中把永久代中把很多东西移了出来，比如:符号引用(Symbols)转移到了native heap,运行时常量池(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap.')]),a._v(" "),t("li",[a._v("[ ]  所以这就是为什么我说上一篇文章中说方法区中包含运行时常量池是不正确的，因为已经移动到了java heap;\n"),t("strong",[a._v('在JDK7之前(包括7)可以通过-XX:PermSize -XX:MaxPermSize来控制永久代的大小.\nJDK8正式去除"永久代",换成Metaspace(元空间)作为JVM虚拟机规范中方法区的实现。')]),a._v("\n元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制，但仍可以通过参数控制:-XX:MetaspaceSize与-XX:MaxMetaspaceSize来控制大小。")])]),a._v(" "),t("h3",{attrs:{id:"方法区与运行时常量池oom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区与运行时常量池oom"}},[a._v("#")]),a._v(" 方法区与运行时常量池OOM")]),a._v(" "),t("p",[a._v("Java 永久代是非堆内存的组成部分，用来存放类名、访问修饰符、常量池、字段描述、方法描述等，因运行时常量池是方法区的一部分，所以这里也包含运行时常量池。我们可以通过 jvm 参数 -XX：PermSize=10M -XX：MaxPermSize=10M 来指定该区域的内存大小，-XX：PermSize 默认为物理内存的 1/64 ,-XX：MaxPermSize 默认为物理内存的 1/4 。String.intern() 方法是一个 Native 方法，它的作用是：如果字符串常量池中已经包含一个等于此 String 对象的字符串，则返回代表池中这个字符串的 String 对象；否则，将此 String 对象包含的字符串添加到常量池中，并且返回此 String 对象的引用。在 JDK 1.6 及之前的版本中，由于常量池分配在永久代内，我们可以通过 -XX：PermSize 和 -XX：MaxPermSize 限制方法区大小，从而间接限制其中常量池的容量,通过运行 java -XX：PermSize=8M -XX：MaxPermSize=8M RuntimeConstantPoolOom 下面的代码我们可以模仿一个运行时常量池内存溢出的情况：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import java.util.ArrayList;\nimport java.util.List;\n\npublic class RuntimeConstantPoolOom {\n  public static void main(String[] args) {\n    List<String> list = new ArrayList<String>();\n    int i = 0;\n    while (true) {\n      list.add(String.valueOf(i++).intern());\n    }\n  }\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("p",[a._v("运行结果如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@9683817ada51 oom]# ../jdk1.6.0_45/bin/java -XX:PermSize=8m -XX:MaxPermSize=8m RuntimeConstantPoolOom\nException in thread "main" java.lang.OutOfMemoryError: PermGen space\n    at java.lang.String.intern(Native Method)\n    at RuntimeConstantPoolOom.main(RuntimeConstantPoolOom.java:9)\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("还有一种情况就是我们可以通过不停的加载class来模拟方法区内存溢出，《深入理解java虚拟机》中借助 CGLIB 这类字节码技术模拟了这个异常，我们这里使用不同的 classloader 来实现（同一个类在不同的 classloader 中是不同的），代码如下")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class MethodAreaOom {\n  public static void main(String[] args) throws MalformedURLException, ClassNotFoundException {\n    Set<Class<?>> classes = new HashSet<Class<?>>();\n    URL url = new File("").toURI().toURL();\n    URL[] urls = new URL[]{url};\n    while (true) {\n      ClassLoader loader = new URLClassLoader(urls);\n      Class<?> loadClass = loader.loadClass(Object.class.getName());\n      classes.add(loadClass);\n    }\n  }\n}\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@9683817ada51 oom]# ../jdk1.6.0_45/bin/java -XX:PermSize=2m -XX:MaxPermSize=2m MethodAreaOom\nError occurred during initialization of VM\njava.lang.OutOfMemoryError: PermGen space\n    at sun.net.www.ParseUtil.<clinit>(ParseUtil.java:31)\n    at sun.misc.Launcher.getFileURL(Launcher.java:476)\n    at sun.misc.Launcher$ExtClassLoader.getExtURLs(Launcher.java:187)\n    at sun.misc.Launcher$ExtClassLoader.<init>(Launcher.java:158)\n    at sun.misc.Launcher$ExtClassLoader$1.run(Launcher.java:142)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.misc.Launcher$ExtClassLoader.getExtClassLoader(Launcher.java:135)\n    at sun.misc.Launcher.<init>(Launcher.java:55)\n    at sun.misc.Launcher.<clinit>(Launcher.java:43)\n    at java.lang.ClassLoader.initSystemClassLoader(ClassLoader.java:1337)\n    at java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:1319)\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[a._v("在 jdk1.8 上运行上面的代码将不会出现异常，因为 jdk1.8 已结去掉了永久代，当然 -XX:PermSize=2m -XX:MaxPermSize=2m 也将被忽略，如下")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@9683817ada51 oom]# java -XX:PermSize=2m -XX:MaxPermSize=2m MethodAreaOom\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=2m; support was removed in 8.0\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2m; support was removed in 8.0\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("jdk1.8 使用元空间（ Metaspace ）替代了永久代（ PermSize ），因此我们可以在 1.8 中指定 Metaspace 的大小模拟上述情况")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@9683817ada51 oom]# java -XX:MetaspaceSize=2m -XX:MaxMetaspaceSize=2m RuntimeConstantPoolOom\nError occurred during initialization of VM\njava.lang.OutOfMemoryError: Metaspace\n    <<no stack trace available>>\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("在JDK8的环境下将报出异常:\nException in thread “main” java.lang.OutOfMemoryError: Metaspace\n这是因为在调用CGLib的创建代理时会生成动态代理类，即Class对象到Metaspace,所以While一下就出异常了。\n"),t("strong",[a._v('提醒一下:虽然我们日常叫"堆Dump",但是dump技术不仅仅是对于"堆"区域才有效，而是针对OOM的，也就是说不管什么区域，凡是能够报出OOM错误的，都可以使用dump技术生成dump文件来分析。')])]),a._v(" "),t("p",[a._v("在经常动态生成大量Class的应用中，需要特别注意类的回收状况，这类场景除了例子中的CGLib技术，常见的还有，大量JSP，反射，OSGI等。需要特别注意，当出现此类异常，应该知道是哪里出了问题，然后看是调整参数，还是在代码层面优化。")]),a._v(" "),t("h3",{attrs:{id:"附加-直接内存异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附加-直接内存异常"}},[a._v("#")]),a._v(" 附加-直接内存异常")]),a._v(" "),t("p",[a._v("直接内存异常非常少见，而且机制很特殊，因为直接内存不是直接向操作系统分配内存，而且通过计算得到的内存不够而手动抛出异常，所以当你发现你的dump文件很小，而且没有明显异常，只是告诉你OOM，你就可以考虑下你代码里面是不是直接或者间接使用了NIO而导致直接内存溢出。")]),a._v(" "),t("h2",{attrs:{id:"java内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java内存泄漏"}},[a._v("#")]),a._v(" Java内存泄漏")]),a._v(" "),t("p",[a._v("Java的一个重要优点就是通过垃圾收集器(Garbage Collection，GC)自动管理内存的回收，程序员不需要通过调用函数来释放内存。因此，很多程序员认为Java不存在内存泄漏问题，或者认为即使有内存泄漏也不是程序的责任，而是GC或JVM的问题。其实，这种想法是不正确的，因为Java也存在内存泄露，但它的表现与C++不同。")]),a._v(" "),t("p",[a._v("随着越来越多的服务器程序采用Java技术，例如JSP，Servlet， EJB等，服务器程序往往长期运行。另外，在很多嵌入式系统中，内存的总量非常有限。内存泄露问题也就变得十分关键，即使每次运行少量泄漏，长期运行之后，系统也是面临崩溃的危险。")]),a._v(" "),t("h2",{attrs:{id:"java是如何管理内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java是如何管理内存"}},[a._v("#")]),a._v(" Java是如何管理内存？")]),a._v(" "),t("p",[a._v("为了判断Java中是否有内存泄露，我们首先必须了解Java是如何管理内存的。Java的内存管理就是对象的分配和释放问题。在Java中，程序员需要通过关键字new为每个对象申请内存空间 (基本类型除外)，所有的对象都在堆 (Heap)中分配空间。另外，对象的释放是由GC决定和执行的。在Java中，内存的分配是由程序完成的，而内存的释放是有GC完成的，这种收支两条线的方法确实简化了程序员的工作。但同时，它也加重了JVM的工作。这也是Java程序运行速度较慢的原因之一。因为，GC为了能够正确释放对象，GC必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC都需要进行监控。")]),a._v(" "),t("p",[a._v("监视对象状态是为了更加准确地、及时地释放对象，而释放对象的根本原则就是该对象不再被引用。")]),a._v(" "),t("p",[a._v("为了更好理解GC的工作原理，我们可以将对象考虑为有向图的顶点，将引用关系考虑为图的有向边，有向边从引用者指向被引对象。另外，每个线程对象可以作为一个图的起始顶点，例如大多程序从main进程开始执行，那么该图就是以main进程顶点开始的一棵根树。在这个有向图中，根顶点可达的对象都是有效对象，GC将不回收这些对象。如果某个对象 (连通子图)与这个根顶点不可达(注意，该图为有向图)，那么我们认为这个(这些)对象不再被引用，可以被GC回收。")]),a._v(" "),t("p",[a._v("以下，我们举一个例子说明如何用有向图表示内存管理。对于程序的每一个时刻，我们都有一个有向图表示JVM的内存分配情况。以下右图，就是左边程序运行到第6行的示意图。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190110151433131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MjczMg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\nJava使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的。这种方式的优点是管理内存的精度很高，但是效率较低。另外一种常用的内存管理技术是使用计数器，例如COM模型采用计数器方式管理构件，它与有向图相比，精度行低(很难处理循环引用的问题)，但执行效率很高。")]),a._v(" "),t("h2",{attrs:{id:"什么是java中的内存泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是java中的内存泄露"}},[a._v("#")]),a._v(" 什么是Java中的内存泄露？")]),a._v(" "),t("p",[a._v("下面，我们就可以描述什么是内存泄漏。在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点，首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。")]),a._v(" "),t("p",[a._v("在C++中，内存泄漏的范围更大一些。有些对象被分配了内存空间，然后却不可达，由于C++中没有GC，这些内存将永远收不回来。在Java中，这些不可达的对象都由GC负责回收，因此程序员不需要考虑这部分的内存泄露。")]),a._v(" "),t("p",[a._v("通过分析，我们得知，对于C++，程序员需要自己管理边和顶点，而对于Java程序员只需要管理边就可以了(不需要管理顶点的释放)。通过这种方式，Java提高了编程的效率。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190110152226472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MjczMg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v("\n因此，通过以上分析，我们知道在Java中也有内存泄漏，但范围比C++要小一些。因为Java从语言上保证，任何对象都是可达的，所有的不可达对象都由GC管理。")]),a._v(" "),t("p",[a._v("对于程序员来说，GC基本是透明的，不可见的。虽然，我们只有几个函数可以访问GC，例如运行GC的函数System.gc()，但是根据Java语言规范定义， 该函数不保证JVM的垃圾收集器一定会执行。因为，不同的JVM实现者可能使用不同的算法管理GC。通常，GC的线程的优先级别较低。JVM调用GC的策略也有很多种，有的是内存使用到达一定程度时，GC才开始工作，也有定时执行的，有的是平缓执行GC，有的是中断式执行GC。但通常来说，我们不需要关心这些。除非在一些特定的场合，GC的执行影响应用程序的性能，例如对于基于Web的实时系统，如网络游戏等，用户不希望GC突然中断应用程序执行而进行垃圾回收，那么我们需要调整GC的参数，让GC能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行，Sun提供的HotSpot JVM就支持这一特性。")]),a._v(" "),t("p",[a._v("下面给出了一个简单的内存泄露的例子。在这个例子中，我们循环申请Object对象，并将所申请的对象放入一个Vector中，如果我们仅仅释放引用本身，那么Vector仍然引用该对象，所以这个对象对GC来说是不可回收的。因此，如果对象加入到Vector后，还必须从Vector中删除，最简单的方法就是将Vector对象设置为null。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Vector v=new Vector(10);\nfor (int i=1;i<100; i++)\n{\n    Object o=new Object();\n    v.add(o);\n    o=null;\n}\n//此时，所有的Object对象都没有被释放，因为变量v引用这些对象\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("h3",{attrs:{id:"其他常见内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他常见内存泄漏"}},[a._v("#")]),a._v(" 其他常见内存泄漏")]),a._v(" "),t("h4",{attrs:{id:"_1、静态集合类引起内存泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、静态集合类引起内存泄露"}},[a._v("#")]),a._v(" 1、静态集合类引起内存泄露：")]),a._v(" "),t("p",[a._v("像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。\n例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Static Vector v = new Vector(10); \nfor (int i = 1; i<100; i++) { \n\tObject o = new Object(); \n\tv.add(o); \n\to = null; \n}// \n在这个例子中，循环申请Object 对象，并将所申请的对象放入一个Vector 中，如果仅仅释放引用本身（o=null），那么Vector 仍然引用该对象，所以这个对象对GC 来说是不可回收的。因此，如果对象加入到Vector 后，还必须从Vector 中删除，最简单的方法就是将Vector对象设置为null。\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("h4",{attrs:{id:"_2、当集合里面的对象属性被修改后-再调用remove-方法时不起作用。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、当集合里面的对象属性被修改后-再调用remove-方法时不起作用。"}},[a._v("#")]),a._v(" 2、当集合里面的对象属性被修改后，再调用remove（）方法时不起作用。")]),a._v(" "),t("p",[a._v("例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('public static void main(String[] args) { \n\tSet<Person> set = new HashSet<Person>(); \n\tPerson p1 = new Person("唐僧","pwd1",25); \n\tPerson p2 = new Person("孙悟空","pwd2",26); \n\tPerson p3 = new Person("猪八戒","pwd3",27); \n\tset.add(p1); \n\tset.add(p2); \n\tset.add(p3); \n\tSystem.out.println("总共有:"+set.size()+" 个元素!"); //结果：总共有:3 个元素! \n\tp3.setAge(2); //修改p3的年龄,此时p3元素对应的hashcode值发生改变 \n\n\tset.remove(p3); //此时remove不掉，造成内存泄漏\n\tset.add(p3); //重新添加，居然添加成功 \n\tSystem.out.println("总共有:"+set.size()+" 个元素!"); //结果：总共有:4 个元素! \n\tfor (Person person : set) { \n\t\tSystem.out.println(person); \n\t} \n}\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("h4",{attrs:{id:"_3、监听器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、监听器"}},[a._v("#")]),a._v(" 3、监听器")]),a._v(" "),t("p",[a._v("在java 编程中，我们都需要和监听器打交道，通常一个应用当中会用到很多监听器，我们会调用一个控件的诸如addXXXListener()等方法来增加监听器，但往往在释放对象的时候却没有记住去删除这些监听器，从而增加了内存泄漏的机会。")]),a._v(" "),t("h4",{attrs:{id:"_4、各种连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、各种连接"}},[a._v("#")]),a._v(" 4、各种连接")]),a._v(" "),t("p",[a._v("比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。对于Resultset 和Statement 对象可以不进行显式回收，但Connection 一定要显式回收，因为Connection 在任何时候都无法自动回收，而Connection一旦回收，Resultset 和Statement 对象就会立即为NULL。但是如果使用连接池，情况就不一样了，除了要显式地关闭连接，还必须显式地关闭Resultset Statement 对象（关闭其中一个，另外一个也会关闭），否则就会造成大量的Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在try里面去的连接，在finally里面释放连接。")]),a._v(" "),t("h4",{attrs:{id:"_5、内部类和外部模块等的引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、内部类和外部模块等的引用"}},[a._v("#")]),a._v(" 5、内部类和外部模块等的引用")]),a._v(" "),t("p",[a._v("内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如：\npublic void registerMsg(Object b);\n这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。")]),a._v(" "),t("h4",{attrs:{id:"_6、单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、单例模式"}},[a._v("#")]),a._v(" 6、单例模式")]),a._v(" "),t("p",[a._v("不正确使用单例模式是引起内存泄露的一个常见问题，单例对象在被初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部对象的引用，那么这个外部对象将不能被jvm正常回收，导致内存泄露，考虑下面的例子：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class A{ \n\tpublic A(){ \n\t\tB.getInstance().setA(this); \n\t} \n.... \n} \n//B类采用单例模式 \nclass B{ \n\tprivate A a; \n\tprivate static B instance=new B(); \n\tpublic B(){} \n\tpublic static B getInstance(){ \n\t\treturn instance; \n\t} \n\tpublic void setA(A a){ \n\t\tthis.a=a; \n\t} \n\t//getter... \n} \n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("p",[t("strong",[a._v("显然B采用singleton模式，它持有一个A对象的引用，而这个A类的对象将不能被回收。想象下如果A是个比较复杂的对象或者集合类型会发生什么情况。")])]),a._v(" "),t("h2",{attrs:{id:"如何检测内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何检测内存泄漏"}},[a._v("#")]),a._v(" 如何检测内存泄漏")]),a._v(" "),t("p",[a._v("最后一个重要的问题，就是如何检测Java的内存泄漏。目前，我们通常使用一些工具来检查Java程序的内存泄漏问题。市场上已有几种专业检查Java内存泄漏的工具，它们的基本工作原理大同小异，都是通过监测Java程序运行时，所有对象的申请、释放等动作，将内存管理的所有信息进行统计、分析、可视化。开发人员将根据这些信息判断程序是否有内存泄漏问题。这些工具包括Optimizeit Profiler，JProbe Profiler，JinSight , Rational 公司的Purify等。")]),a._v(" "),t("p",[a._v("下面，我们将简单介绍Optimizeit的基本功能和工作原理。")]),a._v(" "),t("p",[a._v("Optimizeit Profiler版本4.11支持Application，Applet，Servlet和Romote Application四类应用，并且可以支持大多数类型的JVM，包括SUN JDK系列，IBM的JDK系列，和Jbuilder的JVM等。并且，该软件是由Java编写，因此它支持多种操作系统。Optimizeit系列还包括Thread Debugger和Code Coverage两个工具，分别用于监测运行时的线程状态和代码覆盖面。")]),a._v(" "),t("p",[a._v("当设置好所有的参数了，我们就可以在OptimizeIt环境下运行被测程序，在程序运行过程中，Optimizeit可以监视内存的使用曲线(如下图)，包括JVM申请的堆(heap)的大小，和实际使用的内存大小。另外，在运行过程中，我们可以随时暂停程序的运行，甚至强行调用GC，让GC进行内存回收。通过内存使用曲线，我们可以整体了解程序使用内存的情况。这种监测对于长期运行的应用程序非常有必要，也很容易发现内存泄露。")]),a._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000009707894",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://segmentfault.com/a/1190000009707894"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/hysum/p/7100874.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/hysum/p/7100874.html"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://c.biancheng.net/view/939.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://c.biancheng.net/view/939.html"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.runoob.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.runoob.com/"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("https://blog.csdn.net/android_hl/article/details/53228348")]),a._v(" "),t("h2",{attrs:{id:"微信公众号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),t("h3",{attrs:{id:"java技术江湖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),t("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),t("p",[t("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),t("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),t("h3",{attrs:{id:"个人公众号-黄小斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),t("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),t("p",[t("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),t("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);