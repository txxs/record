(window.webpackJsonp=window.webpackJsonp||[]).push([[676],{1067:function(e,s,n){"use strict";n.r(s);var a=n(13),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("ThreadPoolExecutor UML图：")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://camo.githubusercontent.com/c0809a89c8ec3367d66a4181e6ab39f380c8b2e8/687474703a2f2f6e656f72656d696e642e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f30392f6a6176612d372d636f6e63757272656e742d6578656375746f72732d756d6c2d636c6173732d6469616772616d2d6578616d706c652e706e67",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/4685968-3df69177176c81dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}}),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://camo.githubusercontent.com/6a87675bedf83eb673abb2c90025ebc35e52a584/687474703a2f2f6e656f72656d696e642e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f30392f6a6176612d372d636f6e63757272656e742d636f6c6c656374696f6e732d756d6c2d636c6173732d6469616772616d2d6578616d706c652e706e67",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/4685968-579b162e5b60eb0a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}}),n("OutboundLink")],1)]),e._v(" "),n("p",[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/4685968-4a8db303a1e728e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"_8-1-在任务和执行策略之间隐形耦合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-在任务和执行策略之间隐形耦合"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#81-%E5%9C%A8%E4%BB%BB%E5%8A%A1%E5%92%8C%E6%89%A7%E8%A1%8C%E7%AD%96%E7%95%A5%E4%B9%8B%E9%97%B4%E9%9A%90%E5%BD%A2%E8%80%A6%E5%90%88"}}),e._v("8.1 在任务和执行策略之间隐形耦合")]),e._v(" "),n("p",[e._v("避免Thread starvation deadlock")]),e._v(" "),n("h3",{attrs:{id:"_8-2-设置线程池大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-设置线程池大小"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#82-%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F"}}),e._v("8.2 设置线程池大小")]),e._v(" "),n("h3",{attrs:{id:"_8-3-配置threadpoolexecutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-配置threadpoolexecutor"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#83-%E9%85%8D%E7%BD%AEthreadpoolexecutor"}}),e._v("8.3 配置ThreadPoolExecutor")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://camo.githubusercontent.com/3ba3bc8d6aedfd58b6dfa17bcb7259fede320e29/687474703a2f2f6e656f72656d696e642e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f30392f32303131313230393131313934345f3933332e6a7067",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/4685968-1d1eac17930b3246?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}}),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("构造函数如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ThreadPoolExecutor(int corePoolSize,\n int maximumPoolSize,\n long keepAliveTime,\n TimeUnit unit,\n BlockingQueue<Runnable> workQueue,\n ThreadFactory threadFactory,\n RejectedExecutionHandler handler) { ... } \n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("ul",[n("li",[e._v("核心和最大池大小：如果运行的线程少于 corePoolSize，则创建新线程来处理请求（即一个Runnable实例），即使其它线程是空闲的。如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新线程。")]),e._v(" "),n("li",[e._v("保持活动时间：如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止。")]),e._v(" "),n("li",[e._v("排队：如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列BlockingQueue，而不添加新的线程。")]),e._v(" "),n("li",[e._v("被拒绝的任务：当 Executor 已经关闭，或者队列已满且线程数量达到maximumPoolSize时（即线程池饱和了），请求将被拒绝。这些拒绝的策略叫做Saturation Policy，即饱和策略。包括AbortPolicy, CallerRunsPolicy, DiscardPolicy, and DiscardOldestPolicy.")])]),e._v(" "),n("p",[e._v("另外注意：")]),e._v(" "),n("ul",[n("li",[e._v("如果运行的线程少于 corePoolSize，ThreadPoolExecutor 会始终首选创建新的线程来处理请求；注意，这时即使有空闲线程也不会重复使用（这和数据库连接池有很大差别）。")]),e._v(" "),n("li",[e._v("如果运行的线程等于或多于 corePoolSize，则 ThreadPoolExecutor 会将请求加入队列BlockingQueue，而不添加新的线程（这和数据库连接池也不一样）。")]),e._v(" "),n("li",[e._v("如果无法将请求加入队列（比如队列已满），则创建新的线程来处理请求；但是如果创建的线程数超出 maximumPoolSize，在这种情况下，请求将被拒绝。")])]),e._v(" "),n("p",[e._v("newCachedThreadPool使用了SynchronousQueue，并且是无界的。")]),e._v(" "),n("p",[e._v("线程工厂ThreadFactory")]),e._v(" "),n("h3",{attrs:{id:"_8-4-扩展threadpoolexecutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-扩展threadpoolexecutor"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#84-%E6%89%A9%E5%B1%95threadpoolexecutor"}}),e._v("8.4 扩展ThreadPoolExecutor")]),e._v(" "),n("p",[e._v("重写beforeExecute和afterExecute方法。")]),e._v(" "),n("h3",{attrs:{id:"_8-5-递归算法的并行化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-递归算法的并行化"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#85-%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%8C%96"}}),e._v("8.5 递归算法的并行化")]),e._v(" "),n("p",[e._v("实际就是类似Number of Islands或者N-Queens等DFS问题的一种并行处理。")]),e._v(" "),n("p",[e._v("串行版本如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class SequentialPuzzleSolver <P, M> {\n    private final Puzzle<P, M> puzzle;\n    private final Set<P> seen = new HashSet<P>();\n\n    public SequentialPuzzleSolver(Puzzle<P, M> puzzle) {\n        this.puzzle = puzzle;\n    }\n\n    public List<M> solve() {\n        P pos = puzzle.initialPosition();\n        return search(new PuzzleNode<P, M>(pos, null, null));\n    }\n\n    private List<M> search(PuzzleNode<P, M> node) {\n        if (!seen.contains(node.pos)) {\n            seen.add(node.pos);\n            if (puzzle.isGoal(node.pos))\n                return node.asMoveList();\n            for (M move : puzzle.legalMoves(node.pos)) {\n                P pos = puzzle.move(node.pos, move);\n                PuzzleNode<P, M> child = new PuzzleNode<P, M>(pos, move, node);\n                List<M> result = search(child);\n                if (result != null)\n                    return result;\n            }\n        }\n        return null;\n    }\n}\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br")])]),n("p",[e._v("并行版本如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ConcurrentPuzzleSolver <P, M> {\n    private final Puzzle<P, M> puzzle;\n    private final ExecutorService exec;\n    private final ConcurrentMap<P, Boolean> seen;\n    protected final ValueLatch<PuzzleNode<P, M>> solution = new ValueLatch<PuzzleNode<P, M>>();\n\n    public ConcurrentPuzzleSolver(Puzzle<P, M> puzzle) {\n        this.puzzle = puzzle;\n        this.exec = initThreadPool();\n        this.seen = new ConcurrentHashMap<P, Boolean>();\n        if (exec instanceof ThreadPoolExecutor) {\n            ThreadPoolExecutor tpe = (ThreadPoolExecutor) exec;\n            tpe.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());\n        }\n    }\n\n    private ExecutorService initThreadPool() {\n        return Executors.newCachedThreadPool();\n    }\n\n    public List<M> solve() throws InterruptedException {\n        try {\n            P p = puzzle.initialPosition();\n            exec.execute(newTask(p, null, null));\n            // block until solution found\n            PuzzleNode<P, M> solnPuzzleNode = solution.getValue();\n            return (solnPuzzleNode == null) ? null : solnPuzzleNode.asMoveList();\n        } finally {\n            exec.shutdown();\n        }\n    }\n\n    protected Runnable newTask(P p, M m, PuzzleNode<P, M> n) {\n        return new SolverTask(p, m, n);\n    }\n\n    protected class SolverTask extends PuzzleNode<P, M> implements Runnable {\n        SolverTask(P pos, M move, PuzzleNode<P, M> prev) {\n            super(pos, move, prev);\n        }\n\n        public void run() {\n            if (solution.isSet()\n                    || seen.putIfAbsent(pos, true) != null)\n                return; // already solved or seen this position\n            if (puzzle.isGoal(pos))\n                solution.setValue(this);\n            else\n                for (M m : puzzle.legalMoves(pos))\n                    exec.execute(newTask(puzzle.move(pos, m), m, this));\n        }\n    }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);