(window.webpackJsonp=window.webpackJsonp||[]).push([[740],{1131:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("IoC和AOP生而就是为了解耦和扩展。")]),t._v(" "),a("h1",{attrs:{id:"什么是-ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ioc"}},[t._v("#")]),t._v(" 什么是 IoC?")]),t._v(" "),a("p",[t._v("一种设计思想，将设计好的对象交给Spring容器控制，而非直接在对象内部控制。")]),t._v(" "),a("blockquote",[a("p",[t._v("为啥要让容器来管理对象呢？你这程序员咋就知道甩锅呢？\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210512150222541.png",alt:""}})])]),t._v(" "),a("p",[t._v("拥有初级趣味的码农，可能只是觉着使用IoC方便，就是个用来解耦的，但这还远非容器的益处。\n利用容器管理所有的框架、业务对象，我们可以做到：")]),t._v(" "),a("ul",[a("li",[t._v("无侵入调整对象的关系")]),t._v(" "),a("li",[t._v("无侵入地随时调整对象的属性")]),t._v(" "),a("li",[t._v("实现对象的替换")])]),t._v(" "),a("p",[t._v("这使得框架开发者在后续实现一些扩展就很容易。")]),t._v(" "),a("h1",{attrs:{id:"什么是aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是aop"}},[t._v("#")]),t._v(" 什么是AOP？")]),t._v(" "),a("p",[t._v("AOP实现了高内聚、低耦合，在切面集中实现横切关注点（缓存、权限、日志等），然后通过切点配置把代码注入到合适的位置。")]),t._v(" "),a("h1",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("连接点（Join point）")]),t._v("\n就是方法执行")]),t._v(" "),a("li",[a("strong",[t._v("切点（Pointcut）")]),t._v("\nSpring AOP默认使用AspectJ查询表达式，通过在连接点运行查询表达式来匹配切点")]),t._v(" "),a("li",[a("strong",[t._v("增强（Advice）")]),t._v("\n也叫作通知，定义了切入切点后增强的方式，包括前、后、环绕等。Spring AOP中，把增强定义为拦截器")]),t._v(" "),a("li",[a("strong",[t._v("切面（Aspect）")]),t._v("\n切面=切点+增强")])]),t._v(" "),a("h3",{attrs:{id:"declaring-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-advice"}},[t._v("#")]),t._v(" Declaring Advice")]),t._v(" "),a("p",[t._v("有如下三类增强：")]),t._v(" "),a("h4",{attrs:{id:"before"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before"}},[t._v("#")]),t._v(" @Before")]),t._v(" "),a("h4",{attrs:{id:"after"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#after"}},[t._v("#")]),t._v(" @After")]),t._v(" "),a("h4",{attrs:{id:"around"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#around"}},[t._v("#")]),t._v(" @Around")]),t._v(" "),a("p",[a("strong",[t._v("环绕通知")]),t._v("运行 "),a("strong",[t._v("around")]),t._v(" 匹配方法的执行。它有机会在方法运行之前和之后都工作，并确定方法实际运行何时、如何甚至是否执行。若你需要以线程安全的方式（例如启动和停止计时器）在方法执行前后共享状态，则通常会使用Around advice。")]),t._v(" "),a("p",[t._v("使用案例：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aspectj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Aspect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aspectj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Around")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aspectj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProceedingJoinPoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AroundExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Around")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.xyz.myapp.CommonPointcuts.businessService()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doBasicProfiling")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProceedingJoinPoint")]),t._v(" pjp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// start stopwatch")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" retVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pjp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("proceed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stop stopwatch")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" retVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("around advice 返回的值就是方法调用者看到的返回值。例如，一个简单的缓存aspect可以返回一个值从缓存（如果它有）或调用"),a("code",[t._v("procedd")]),t._v("如果它没有。请注意，可以多次调用"),a("code",[t._v("procedd")]),t._v("，或者根本不在around advice的主体内调用，这都是合法的。")]),t._v(" "),a("p",[t._v("推荐始终使用最不强大的advice形式，以满足需求。")]),t._v(" "),a("p",[t._v("使用 "),a("strong",[t._v("@Around")]),t._v(" 注解声明环绕通知时，第一个参数必须是ProceedingJoinPoint类型。\n在通知的方法体中，调用 "),a("code",[t._v("proceed()")]),t._v(" 会导致基础方法运行。 "),a("code",[t._v("proceed()")]),t._v(" 也可以在Object[]中传递。数组中的值在进行时用作方法执行的参数。")]),t._v(" "),a("h4",{attrs:{id:"advice参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advice参数"}},[t._v("#")]),t._v(" Advice参数")]),t._v(" "),a("p",[t._v("Spring 提供全种类的通知，这意味着你在通知的方法签名中声明所需参数，而非和"),a("code",[t._v("Object[]")]),t._v("协作。\n如何编写通用的通知，以便了解通知方法当前在通知啥玩意。")]),t._v(" "),a("h4",{attrs:{id:"access-to-the-current-joinpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-to-the-current-joinpoint"}},[t._v("#")]),t._v(" Access to the Current JoinPoint")]),t._v(" "),a("p",[t._v("任何通知方法都可能声明类型"),a("code",[t._v("org.aspectj.lang.JoinPoint")]),t._v(" 的参数（请注意，围绕建议需要申报类型'继续JoinPoint'的第一参数，该参数是 JoinPoint 的子类。\nJoinPoint 接口提供了许多有用的方法：")]),t._v(" "),a("ul",[a("li",[t._v("getArgs()\n返回方法的参数")]),t._v(" "),a("li",[t._v("getThis()\n返回代理对象")]),t._v(" "),a("li",[t._v("getTarget()\n返回目标对象")]),t._v(" "),a("li",[t._v("getSignature()\nReturns a description of the method that is being advised.")]),t._v(" "),a("li",[t._v("toString()\nPrints a useful description of the method being advised.")])])])}),[],!1,null,null,null);s.default=e.exports}}]);