(window.webpackJsonp=window.webpackJsonp||[]).push([[763],{1158:function(t,e,s){"use strict";s.r(e);var r=s(13),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 Spring 编程中，主要配合如下注解构建过滤器：")]),t._v(" "),s("ul",[s("li",[t._v("@ServletComponentScan")]),t._v(" "),s("li",[t._v("@WebFilter")])]),t._v(" "),s("p",[t._v("那这看起来只是用上这俩注解就能继续摸鱼了呀。但上了生产后，还是能遇到花式问题：")]),t._v(" "),s("ul",[s("li",[t._v("工作不起来")]),t._v(" "),s("li",[t._v("顺序不对")]),t._v(" "),s("li",[t._v("执行多次等")])]),t._v(" "),s("p",[t._v("大多因为想当然觉得使用简单，没有上心。还是有必要精通过滤器执行的流程和原理。")]),t._v(" "),s("h1",{attrs:{id:"webfilter-过滤器无法被自动注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webfilter-过滤器无法被自动注入"}},[t._v("#")]),t._v(" @WebFilter 过滤器无法被自动注入")]),t._v(" "),s("p",[t._v("为统计接口耗时，实现一个过滤器：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/e1f8f6ce7b4c47cab322388c54309807.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n该过滤器标记了 "),s("strong",[t._v("@WebFilter")]),t._v("。所以启动程序加上扫描注解 "),s("strong",[t._v("@ServletComponentScan")]),t._v(" 让其生效：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/6aef56e0ecf742aba96c9a3a83353992.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n然后，提供一个 UserController：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/6a4d432b3f9b4232a8abf44e8c35a697.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n发现应用启动失败\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/7d5b595b43024955aa17314dd55f7890.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\nTimeCostFilter 看起来是个普通 Bean啊，为何不能被自动注入？")]),t._v(" "),s("h1",{attrs:{id:"源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码解析"}},[t._v("#")]),t._v(" 源码解析")]),t._v(" "),s("p",[t._v("本质上，过滤器被 "),s("strong",[t._v("@WebFilter")]),t._v(" 修饰后，TimeCostFilter 只会被包装为 FilterRegistrationBean，而 TimeCostFilter 本身只会作为一个 InnerBean 被实例化，这意味着 TimeCostFilter 实例并不会作为 Bean 注册到 Spring 容器。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/6af1a896b40b48e7997aab35fe393ef1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n所以当我们想自动注入 TimeCostFilter 时，就会失败。知道这个结论后，我们可以带着两个问题去理清一些关键的逻辑：")]),t._v(" "),s("h3",{attrs:{id:"filterregistrationbean-是什么-它是如何被定义的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filterregistrationbean-是什么-它是如何被定义的"}},[t._v("#")]),t._v(" FilterRegistrationBean 是什么？它是如何被定义的")]),t._v(" "),s("p",[t._v("javax.servlet.annotation.WebFilter\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/d50c1424b7ca4aedaeb5c176d108246c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n所以它不属 Spring，而是 Servlet 规范。\nSpring Boot 项目使用它时，Spring Boot 使用了 "),s("code",[t._v("org.springframework.boot.web.servlet.FilterRegistrationBean")]),t._v(" 包装 @WebFilter 标记的实例。\n实现上来说，即 FilterRegistrationBean#Filter 属性就是 @WebFilter 标记的实例。这点我们可以从之前给出的截图中看出端倪。")]),t._v(" "),s("p",[t._v("定义一个 Filter 类时，我们可能想的是，会自动生成它的实例，然后以 Filter 的名称作为 Bean 名来指向它。\n但调试发现，在 Spring Boot 中，Bean 名字确实是对的，只是 Bean 实例其实是 FilterRegistrationBean。")]),t._v(" "),s("blockquote",[s("p",[t._v("这 FilterRegistrationBean 最早是如何获取的呢？")])]),t._v(" "),s("p",[t._v("得追溯到 @WebFilter 注解是如何被处理的。")]),t._v(" "),s("h3",{attrs:{id:"webfilter-是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webfilter-是如何工作的"}},[t._v("#")]),t._v(" @WebFilter 是如何工作的")]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("@WebFilter")]),t._v(" 时，Filter 被加载有两个条件：")]),t._v(" "),s("ul",[s("li",[t._v("声明了 "),s("strong",[t._v("@WebFilter")])]),t._v(" "),s("li",[t._v("在能被 "),s("strong",[t._v("@ServletComponentScan")]),t._v(" 扫到的路径下")])]),t._v(" "),s("p",[t._v("直接搜索对 "),s("strong",[t._v("@WebFilter")]),t._v(" 的使用，可发现 "),s("strong",[t._v("WebFilterHandler")]),t._v(" 使用了它：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/f54dc1da4efb42088f36b65cd49dc4d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n因此，我们选择在 "),s("strong",[t._v("doHandle()")]),t._v(" 打断点\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/3f62fe089b9b4b56a89c2ff3fd44ab74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\ndebug启动，观察调用栈：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/a3a423af4efb4123bef27cddd97f0997.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n可见对 "),s("strong",[t._v("@WebFilter")]),t._v(" 的处理是在SB启动时，在"),s("strong",[t._v("ServletComponentRegisteringPostProcessor")]),t._v("被触发，实现对如下注解的的扫描和处理：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("@WebFilter")])]),t._v(" "),s("li",[s("strong",[t._v("@WebListener")])]),t._v(" "),s("li",[s("strong",[t._v("@WebServlet")])])]),t._v(" "),s("p",[t._v("WebFilterHandler则负责处理 "),s("strong",[t._v("@WebFilter")]),t._v(" 的使用：")]),t._v(" "),s("p",[t._v("最后，"),s("strong",[t._v("WebServletHandler")]),t._v(" 通过父类 "),s("strong",[t._v("ServletComponentHandler")]),t._v(" 的模版方法模式，处理了所有被 "),s("strong",[t._v("@WebFilter")]),t._v(" 注解的类：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/c87248e1484644efb912bf3e74513419.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("可见最终注册的 FilterRegistrationBean就是自定义的WebFilter。")]),t._v(" "),s("p",[t._v("看第二个问题：")]),t._v(" "),s("h1",{attrs:{id:"何时实例化timecostfilter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时实例化timecostfilter"}},[t._v("#")]),t._v(" 何时实例化TimeCostFilter")]),t._v(" "),s("p",[t._v("TimeCostFilter 是何时实例化的呢？为什么它没有成为一个普通 Bean?\n可在 TimeCostFilter 构造器中加断点，便于快速定位初始化时机：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/5e0390b6343046a6812e69da17266688.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}}),t._v("\n结合源码，可发现：")]),t._v(" "),s("ul",[s("li",[t._v("Tomcat 启动时（"),s("em",[s("strong",[t._v("onstartUp")])]),t._v("），才会创建 FilterRegistrationBean")]),t._v(" "),s("li",[t._v("FilterRegistrationBean 在被创建时（"),s("em",[s("strong",[t._v("createBean")])]),t._v("）会创建 "),s("strong",[t._v("TimeCostFilter")]),t._v(" 装配自身，而 "),s("strong",[t._v("TimeCostFilter")]),t._v(" 是通过 "),s("em",[s("strong",[t._v("ResolveInnerBean")])]),t._v(" 创建的")]),t._v(" "),s("li",[s("strong",[t._v("TimeCostFilter")]),t._v(" 实例最终是一种 "),s("strong",[t._v("InnerBean")]),t._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/4e37161a2335439da027266872c8118f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}})])]),t._v(" "),s("p",[t._v("所以最终 TimeCostFilter 实例是一种 "),s("strong",[t._v("InnerBean")]),t._v("，也就无法自动注入了。")]),t._v(" "),s("h1",{attrs:{id:"修正"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修正"}},[t._v("#")]),t._v(" 修正")]),t._v(" "),s("p",[t._v("找到根因，就知道如何解决了。")]),t._v(" "),s("p",[t._v("前文解析可知，使用 "),s("strong",[t._v("@WebFilter")]),t._v(" 修饰过滤器时，TimeCostFilter 类型的 Bean 并没有注册至 Spring 容器，真正注册的是 FilterRegistrationBean。\n考虑到还可能存在多个 Filter，可这样修改：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/a233451d6ac14ffe9154042be51aa677.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASmF2YUVkZ2Uu,size_20,color_FFFFFF,t_70,g_se,x_16",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("注入 "),s("strong",[t._v("FilterRegistrationBean")]),t._v(" 类型，而非 "),s("strong",[t._v("TimeCostFilter")]),t._v(" 类型")]),t._v(" "),s("li",[t._v("注入的名称是包含包名的全限定名，不能直接用 "),s("code",[t._v("TimeCostFilter")]),t._v("，以便存在多个过滤器时，能精确匹配。")])]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[s("strong",[t._v("@WebFilter")]),t._v(" 这种方式构建的 Filter 无法直接根据过滤器定义类型自动注入，因为这种Filter本身是以内部Bean呈现，最终是通过"),s("strong",[t._v("FilterRegistrationBean")]),t._v("呈现给Spring。\n所以可通过自动注入"),s("strong",[t._v("FilterRegistrationBean")]),t._v("类型完成自动装配。")])])}),[],!1,null,null,null);e.default=_.exports}}]);