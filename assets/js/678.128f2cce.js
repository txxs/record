(window.webpackJsonp=window.webpackJsonp||[]).push([[678],{1071:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Condition就是实现了管程里面的条件变量。\nJava 语言内置的管程里只有一个条件变量，而Lock&Condition实现的管程支持多个条件变量。\n支持多个条件变量，能让代码可读性更好，实现也更容易。例如，你看我这里实现一个阻塞队列，就需要两个条件变量：")]),t._v(" "),a("ul",[a("li",[t._v("队列不空\n空队列自然没有元素能出队")]),t._v(" "),a("li",[t._v("队列不满\n队列已满，当然也不可有元素再入队\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210421150133653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\nLock和Condition实现的管程，线程等待和通知需要调用await()、signal()、signalAll()，它们的语义和wait()、notify()、notifyAll()相同。")]),t._v(" "),a("li",[t._v("Lock&Condition实现的管程里只能使用await()、signal()、signalAll()")]),t._v(" "),a("li",[t._v("synchronized实现的管程才能使用wait()、notify()、notifyAll()")])]),t._v(" "),a("p",[t._v("如果在Lock&Condition实现的管程里调用wait()、notify()、notifyAll()，你距离离职就更近一步了。")]),t._v(" "),a("h3",{attrs:{id:"thread-sleep-v-s-condition-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-sleep-v-s-condition-await"}},[t._v("#")]),t._v(" Thread.sleep() V.S Condition.await()")]),t._v(" "),a("p",[t._v("Object.wait()和Condition.await()的原理是基本一致的，不同在于Condition.await()底层是调用LockSupport.park()实现阻塞当前线程。它在阻塞当前线程前，其实还做了：")]),t._v(" "),a("ol",[a("li",[t._v("把当前线程添加到条件队列")]),t._v(" "),a("li",[a("strong",[t._v("完全")]),t._v("释放锁，即让state=0，然后才调用"),a("code",[t._v("LockSupport.park()")]),t._v("阻塞当前线程")])]),t._v(" "),a("p",[t._v("JDK的Lock和Condition不过就是管程的一种实现，一般如何使用呢？")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是同步与异步？")])]),t._v(" "),a("ul",[a("li",[t._v("同步\n调用方需要等待结果")]),t._v(" "),a("li",[t._v("异步\n不需要等待结果")])]),t._v(" "),a("blockquote",[a("p",[t._v("代码里如何实现异步？")])]),t._v(" "),a("ul",[a("li",[t._v("调用方创建一个子线程，在子线程中执行方法调用，即异步调用")]),t._v(" "),a("li",[t._v("方法实现时，创建一个新的线程执行主要逻辑，主线程直接return，即异步方法。")])]),t._v(" "),a("p",[t._v("异步场景挺多，比如TCP协议本身是异步的，日常的RPC调用，在TCP协议层面，发送完RPC请求后，线程不会等待RPC响应结果。")]),t._v(" "),a("blockquote",[a("p",[t._v("是不是好奇了，明明日常使用的RPC调用都是同步的呀？这到底是同步还是异步？")])]),t._v(" "),a("p",[t._v("这肯定有人帮忙实现了异步转同步。比如RPC框架Dubbo，具体它是怎么做到的呢？")]),t._v(" "),a("p",[t._v("对于下面一个简单的RPC调用，默认情况下sayHello()是个同步方法，即执行service.sayHello(“dubbo”)时，线程会停下来等结果。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoService")]),t._v(" service "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 初始化部分省略\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dubbo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("若此时dump调用线程的调用栈\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210421154327773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n发现调用线程阻塞了，线程状态是"),a("strong",[t._v("TIMED_WAITING")]),t._v("。本来发送请求是异步的，但是调用线程却阻塞了，说明Dubbo帮我们做了异步转同步的事情。通过调用栈看到线程是阻塞在"),a("code",[t._v("DefaultFuture.get()")]),t._v("，所以Dubbo异步转同步的功能应该是通过DefaultFuture实现。")])]),t._v(" "),a("p",[t._v("DefaultFuture.get()之前发生了什么呢：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210421160657953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("我们的期望：")]),t._v(" "),a("ul",[a("li",[t._v("RPC返回结果前，阻塞调用线程，让调用线程等待")]),t._v(" "),a("li",[t._v("RPC返回结果后，唤醒调用线程，让调用线程重新执行")])])]),t._v(" "),a("p",[t._v("这就是经典的等待-通知机制，即管程的实现方案。")]),t._v(" "),a("ul",[a("li",[t._v("看看Dubbo是怎么实现的。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210421170330667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])])])}),[],!1,null,null,null);s.default=e.exports}}]);