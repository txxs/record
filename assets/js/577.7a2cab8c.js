(window.webpackJsonp=window.webpackJsonp||[]).push([[577],{975:function(e,a,t){"use strict";t.r(a);var n=t(13),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"table-of-contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#hashset"}},[e._v("HashSet")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%AE%9A%E4%B9%89"}},[e._v("定义")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95"}},[e._v("方法")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#treeset"}},[e._v("TreeSet")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#treeset%E5%AE%9A%E4%B9%89"}},[e._v("TreeSet定义")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#treeset%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95"}},[e._v("TreeSet主要方法")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E6%9C%80%E5%90%8E"}},[e._v("最后")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#linkedhashset"}},[e._v("LinkedHashSet")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#linkedhashset%E5%86%85%E9%83%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84"}},[e._v("LinkedHashSet内部是如何工作的")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#linkedhashset%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%B4%E6%8A%A4%E6%8F%92%E5%85%A5%E9%A1%BA%E5%BA%8F%E7%9A%84"}},[e._v("LinkedHashSet是如何维护插入顺序的")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[e._v("参考文章")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[e._v("微信公众号")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[e._v("Java技术江湖")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[e._v("个人公众号：黄小斜")])])])])]),e._v(" "),t("p",[e._v("本文参考 http://cmsblogs.com/?p=599")]),e._v(" "),t("p",[e._v("《Java集合详解系列》是我在完成夯实Java基础篇的系列博客后准备开始整理的新系列文章。\n为了更好地诠释知识点，形成体系文章，本系列文章整理了很多优质的博客内容，如有侵权请联系我，一定删除。")]),e._v(" "),t("p",[e._v("这些文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),e._v(" "),t("p",[e._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),e._v(" "),t("blockquote",[t("p",[e._v("https://github.com/h2pl/Java-Tutorial")])]),e._v(" "),t("p",[e._v("喜欢的话麻烦点下Star、fork哈")]),e._v(" "),t("p",[e._v("本系列文章将整理于我的个人博客：")]),e._v(" "),t("blockquote",[t("p",[e._v("www.how2playlife.com")])]),e._v(" "),t("p",[e._v("今天我们来探索一下HashSet，TreeSet与LinkedHashSet的基本原理与源码实现，由于这三个set都是基于之前文章的三个map进行实现的，所以推荐大家先看一下前面有关map的文章，结合使用味道更佳。")]),e._v(" "),t("h2",{attrs:{id:"hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[e._v("#")]),e._v(" HashSet")]),e._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class HashSet<E>\n    extends AbstractSet<E>\n    implements Set<E>, Cloneable, java.io.Serializable\n")])])]),t("p",[e._v("HashSet继承AbstractSet类，实现Set、Cloneable、Serializable接口。其中AbstractSet提供 Set 接口的骨干实现，从而最大限度地减少了实现此接口所需的工作。\n==Set接口是一种不包括重复元素的Collection，它维持它自己的内部排序，所以随机访问没有任何意义。==")]),e._v(" "),t("p",[e._v("本文基于1.8jdk进行源码分析。")]),e._v(" "),t("p",[e._v("基本属性")]),e._v(" "),t("p",[e._v("基于HashMap实现，底层使用HashMap保存所有元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("private transient HashMap<E,Object> map;\n\n//定义一个Object对象作为HashMap的value\nprivate static final Object PRESENT = new Object();\n")])])]),t("p",[e._v("构造函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n     * 默认构造函数\n     * 初始化一个空的HashMap，并使用默认初始容量为16和加载因子0.75。\n     */\n    public HashSet() {\n        map = new HashMap<>();\n    }\n\n    /**\n     * 构造一个包含指定 collection 中的元素的新 set。\n     */\n    public HashSet(Collection<? extends E> c) {\n        map = new HashMap<>(Math.max((int) (c.size()/.75f) + 1, 16));\n        addAll(c);\n    }\n\n    /**\n     * 构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子\n     */\n    public HashSet(int initialCapacity, float loadFactor) {\n        map = new HashMap<>(initialCapacity, loadFactor);\n    }\n\n    /**\n     * 构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（0.75）。\n     */\n    public HashSet(int initialCapacity) {\n       map = new HashMap<>(initialCapacity);\n    }\n\n    /**\n     * 在API中我没有看到这个构造函数，今天看源码才发现（原来访问权限为包权限，不对外公开的）\n     * 以指定的initialCapacity和loadFactor构造一个新的空链接哈希集合。\n     * dummy 为标识 该构造函数主要作用是对LinkedHashSet起到一个支持作用\n     */\n    HashSet(int initialCapacity, float loadFactor, boolean dummy) {\n       map = new LinkedHashMap<>(initialCapacity, loadFactor);\n    }\n 从构造函数中可以看出HashSet所有的构造都是构造出一个新的HashMap，其中最后一个构造函数，为包访问权限是不对外公开，仅仅只在使用LinkedHashSet时才会发生作用。\n")])])]),t("h3",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[e._v("既然HashSet是基于HashMap，那么对于HashSet而言，其方法的实现过程是非常简单的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Iterator<E> iterator() {\n        return map.keySet().iterator();\n    }\n")])])]),t("blockquote",[t("p",[e._v("iterator()方法返回对此 set 中元素进行迭代的迭代器。返回元素的顺序并不是特定的。")]),e._v(" "),t("p",[e._v("底层调用HashMap的keySet返回所有的key，这点反应了HashSet中的所有元素都是保存在HashMap的key中，value则是使用的PRESENT对象，该对象为static final。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public int size() {\n        return map.size();\n    }\n   size()返回此 set 中的元素的数量（set 的容量）。底层调用HashMap的size方法，返回HashMap容器的大小。\n")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean isEmpty() {\n        return map.isEmpty();\n    }\n    isEmpty()，判断HashSet()集合是否为空，为空返回 true，否则返回false。\n\npublic boolean contains(Object o) {\n        return map.containsKey(o);\n}\n\npublic boolean containsKey(Object key) {\n    return getNode(hash(key), key) != null;\n}\n\n//最终调用该方法进行节点查找\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    //先检查桶的头结点是否存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n            //不是头结点，则遍历链表，如果是树节点则使用树节点的方法遍历，直到找到，或者为null\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n")])])]),t("p",[e._v("contains()，判断某个元素是否存在于HashSet()中，存在返回true，否则返回false。更加确切的讲应该是要满足这种关系才能返回true：(o==null ? e==null : o.equals(e))。底层调用containsKey判断HashMap的key值是否为空。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean add(E e) {\n        return map.put(e, PRESENT)==null;\n}\n\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nmap的put方法：\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    \n    //确认初始化\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n        \n    //如果桶为空，直接插入新元素，也就是entry\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        //如果冲突，分为三种情况\n        //key相等时让旧entry等于新entry即可\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        //红黑树情况\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            //如果key不相等，则连成链表\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n")])])]),t("blockquote",[t("p",[e._v("这里注意一点，hashset只是不允许重复的元素加入，而不是不允许元素连成链表，因为只要key的equals方法判断为true时它们是相等的，此时会发生value的替换，因为所有entry的value一样，所以和没有插入时一样的。")]),e._v(" "),t("p",[e._v("而当两个hashcode相同但key不相等的entry插入时，仍然会连成一个链表，长度超过8时依然会和hashmap一样扩展成红黑树，看完源码之后笔者才明白自己之前理解错了。所以看源码还是蛮有好处的。hashset基本上就是使用hashmap的方法再次实现了一遍而已，只不过value全都是同一个object，让你以为相同元素没有插入，事实上只是value替换成和原来相同的值而已。")])]),e._v(" "),t("p",[e._v("当add方法发生冲突时，如果key相同，则替换value，如果key不同，则连成链表。")]),e._v(" "),t("p",[e._v("add()如果此 set 中尚未包含指定元素，则添加指定元素。如果此Set没有包含满足(e==null ? e2==null : e.equals(e2)) 的e2时，则将e2添加到Set中，否则不添加且返回false。")]),e._v(" "),t("p",[e._v("由于底层使用HashMap的put方法将key = e，value=PRESENT构建成key-value键值对，当此e存在于HashMap的key中，则value将会覆盖原有value，但是key保持不变，所以如果将一个已经存在的e元素添加中HashSet中，新添加的元素是不会保存到HashMap中，所以这就满足了HashSet中元素不会重复的特性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean remove(Object o) {\n    return map.remove(o)==PRESENT;\n}\n")])])]),t("p",[e._v("remove如果指定元素存在于此 set 中，则将其移除。底层使用HashMap的remove方法删除指定的Entry。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public void clear() {\n    map.clear();\n}\n")])])]),t("p",[e._v("clear从此 set 中移除所有元素。底层调用HashMap的clear方法清除所有的Entry。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Object clone() {\n        try {\n            HashSet<E> newSet = (HashSet<E>) super.clone();\n            newSet.map = (HashMap<E, Object>) map.clone();\n            return newSet;\n        } catch (CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n")])])]),t("p",[e._v("clone返回此 HashSet 实例的浅表副本：并没有复制这些元素本身。")]),e._v(" "),t("p",[e._v("后记：")]),e._v(" "),t("blockquote",[t("p",[e._v("由于HashSet底层使用了HashMap实现，使其的实现过程变得非常简单，如果你对HashMap比较了解，那么HashSet简直是小菜一碟。有两个方法对HashMap和HashSet而言是非常重要的，下篇将详细讲解hashcode和equals。")])]),e._v(" "),t("h2",{attrs:{id:"treeset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[e._v("#")]),e._v(" TreeSet")]),e._v(" "),t("p",[e._v("与HashSet是基于HashMap实现一样，TreeSet同样是基于TreeMap实现的。在《Java提高篇（二七）-----TreeMap》中LZ详细讲解了TreeMap实现机制，如果客官详情看了这篇博文或者多TreeMap有比较详细的了解，那么TreeSet的实现对您是喝口水那么简单。")]),e._v(" "),t("h3",{attrs:{id:"treeset定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeset定义"}},[e._v("#")]),e._v(" TreeSet定义")]),e._v(" "),t("p",[e._v("我们知道TreeMap是一个有序的二叉树，那么同理TreeSet同样也是一个有序的，它的作用是提供有序的Set集合。通过源码我们知道TreeSet基础AbstractSet，实现NavigableSet、Cloneable、Serializable接口。")]),e._v(" "),t("p",[e._v("其中AbstractSet提供 Set 接口的骨干实现，从而最大限度地减少了实现此接口所需的工作。")]),e._v(" "),t("p",[e._v("NavigableSet是扩展的 SortedSet，具有了为给定搜索目标报告最接近匹配项的导航方法，这就意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。Cloneable支持克隆，Serializable支持序列化。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class TreeSet<E> extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n")])])]),t("p",[e._v("同时在TreeSet中定义了如下几个变量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("private transient NavigableMap<E,Object> m;\n    \n//PRESENT会被当做Map的value与key构建成键值对\n private static final Object PRESENT = new Object();\n")])])]),t("p",[e._v("其构造方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("//默认构造方法，根据其元素的自然顺序进行排序\n\npublic TreeSet() {\n    this(new TreeMap<E,Object>());\n}\n\n//构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的自然顺序进行排序。\npublic TreeSet(Comparator<? super E> comparator) {\n        this(new TreeMap<>(comparator));\n}\n\n//构造一个新的空 TreeSet，它根据指定比较器进行排序。\npublic TreeSet(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n\n//构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet。\npublic TreeSet(SortedSet<E> s) {\n    this(s.comparator());\n    addAll(s);\n}\n\nTreeSet(NavigableMap<E,Object> m) {\n    this.m = m;\n}\n")])])]),t("h3",{attrs:{id:"treeset主要方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeset主要方法"}},[e._v("#")]),e._v(" TreeSet主要方法")]),e._v(" "),t("p",[e._v("1、add：将指定的元素添加到此 set（如果该元素尚未存在于 set 中）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public boolean add(E e) {\n        return m.put(e, PRESENT)==null;\n    }\n \npublic V put(K key, V value) {\n    Entry<K,V> t = root;\n    if (t == null) {\n    //空树时，判断节点是否为空\n        compare(key, key); // type (and possibly null) check\n\n        root = new Entry<>(key, value, null);\n        size = 1;\n        modCount++;\n        return null;\n    }\n    int cmp;\n    Entry<K,V> parent;\n    // split comparator and comparable paths\n    Comparator<? super K> cpr = comparator;\n    //非空树，根据传入比较器进行节点的插入位置查找\n    if (cpr != null) {\n        do {\n            parent = t;\n            //节点比根节点小，则找左子树，否则找右子树\n            cmp = cpr.compare(key, t.key);\n            if (cmp < 0)\n                t = t.left;\n            else if (cmp > 0)\n                t = t.right;\n                //如果key的比较返回值相等，直接更新值（一般compareto相等时equals方法也相等）\n            else\n                return t.setValue(value);\n        } while (t != null);\n    }\n    else {\n    //如果没有传入比较器，则按照自然排序\n        if (key == null)\n            throw new NullPointerException();\n        @SuppressWarnings("unchecked")\n            Comparable<? super K> k = (Comparable<? super K>) key;\n        do {\n            parent = t;\n            cmp = k.compareTo(t.key);\n            if (cmp < 0)\n                t = t.left;\n            else if (cmp > 0)\n                t = t.right;\n            else\n                return t.setValue(value);\n        } while (t != null);\n    }\n    //查找的节点为空，直接插入，默认为红节点\n    Entry<K,V> e = new Entry<>(key, value, parent);\n    if (cmp < 0)\n        parent.left = e;\n    else\n        parent.right = e;\n        //插入后进行红黑树调整\n    fixAfterInsertion(e);\n    size++;\n    modCount++;\n    return null;\n}    \n')])])]),t("p",[e._v("2、get：获取元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public V get(Object key) {\n    Entry<K,V> p = getEntry(key);\n    return (p==null ? null : p.value);\n}\n")])])]),t("p",[e._v("该方法与put的流程类似，只不过是把插入换成了查找")]),e._v(" "),t("p",[e._v("3、ceiling：返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E ceiling(E e) {\n        return m.ceilingKey(e);\n    }\n")])])]),t("p",[e._v("4、clear：移除此 set 中的所有元素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public void clear() {\n        m.clear();\n    }\n")])])]),t("p",[e._v("5、clone：返回 TreeSet 实例的浅表副本。属于浅拷贝。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Object clone() {\n        TreeSet<E> clone = null;\n        try {\n            clone = (TreeSet<E>) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n\n        clone.m = new TreeMap<>(m);\n        return clone;\n    }\n")])])]),t("p",[e._v("6、comparator：返回对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的自然顺序，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Comparator<? super E> comparator() {\n        return m.comparator();\n    }\n")])])]),t("p",[e._v("7、contains：如果此 set 包含指定的元素，则返回 true。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean contains(Object o) {\n        return m.containsKey(o);\n    }\n")])])]),t("p",[e._v("8、descendingIterator：返回在此 set 元素上按降序进行迭代的迭代器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Iterator<E> descendingIterator() {\n        return m.descendingKeySet().iterator();\n    }\n")])])]),t("p",[e._v("9、descendingSet：返回此 set 中所包含元素的逆序视图。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public NavigableSet<E> descendingSet() {\n        return new TreeSet<>(m.descendingMap());\n    }\n")])])]),t("p",[e._v("10、first：返回此 set 中当前第一个（最低）元素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E first() {\n        return m.firstKey();\n    }\n")])])]),t("p",[e._v("11、floor：返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E floor(E e) {\n        return m.floorKey(e);\n    }\n")])])]),t("p",[e._v("12、headSet：返回此 set 的部分视图，其元素严格小于 toElement。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public SortedSet<E> headSet(E toElement) {\n        return headSet(toElement, false);\n    }\n")])])]),t("p",[e._v("13、higher：返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E higher(E e) {\n        return m.higherKey(e);\n    }\n")])])]),t("p",[e._v("14、isEmpty：如果此 set 不包含任何元素，则返回 true。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean isEmpty() {\n        return m.isEmpty();\n    }\n")])])]),t("p",[e._v("15、iterator：返回在此 set 中的元素上按升序进行迭代的迭代器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public Iterator<E> iterator() {\n        return m.navigableKeySet().iterator();\n    }\n")])])]),t("p",[e._v("16、last：返回此 set 中当前最后一个（最高）元素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E last() {\n        return m.lastKey();\n    }\n")])])]),t("p",[e._v("17、lower：返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E lower(E e) {\n        return m.lowerKey(e);\n    }\n")])])]),t("p",[e._v("18、pollFirst：获取并移除第一个（最低）元素；如果此 set 为空，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E pollFirst() {\n        Map.Entry<E,?> e = m.pollFirstEntry();\n        return (e == null) ? null : e.getKey();\n    }\n")])])]),t("p",[e._v("19、pollLast：获取并移除最后一个（最高）元素；如果此 set 为空，则返回 null。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public E pollLast() {\n        Map.Entry<E,?> e = m.pollLastEntry();\n        return (e == null) ? null : e.getKey();\n    }\n")])])]),t("p",[e._v("20、remove：将指定的元素从 set 中移除（如果该元素存在于此 set 中）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public boolean remove(Object o) {\n        return m.remove(o)==PRESENT;\n    }\n")])])]),t("p",[e._v("该方法与put类似，只不过把插入换成了删除，并且要进行删除后调整")]),e._v(" "),t("p",[e._v("21、size：返回 set 中的元素数（set 的容量）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public int size() {\n        return m.size();\n    }\n")])])]),t("p",[e._v("22、subSet：返回此 set 的部分视图")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n     * 返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。\n     */\n     public NavigableSet<E> subSet(E fromElement, boolean fromInclusive,\n             E toElement,   boolean toInclusive) {\n             return new TreeSet<>(m.subMap(fromElement, fromInclusive,\n                  toElement,   toInclusive));\n     }\n     \n     /**\n      * 返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。\n      */\n     public SortedSet<E> subSet(E fromElement, E toElement) {\n         return subSet(fromElement, true, toElement, false);\n     }\n")])])]),t("p",[e._v("23、tailSet：返回此 set 的部分视图")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n     * 返回此 set 的部分视图，其元素大于（或等于，如果 inclusive 为 true）fromElement。\n     */\n    public NavigableSet<E> tailSet(E fromElement, boolean inclusive) {\n        return new TreeSet<>(m.tailMap(fromElement, inclusive));\n    }\n    \n    /**\n     * 返回此 set 的部分视图，其元素大于等于 fromElement。\n     */\n    public SortedSet<E> tailSet(E fromElement) {\n        return tailSet(fromElement, true);\n    }\n")])])]),t("h2",{attrs:{id:"最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[e._v("#")]),e._v(" 最后")]),e._v(" "),t("p",[e._v("由于TreeSet是基于TreeMap实现的，所以如果我们对treeMap有了一定的了解，对TreeSet那是小菜一碟，我们从TreeSet中的源码可以看出，其实现过程非常简单，几乎所有的方法实现全部都是基于TreeMap的。")]),e._v(" "),t("h2",{attrs:{id:"linkedhashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset"}},[e._v("#")]),e._v(" LinkedHashSet")]),e._v(" "),t("h3",{attrs:{id:"linkedhashset内部是如何工作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset内部是如何工作的"}},[e._v("#")]),e._v(" LinkedHashSet内部是如何工作的")]),e._v(" "),t("p",[e._v("LinkedHashSet是HashSet的一个“扩展版本”，HashSet并不管什么顺序，不同的是LinkedHashSet会维护“插入顺序”。HashSet内部使用HashMap对象来存储它的元素，而LinkedHashSet内部使用LinkedHashMap对象来存储和处理它的元素。这篇文章，我们将会看到LinkedHashSet内部是如何运作的及如何维护插入顺序的。")]),e._v(" "),t("p",[e._v("我们首先着眼LinkedHashSet的构造函数。在LinkedHashSet类中一共有4个构造函数。这些构造函数都只是简单地调用父类构造函数（如HashSet类的构造函数）。\n下面看看LinkedHashSet的构造函数是如何定义的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("//Constructor - 1\n \npublic LinkedHashSet(int initialCapacity, float loadFactor)\n{\n      super(initialCapacity, loadFactor, true);              //Calling super class constructor\n}\n \n//Constructor - 2\n \npublic LinkedHashSet(int initialCapacity)\n{\n        super(initialCapacity, .75f, true);             //Calling super class constructor\n}\n \n//Constructor - 3\n \npublic LinkedHashSet()\n{\n        super(16, .75f, true);                //Calling super class constructor\n}\n \n//Constructor - 4\n \npublic LinkedHashSet(Collection<? extends E> c)\n{\n        super(Math.max(2*c.size(), 11), .75f, true);          //Calling super class constructor\n        addAll(c);\n}\n")])])]),t("p",[e._v("在上面的代码片段中，你可能注意到4个构造函数调用的是同一个父类的构造函数。这个构造函数（父类的，译者注）是一个包内私有构造函数（见下面的代码，HashSet的构造函数没有使用public公开，译者注），它只能被LinkedHashSet使用。")]),e._v(" "),t("p",[e._v("这个构造函数需要初始容量，负载因子和一个boolean类型的哑值（没有什么用处的参数，作为标记，译者注）等参数。这个哑参数只是用来区别这个构造函数与HashSet的其他拥有初始容量和负载因子参数的构造函数，下面是这个构造函数的定义，")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("HashSet(int initialCapacity, float loadFactor, boolean dummy)\n{\n        map = new LinkedHashMap<>(initialCapacity, loadFactor);\n}\n")])])]),t("p",[e._v("显然，这个构造函数内部初始化了一个LinkedHashMap对象，这个对象恰好被LinkedHashSet用来存储它的元素。")]),e._v(" "),t("p",[e._v("LinkedHashSet并没有自己的方法，所有的方法都继承自它的父类HashSet，因此，对LinkedHashSet的所有操作方式就好像对HashSet操作一样。")]),e._v(" "),t("p",[e._v("唯一的不同是内部使用不同的对象去存储元素。在HashSet中，插入的元素是被当做HashMap的键来保存的，而在LinkedHashSet中被看作是LinkedHashMap的键。")]),e._v(" "),t("p",[e._v("这些键对应的值都是常量PRESENT（PRESENT是HashSet的静态成员变量，译者注）。")]),e._v(" "),t("h3",{attrs:{id:"linkedhashset是如何维护插入顺序的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset是如何维护插入顺序的"}},[e._v("#")]),e._v(" LinkedHashSet是如何维护插入顺序的")]),e._v(" "),t("blockquote",[t("p",[e._v("LinkedHashSet使用LinkedHashMap对象来存储它的元素，插入到LinkedHashSet中的元素实际上是被当作LinkedHashMap的键保存起来的。")]),e._v(" "),t("p",[e._v("LinkedHashMap的每一个键值对都是通过内部的静态类Entry<K, V>实例化的。这个 Entry<K, V>类继承了HashMap.Entry类。")]),e._v(" "),t("p",[e._v("这个静态类增加了两个成员变量，before和after来维护LinkedHasMap元素的插入顺序。这两个成员变量分别指向前一个和后一个元素，这让LinkedHashMap也有类似双向链表的表现。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("private static class Entry<K,V> extends HashMap.Entry<K,V>\n{\n        // These fields comprise the doubly linked list used for iteration.\n        Entry<K,V> before, after;\n \n        Entry(int hash, K key, V value, HashMap.Entry<K,V> next) {\n            super(hash, key, value, next);\n        }\n}\n")])])]),t("p",[e._v("从上面代码看到的LinkedHashMap内部类的前面两个成员变量——before和after负责维护LinkedHashSet的插入顺序。LinkedHashMap定义的成员变量header保存的是\n这个双向链表的头节点。header的定义就像下面这样，")]),e._v(" "),t("p",[e._v("接下来看一个例子就知道LinkedHashSet内部是如何工作的了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class LinkedHashSetExample\n{\n    public static void main(String[] args)\n    {\n        //Creating LinkedHashSet\n \n        LinkedHashSet<String> set = new LinkedHashSet<String>();\n \n        //Adding elements to LinkedHashSet\n \n        set.add("BLUE");\n \n        set.add("RED");\n \n        set.add("GREEN");    \n \n        set.add("BLACK");\n    }\n}\n')])])]),t("p",[e._v("如果你知道LinkedHashMap内部是如何工作的，就非常容易明白LinkedHashSet内部是如何工作的。看一遍LinkedHashSet和LinkedHashMap的源码，\n你就能够准确地理解在Java中LinkedHashSet内部是如何工作的。")]),e._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),t("p",[e._v("http://cmsblogs.com/?p=599")]),e._v(" "),t("p",[e._v("https://www.cnblogs.com/one-apple-pie/p/11036309.html")]),e._v(" "),t("p",[e._v("https://blog.csdn.net/learningcoding/article/details/79983248")]),e._v(" "),t("h2",{attrs:{id:"微信公众号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[e._v("#")]),e._v(" 微信公众号")]),e._v(" "),t("h3",{attrs:{id:"java技术江湖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[e._v("#")]),e._v(" Java技术江湖")]),e._v(" "),t("p",[e._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),e._v(" "),t("p",[t("strong",[e._v("Java工程师必备学习资源:")]),e._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),t("strong",[e._v("“Java”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),e._v(" "),t("h3",{attrs:{id:"个人公众号-黄小斜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[e._v("#")]),e._v(" 个人公众号：黄小斜")]),e._v(" "),t("p",[e._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),e._v(" "),t("p",[t("strong",[e._v("程序员3T技术学习资源：")]),e._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),t("strong",[e._v("“资料”")]),e._v(" 即可免费无套路获取。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})]),e._v(" "),t("p",[e._v("​")])])}),[],!1,null,null,null);a.default=s.exports}}]);