(window.webpackJsonp=window.webpackJsonp||[]).push([[611],{1004:function(a,s,n){"use strict";n.r(s);var t=n(13),v=Object(t.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1-%E6%A6%82%E8%BF%B0"}},[a._v("1 概述")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#2-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84"}},[a._v("2 运行时栈帧结构")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#21-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8"}},[a._v("2.1 局部变量表")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#22-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88"}},[a._v("2.2 操作数栈")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#23-%E5%8A%A8%E6%80%81%E8%BF%9E%E6%8E%A5"}},[a._v("2.3 动态连接")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#24-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80"}},[a._v("2.4 方法返回地址")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#25-%E9%99%84%E5%8A%A0%E4%BF%A1%E6%81%AF"}},[a._v("2.5 附加信息")])])])]),a._v(" "),n("li",[n("a",{attrs:{href:"#3-%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8"}},[a._v("3 方法调用")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#31-%E8%A7%A3%E6%9E%90"}},[a._v("3.1 解析")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#32-%E5%88%86%E6%B4%BE"}},[a._v("3.2 分派")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#33-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%94%AF%E6%8C%81"}},[a._v("3.3 动态类型语言的支持")])])])]),a._v(" "),n("li",[n("a",{attrs:{href:"#4-%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E"}},[a._v("4 基于栈的字节码解释执行引擎")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#41-%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C"}},[a._v("4.1 解释执行")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#42-%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E5%9F%BA%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86"}},[a._v("4.2 基于栈的指令集和基于寄存器的指令集")])])])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[a._v("总结")])])]),a._v(" "),n("p",[a._v("本文转自：https://www.cnblogs.com/snailclimb/p/9086337.html")]),a._v(" "),n("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),n("blockquote",[n("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),n("p",[a._v("喜欢的话麻烦点下Star哈")]),a._v(" "),n("p",[a._v("文章将同步到我的个人博客：")]),a._v(" "),n("blockquote",[n("p",[a._v("www.how2playlife.com")])]),a._v(" "),n("p",[a._v("本文是微信公众号【Java技术江湖】的《深入理解JVM虚拟机》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),a._v(" "),n("p",[a._v("该系列博文会告诉你如何从入门到进阶，一步步地学习JVM基础知识，并上手进行JVM调优实战，JVM是每一个Java工程师必须要学习和理解的知识点，你必须要掌握其实现原理，才能更完整地了解整个Java技术体系，形成自己的知识框架。")]),a._v(" "),n("p",[a._v("为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),a._v(" "),n("p",[a._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),a._v(" "),n("h2",{attrs:{id:"_1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[a._v("#")]),a._v(" 1 概述")]),a._v(" "),n("p",[a._v("执行引擎是java虚拟机最核心的组成部件之一。虚拟机的执行引擎由自己实现，所以可以自行定制指令集与执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。")]),a._v(" "),n("p",[a._v("所有的Java虚拟机的执行引擎都是一致的："),n("strong",[a._v("输入的是字节码文件，处理过程是字节码解析的等效过程，输出的是执行结果")]),a._v("。本节将主要从概念模型的角度来讲解"),n("strong",[a._v("虚拟机的方法调用和字节码执行")]),a._v("。")]),a._v(" "),n("h2",{attrs:{id:"_2-运行时栈帧结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行时栈帧结构"}},[a._v("#")]),a._v(" 2 运行时栈帧结构")]),a._v(" "),n("p",[n("strong",[a._v("栈帧（Stack Frame）")]),a._v(" 是用于支持虚拟机方法调用和方法执行的数据结构，它是虚拟机运行时数据区中"),n("strong",[a._v("虚拟机栈（Virtual Machine Stack）的栈元素")]),a._v("。")]),a._v(" "),n("p",[a._v("栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。")]),a._v(" "),n("p",[n("strong",[a._v("栈帧概念结构如下图所示：")])]),a._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/4/1632919c2fc34c02?w=640&h=569&f=png&s=116882",alt:"栈帧概念结构"}})]),a._v(" "),n("h3",{attrs:{id:"_2-1-局部变量表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-局部变量表"}},[a._v("#")]),a._v(" 2.1 局部变量表")]),a._v(" "),n("p",[n("strong",[a._v("局部变量表是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。\n局部变量表的容量以变量槽（Variable Slot）为最小单位。")]),a._v(" 一个Slot可以存放一个32位以内（boolean、byte、char、short、int、float、reference和returnAddress）的数据类型，reference类型表示一个对象实例的引用，returnAddress已经很少见了，可以忽略。")]),a._v(" "),n("p",[n("strong",[a._v("对于64位的数据类型（Java语言中明确的64位数据类型只有long和double），虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。")])]),a._v(" "),n("p",[n("strong",[a._v("虚拟机通过索引定位的方式使用局部变量表")]),a._v("，索引值的范围从0开始至局部变量表最大的Slot数量。访问的是32位数据类型的变量，索引n就代表了使用第n个Slot,如果是64位数据类型，就代表会同时使用n和n+1这两个Slot。")]),a._v(" "),n("p",[n("strong",[a._v("为了节省栈帧空间，局部变量Slot可以重用")]),a._v("，方法体中定义的变量，其作用域并不一定会覆盖整个方法体。如果当前字节码PC计数器的值超出了某个变量的作用域，那么这个变量的Slot就可以交给其他变量使用。这样的设计会带来一些额外的副作用，比如：在某些情况下，Slot的复用会直接影响到系统的收集行为。")]),a._v(" "),n("h3",{attrs:{id:"_2-2-操作数栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-操作数栈"}},[a._v("#")]),a._v(" 2.2 操作数栈")]),a._v(" "),n("p",[n("strong",[a._v("操作数栈（Operand Stack）")]),a._v(" 也常称为操作栈，它是一个"),n("strong",[a._v("后入先出栈")]),a._v("。当一个方法执行开始时，这个方法的操作数栈是空的，在方法执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是 "),n("strong",[a._v("出栈/入栈")]),a._v("操作。")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/4/16329250e46c341a?w=470&h=411&f=png&s=63864",alt:"操作数栈"}})]),a._v(" "),n("p",[a._v("在概念模型中，一个活动线程中两个栈帧是相互独立的。但大多数虚拟机实现都会做一些优化处理：让下一个栈帧的部分操作数栈与上一个栈帧的部分局部变量表重叠在一起，这样的好处是方法调用时可以共享一部分数据，而无须进行额外的参数复制传递。")]),a._v(" "),n("h3",{attrs:{id:"_2-3-动态连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-动态连接"}},[a._v("#")]),a._v(" 2.3 动态连接")]),a._v(" "),n("p",[a._v("每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的"),n("strong",[a._v("动态连接")]),a._v("；")]),a._v(" "),n("p",[a._v("字节码中方法调用指令是以常量池中的指向方法的符号引用为参数的，有一部分符号引用会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为 "),n("strong",[a._v("静态解析")]),a._v("，另外一部分在每次的运行期间转化为直接引用，这部分称为"),n("strong",[a._v("动态连接")]),a._v("。")]),a._v(" "),n("h3",{attrs:{id:"_2-4-方法返回地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-方法返回地址"}},[a._v("#")]),a._v(" 2.4 方法返回地址")]),a._v(" "),n("p",[a._v("当一个方法被执行后，有两种方式退出这个方法：")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("第一种是执行引擎遇到任意一个方法返回的字节码指令，这种退出方法的方式称为"),n("strong",[a._v("正常完成出口（Normal Method Invocation Completion）")]),a._v("。")])]),a._v(" "),n("li",[n("p",[a._v("另外一种是在方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理（即本方法异常处理表中没有匹配的异常处理器），就会导致方法退出，这种退出方式称为"),n("strong",[a._v("异常完成出口（Abrupt Method Invocation Completion）")]),a._v("。\n注意：这种退出方式不会给上层调用者产生任何返回值。")])])]),a._v(" "),n("p",[n("strong",[a._v("无论采用何种退出方式，在方法退出后，都需要返回到方法被调用的位置，程序才能继续执行")]),a._v("，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的PC计数器的值可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是通过异常处理器表来确定的，栈帧中一般不会保存这部分信息。")]),a._v(" "),n("p",[a._v("方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值（如果有的话）压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令等。")]),a._v(" "),n("h3",{attrs:{id:"_2-5-附加信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-附加信息"}},[a._v("#")]),a._v(" 2.5 附加信息")]),a._v(" "),n("p",[a._v("虚拟机规范允许虚拟机实现向栈帧中添加一些自定义的附加信息，例如与调试相关的信息等。")]),a._v(" "),n("h2",{attrs:{id:"_3-方法调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法调用"}},[a._v("#")]),a._v(" 3 方法调用")]),a._v(" "),n("p",[a._v("方法调用阶段的目的："),n("strong",[a._v("确定被调用方法的版本（哪一个方法），不涉及方法内部的具体运行过程")]),a._v("，在程序运行时，进行方法调用是最普遍、最频繁的操作。")]),a._v(" "),n("p",[n("strong",[a._v("一切方法调用在Class文件里存储的都只是符号引用，这是需要在类加载期间或者是运行期间，才能确定为方法在实际 运行时内存布局中的入口地址（相当于之前说的直接引用）")]),a._v("。")]),a._v(" "),n("h3",{attrs:{id:"_3-1-解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-解析"}},[a._v("#")]),a._v(" 3.1 解析")]),a._v(" "),n("p",[a._v("“编译期可知，运行期不可变”的方法（静态方法和私有方法），在类加载的解析阶段，会将其符号引用转化为直接引用（入口地址）。这类方法的调用称为“"),n("strong",[a._v("解析（Resolution）")]),a._v("”。")]),a._v(" "),n("p",[a._v("在Java虚拟机中提供了5条方法调用字节码指令：\n- "),n("strong",[a._v("invokestatic")]),a._v(" : 调用静态方法\n- "),n("strong",[a._v("invokespecial")]),a._v(":调用实例构造器方法、私有方法、父类方法\n- "),n("strong",[a._v("invokevirtual")]),a._v(":调用所有的虚方法\n- "),n("strong",[a._v("invokeinterface")]),a._v(":调用接口方法，会在运行时在确定一个实现此接口的对象\n- "),n("strong",[a._v("invokedynamic")]),a._v(":先在运行时动态解析出点限定符所引用的方法，然后再执行该方法，在此之前的4条调用命令的分派逻辑是固化在Java虚拟机内部的，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。")]),a._v(" "),n("h3",{attrs:{id:"_3-2-分派"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分派"}},[a._v("#")]),a._v(" 3.2 分派")]),a._v(" "),n("p",[n("strong",[a._v("分派调用过程将会揭示多态性特征的一些最基本的体现，如“重载”和“重写”在Java虚拟中是如何实现的。")])]),a._v(" "),n("p",[n("strong",[a._v("1 静态分派")])]),a._v(" "),n("p",[a._v("所有依赖静态类型来定位方法执行版本的分派动作，都称为静态分派。静态分派发生在编译阶段。")]),a._v(" "),n("p",[a._v("静态分派最典型的应用就是方法重载。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package jvm8_3_2;\n\npublic class StaticDispatch {\n    static abstract class Human {\n\n    }\n\n    static class Man extends Human {\n\n    }\n\n    static class Woman extends Human {\n\n    }\n\n    public void sayhello(Human guy) {\n        System.out.println("Human guy");\n\n    }\n\n    public void sayhello(Man guy) {\n        System.out.println("Man guy");\n\n    }\n\n    public void sayhello(Woman guy) {\n        System.out.println("Woman guy");\n    }\n\n    public static void main(String[] args) {\n        Human man = new Man();\n        Human woman = new Woman();\n        StaticDispatch staticDispatch = new StaticDispatch();\n        staticDispatch.sayhello(man);// Human guy\n        staticDispatch.sayhello(woman);// Human guy\n    }\n\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br")])]),n("p",[a._v("运行结果：")]),a._v(" "),n("p",[a._v("Human guy")]),a._v(" "),n("p",[a._v("Human guy")]),a._v(" "),n("p",[n("strong",[a._v("为什么会出现这样的结果呢？")])]),a._v(" "),n("p",[a._v("Human man = new Man();其中的Human称为变量的"),n("strong",[a._v("静态类型（Static Type）")]),a._v(",Man称为变量的"),n("strong",[a._v("实际类型（Actual Type）")]),a._v("。\n"),n("strong",[a._v("两者的区别是")]),a._v("：静态类型在编译器可知，而实际类型到运行期才确定下来。\n在重载时通过参数的静态类型而不是实际类型作为判定依据，因此，在编译阶段，Javac编译器会根据参数的静态类型决定使用哪个重载版本。所以选择了sayhello(Human)作为调用目标，并把这个方法的符号引用写到main()方法里的两条invokevirtual指令的参数中。")]),a._v(" "),n("p",[n("strong",[a._v("2 动态分派")])]),a._v(" "),n("p",[a._v("在运行期根据实际类型确定方法执行版本的分派过程称为动态分派。最典型的应用就是方法重写。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package jvm8_3_2;\n\npublic class DynamicDisptch {\n\n    static abstract class Human {\n        abstract void sayhello();\n    }\n\n    static class Man extends Human {\n\n        @Override\n        void sayhello() {\n            System.out.println("man");\n        }\n\n    }\n\n    static class Woman extends Human {\n\n        @Override\n        void sayhello() {\n            System.out.println("woman");\n        }\n\n    }\n\n    public static void main(String[] args) {\n        Human man = new Man();\n        Human woman = new Woman();\n        man.sayhello();\n        woman.sayhello();\n        man = new Woman();\n        man.sayhello();\n    }\n\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br")])]),n("p",[a._v("运行结果：")]),a._v(" "),n("p",[a._v("man")]),a._v(" "),n("p",[a._v("woman")]),a._v(" "),n("p",[a._v("woman")]),a._v(" "),n("p",[n("strong",[a._v("3 单分派和多分派")])]),a._v(" "),n("p",[a._v("方法的接收者、方法的参数都可以称为方法的宗量。根据分批基于多少种宗量，可以将分派划分为单分派和多分派。"),n("strong",[a._v("单分派是根据一个宗量对目标方法进行选择的，多分派是根据多于一个的宗量对目标方法进行选择的。")])]),a._v(" "),n("p",[a._v("Java在进行静态分派时，选择目标方法要依据两点：一是变量的静态类型是哪个类型，二是方法参数是什么类型。因为要根据两个宗量进行选择，所以Java语言的静态分派属于多分派类型。")]),a._v(" "),n("p",[a._v("运行时阶段的动态分派过程，由于编译器已经确定了目标方法的签名（包括方法参数），运行时虚拟机只需要确定方法的接收者的实际类型，就可以分派。因为是根据一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型。")]),a._v(" "),n("p",[a._v("注：到JDK1.7时，Java语言还是静态多分派、动态单分派的语言，未来有可能支持动态多分派。")]),a._v(" "),n("p",[n("strong",[a._v("4 虚拟机动态分派的实现")])]),a._v(" "),n("p",[a._v("由于动态分派是非常频繁的动作，而动态分派在方法版本选择过程中又需要在方法元数据中搜索合适的目标方法，虚拟机实现出于性能的考虑，通常不直接进行如此频繁的搜索，而是采用优化方法。")]),a._v(" "),n("p",[a._v("其中一种“稳定优化”手段是：在类的方法区中建立一个"),n("strong",[a._v("虚方法表")]),a._v("（Virtual Method Table, 也称vtable, 与此对应，也存在接口方法表——Interface Method Table，也称itable）。"),n("strong",[a._v("使用虚方法表索引来代替元数据查找以提高性能。其原理与C++的虚函数表类似。")])]),a._v(" "),n("p",[a._v("虚方法表中存放的是各个方法的实际入口地址。如果某个方法在子类中没有被重写，那子类的虚方法表里面的地址入口和父类中该方法相同，都指向父类的实现入口。虚方法表一般在类加载的连接阶段进行初始化。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-动态类型语言的支持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-动态类型语言的支持"}},[a._v("#")]),a._v(" 3.3 动态类型语言的支持")]),a._v(" "),n("p",[a._v("JDK新增加了invokedynamic指令来是实现“动态类型语言”。")]),a._v(" "),n("p",[n("strong",[a._v("静态语言和动态语言的区别：")])]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("静态语言（强类型语言）")]),a._v("：\n静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前必须声明数据类型。 \n例如：C++、Java、Delphi、C#等。")]),a._v(" "),n("li",[n("strong",[a._v("动态语言（弱类型语言）")]),a._v(" ：\n动态语言是在运行时确定数据类型的语言。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。 \n例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。")]),a._v(" "),n("li",[n("strong",[a._v("强类型定义语言")]),a._v(" ：\n强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。")]),a._v(" "),n("li",[n("strong",[a._v("弱类型定义语言")]),a._v(" ：\n数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。")])]),a._v(" "),n("h2",{attrs:{id:"_4-基于栈的字节码解释执行引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-基于栈的字节码解释执行引擎"}},[a._v("#")]),a._v(" 4 基于栈的字节码解释执行引擎")]),a._v(" "),n("p",[a._v("虚拟机如何调用方法的内容已经讲解完毕，现在我们来探讨虚拟机是如何执行方法中的字节码指令。")]),a._v(" "),n("h3",{attrs:{id:"_4-1-解释执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-解释执行"}},[a._v("#")]),a._v(" 4.1 解释执行")]),a._v(" "),n("p",[a._v("Java语言经常被人们定位为 "),n("strong",[a._v("“解释执行”语言")]),a._v("，在Java初生的JDK1.0时代，这种定义还比较准确的，但当主流的虚拟机中都包含了即时编译后，Class文件中的代码到底会被解释执行还是编译执行，就成了只有虚拟机自己才能准确判断的事情。再后来，Java也发展出来了直接生成本地代码的编译器[如何GCJ（GNU Compiler for the Java）]，而C/C++也出现了通过解释器执行的版本（如CINT），这时候再笼统的说“解释执行”，对于整个Java语言来说就成了几乎没有任何意义的概念，"),n("strong",[a._v("只有确定了谈论对象是某种具体的Java实现版本和执行引擎运行模式时，谈解释执行还是编译执行才会比较确切")]),a._v("。")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/4/16329338654c4e30?w=612&h=274&f=png&s=105184",alt:" 解释执行"}})]),a._v(" "),n("p",[a._v("Java语言中，javac编译器完成了程序代码经过词法分析、语法分析到抽象语法树，再遍历语法树生成线性的字节码指令流的过程，因为这一部分动作是在Java虚拟机之外进行的，而解释器在虚拟机内部，所以Java程序的编译就是半独立实现的，")]),a._v(" "),n("h3",{attrs:{id:"_4-2-基于栈的指令集和基于寄存器的指令集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-基于栈的指令集和基于寄存器的指令集"}},[a._v("#")]),a._v(" 4.2 基于栈的指令集和基于寄存器的指令集")]),a._v(" "),n("p",[a._v("Java编译器输出的指令流，基本上是一种"),n("strong",[a._v("基于栈的指令集架构（Instruction Set Architecture，ISA）")]),a._v("，"),n("strong",[a._v("依赖操作数栈进行工作")]),a._v("。与之相对应的另一套常用的指令集架构是"),n("strong",[a._v("基于寄存器的指令集")]),a._v("， "),n("strong",[a._v("依赖寄存器进行工作")]),a._v("。")]),a._v(" "),n("p",[a._v("那么，"),n("strong",[a._v("基于栈的指令集和基于寄存器的指令集这两者有什么不同呢？")])]),a._v(" "),n("p",[a._v("举个简单例子，分别使用这两种指令计算1+1的结果，"),n("strong",[a._v("基于栈的指令集会是这个样子：")]),a._v("\niconst_1")]),a._v(" "),n("p",[a._v("iconst_1")]),a._v(" "),n("p",[a._v("iadd")]),a._v(" "),n("p",[a._v("istore_0")]),a._v(" "),n("p",[a._v("两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈、相加，然后将结果放回栈顶，最后istore_0把栈顶的值放到局部变量表中的第0个Slot中。")]),a._v(" "),n("p",[n("strong",[a._v("如果基于寄存器的指令集，那程序可能会是这个样子：")])]),a._v(" "),n("p",[a._v("mov eax, 1")]),a._v(" "),n("p",[a._v("add eax, 1")]),a._v(" "),n("p",[a._v("mov指令把EAX寄存器的值设置为1，然后add指令再把这个值加1，将结果就保存在EAX寄存器里面。")]),a._v(" "),n("p",[n("strong",[a._v("基于栈的指令集主要的优点就是可移植，寄存器是由硬件直接提供，程序直接依赖这些硬件寄存器则不可避免地要受到硬件的约束。")])]),a._v(" "),n("p",[n("strong",[a._v("栈架构的指令集还有一些其他的优点，如代码相对更加紧凑，编译器实现更加简单等。\n栈架构指令集的主要缺点是执行速度相对来说会稍微慢一些。")])]),a._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),n("p",[a._v("本节中，我们分析了虚拟机在执行代码时，如何找到正确的方法、如何执行方法内的字节码，以及执行代码时涉及的内存结构。")])])}),[],!1,null,null,null);s.default=v.exports}}]);