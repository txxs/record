(window.webpackJsonp=window.webpackJsonp||[]).push([[1017],{1411:function(t,r,v){"use strict";v.r(r);var _=v(13),a=Object(_.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",{attrs:{align:"center"}},[v("a",{attrs:{href:"https://programmercarl.com/other/kstar.html",target:"_blank"}},[v("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210924105952.png",width:"1000"}})])]),v("p",{attrs:{align:"center"}},[v("strong",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/tqCxrMEU-ajQumL1i8im9A"}},[t._v("参与本项目")]),t._v("，贡献其他语言版本的代码，拥抱开源，让更多学习算法的小伙伴们收益！")])]),t._v(" "),v("h1",{attrs:{id:"数组理论基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组理论基础"}},[t._v("#")]),t._v(" 数组理论基础")]),t._v(" "),v("p",[t._v("数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力")]),t._v(" "),v("p",[t._v("也就是说，想法很简单，但实现起来 可能就不是那么回事了。")]),t._v(" "),v("p",[t._v("首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题")]),t._v(" "),v("p",[v("strong",[t._v("数组是存放在连续内存空间上的相同类型数据的集合。")])]),t._v(" "),v("p",[t._v("数组可以方便的通过下标索引的方式获取到下标下对应的数据。")]),t._v(" "),v("p",[t._v("举一个字符数组的例子，如图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png",width:"600"}})]),t._v(" "),v("p",[t._v("需要两点注意的是")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("数组下标都是从0开始的。")])]),t._v(" "),v("li",[v("strong",[t._v("数组内存空间的地址是连续的")])])]),t._v(" "),v("p",[t._v("正是"),v("strong",[t._v("因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。")])]),t._v(" "),v("p",[t._v("例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png",width:"600"}})]),t._v(" "),v("p",[t._v("而且大家如果使用C++的话，要注意vector 和 array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。")]),t._v(" "),v("p",[v("strong",[t._v("数组的元素是不能删的，只能覆盖。")])]),t._v(" "),v("p",[t._v("那么二维数组直接上图，大家应该就知道怎么回事了")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%842.png",width:"600"}})]),t._v(" "),v("p",[v("strong",[t._v("那么二维数组在内存的空间地址是连续的么？")])]),t._v(" "),v("p",[t._v("我们来举一个例子，例如： "),v("code",[t._v("int[][] rating = new int[3][4];")]),t._v(" ， 这个二维数据在内存空间可不是一个 "),v("code",[t._v("3*4")]),t._v(" 的连续地址空间")]),t._v(" "),v("p",[t._v("看了下图，就应该明白了：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%843.png",width:"600"}})]),t._v(" "),v("p",[t._v("所以"),v("strong",[t._v("二维数据在内存中不是 "),v("code",[t._v("3*4")]),t._v(" 的连续地址空间，而是四条连续的地址空间组成！")])]),t._v(" "),v("h1",{attrs:{id:"数组的经典题目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组的经典题目"}},[t._v("#")]),t._v(" 数组的经典题目")]),t._v(" "),v("p",[t._v("在面试中，数组是必考的基础数据结构。")]),t._v(" "),v("p",[t._v("其实数据的题目在思想上一般比较简单的，但是如果想高效，并不容易。")]),t._v(" "),v("p",[t._v("我们之前一共讲解了四道经典数组题目，每一道题目都代表一个类型，一种思想。")]),t._v(" "),v("h2",{attrs:{id:"二分法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二分法"}},[t._v("#")]),t._v(" 二分法")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组：每次遇到二分法，都是一看就会，一写就废"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("这道题目呢，考察数组的基本操作，思路很简单，但是通过率在简单题里并不高，不要轻敌。")]),t._v(" "),v("p",[t._v("可以使用暴力解法，通过这道题目，如果追求更优的算法，建议试一试用二分法，来解决这道题目")]),t._v(" "),v("ul",[v("li",[t._v("暴力解法时间复杂度：$O(n)$")]),t._v(" "),v("li",[t._v("二分法时间复杂度：$O(\\log n)$")])]),t._v(" "),v("p",[t._v("在这道题目中我们讲到了"),v("strong",[t._v("循环不变量原则")]),t._v("，只有在循环中坚持对区间的定义，才能清楚的把握循环中的各种细节。")]),t._v(" "),v("p",[v("strong",[t._v("二分法是算法面试中的常考题，建议通过这道题目，锻炼自己手撕二分的能力")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"双指针法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双指针法"}},[t._v("#")]),t._v(" 双指针法")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组：就移除个元素很难么？"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("双指针法（快慢指针法）："),v("strong",[t._v("通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。")])]),t._v(" "),v("ul",[v("li",[t._v("暴力解法时间复杂度：$O(n^2)$")]),t._v(" "),v("li",[t._v("双指针时间复杂度：$O(n)$")])]),t._v(" "),v("p",[t._v("这道题目迷惑了不少同学，纠结于数组中的元素为什么不能删除，主要是因为以下两点：")]),t._v(" "),v("ul",[v("li",[t._v("数组在内存中是连续的地址空间，不能释放单一元素，如果要释放，就是全释放（程序运行结束，回收内存栈空间）。")]),t._v(" "),v("li",[t._v("C++中vector和array的区别一定要弄清楚，vector的底层实现是array，封装后使用更友好。")])]),t._v(" "),v("p",[t._v("双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。")]),t._v(" "),v("h2",{attrs:{id:"滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组：滑动窗口拯救了你"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("本题介绍了数组操作中的另一个重要思想：滑动窗口。")]),t._v(" "),v("ul",[v("li",[t._v("暴力解法时间复杂度：$O(n^2)$")]),t._v(" "),v("li",[t._v("滑动窗口时间复杂度：$O(n)$")])]),t._v(" "),v("p",[t._v("本题中，主要要理解滑动窗口如何移动 窗口起始位置，达到动态更新窗口大小的，从而得出长度最小的符合条件的长度。")]),t._v(" "),v("p",[v("strong",[t._v("滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将$O(n^2)$的暴力解法降为$O(n)$。")])]),t._v(" "),v("p",[t._v("如果没有接触过这一类的方法，很难想到类似的解题思路，滑动窗口方法还是很巧妙的。")]),t._v(" "),v("h2",{attrs:{id:"模拟行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模拟行为"}},[t._v("#")]),t._v(" 模拟行为")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组：这个循环可以转懵很多人！"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。")]),t._v(" "),v("p",[t._v("在这道题目中，我们再一次介绍到了"),v("strong",[t._v("循环不变量原则")]),t._v("，其实这也是写程序中的重要原则。")]),t._v(" "),v("p",[t._v("相信大家又遇到过这种情况： 感觉题目的边界调节超多，一波接着一波的判断，找边界，踩了东墙补西墙，好不容易运行通过了，代码写的十分冗余，毫无章法，其实"),v("strong",[t._v("真正解决题目的代码都是简洁的，或者有原则性的")]),t._v("，大家可以在这道题目中体会到这一点。")]),t._v(" "),v("h1",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("从二分法到双指针，从滑动窗口到螺旋矩阵，相信如果大家真的认真做了「代码随想录」每日推荐的题目，定会有所收获。")]),t._v(" "),v("p",[t._v("推荐的题目即使大家之前做过了，再读一遍文章，也会帮助你提炼出解题的精髓所在。")]),t._v(" "),v("p",[t._v("如果感觉有所收获，希望大家多多支持，打卡转发，点赞在看 都是对我最大的鼓励！")]),t._v(" "),v("p",[t._v("最后，大家周末愉快！")]),t._v(" "),v("hr"),t._v(" "),v("div",{attrs:{align:"center"}},[v("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码一.jpg",width:"500"}})])])}),[],!1,null,null,null);r.default=a.exports}}]);