(window.webpackJsonp=window.webpackJsonp||[]).push([[576],{968:function(s,n,a){"use strict";a.r(n);var e=a(13),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[s._v("#")]),s._v(" Table of Contents")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%A2%E9%BB%91%E6%A0%91"}},[s._v("什么是红黑树")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AE%9A%E4%B9%89"}},[s._v("定义")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AE%9E%E8%B7%B5"}},[s._v("实践")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91%E6%93%8D%E4%BD%9C"}},[s._v("红黑树操作")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C"}},[s._v("插入操作")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C"}},[s._v("删除操作")])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0"}},[s._v("红黑树实现")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%8F%92%E5%85%A5"}},[s._v("插入")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9"}},[s._v("删除节点")])])])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#3%E6%80%BB%E7%BB%93"}},[s._v("3.总结")])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[s._v("参考文章")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[s._v("微信公众号")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[s._v("Java技术江湖")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[s._v("个人公众号：黄小斜")])])])])]),s._v(" "),a("p",[s._v("本文参考多篇优质技术博客，参考文章请在文末查看")]),s._v(" "),a("p",[s._v("《Java集合详解系列》是我在完成夯实Java基础篇的系列博客后准备开始整理的新系列文章。\n为了更好地诠释知识点，形成体系文章，本系列文章整理了很多优质的博客内容，如有侵权请联系我，一定删除。")]),s._v(" "),a("p",[s._v("这些文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),s._v(" "),a("p",[s._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),s._v(" "),a("blockquote",[a("p",[s._v("https://github.com/h2pl/Java-Tutorial")])]),s._v(" "),a("p",[s._v("喜欢的话麻烦点下Star、fork哈")]),s._v(" "),a("p",[s._v("本系列文章将整理于我的个人博客：")]),s._v(" "),a("blockquote",[a("p",[s._v("www.how2playlife.com")])]),s._v(" "),a("h2",{attrs:{id:"什么是红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是红黑树"}},[s._v("#")]),s._v(" 什么是红黑树")]),s._v(" "),a("p",[s._v("首先，什么是红黑树呢？ 红黑树是一种“平衡的”二叉查找树，它是一种经典高效的算法，能够保证在最坏的情况下动态集合操作的时间为O（lgn）。红黑树每个节点包含5个域，分别为color,key,left,right和p。 color是在每个节点上增加的一个存储位表示节点的颜色，可以是RED或者BLACK。key为结点中的value值，left,right为该结点的左右孩子指针，没有的话为NIL，p是一个指针，是指向该节的父节点。如下图（来自维基百科）表示就是一颗红黑树，NIL为指向外结点的指针。（外结点视为没有key的结点）")]),s._v(" "),a("p",[s._v("红黑树有什么性质呢？一般称为红黑性质，有以下五点：")]),s._v(" "),a("p",[s._v("1）每个结点或者是红的或者是黑的；")]),s._v(" "),a("p",[s._v("2）根结点是黑的；")]),s._v(" "),a("p",[s._v("3）每个叶结点（NIL）是黑的；")]),s._v(" "),a("p",[s._v("4）如果一个结点是红的，则它的两个孩子都是黑的；")]),s._v(" "),a("p",[s._v("5）对每个结点，从该结点到其他其子孙结点的所有路径上包含相同数目的黑结点。")]),s._v(" "),a("p",[s._v("为了后面的分析，我们还得知道以下知识点。")]),s._v(" "),a("p",[s._v("（1）黑高度：从某个结点x出发（不包括该结点）到达一个叶结点的任意一条路径上，黑色结点的个数称为该结点x的黑高度。")]),s._v(" "),a("p",[s._v("（2）一颗有n个内结点的红黑树的高度至多为2lg(n+1)。   （内结点视为红黑树中带关键字的结点）")]),s._v(" "),a("p",[s._v("（3）包含n个内部节点的红黑树的高度是 O(log(n))。")]),s._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),a("p",[s._v("红黑树是特殊的二叉查找树，又名R-B树(RED-BLACK-TREE)，由于红黑树是特殊的二叉查找树，即红黑树具有了二叉查找树的特性，而且红黑树还具有以下特性：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("1.每个节点要么是黑色要么是红色")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("2.根节点是黑色")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("3.每个叶子节点是黑色，并且为空节点(还有另外一种说法就是，每个叶子结点都带有两个空的黑色结点（被称为黑哨兵），如果一个结点n的只有一个左孩子，那么n的右孩子是一个黑哨兵；如果结点n只有一个右孩子，那么n的左孩子是一个黑哨兵。)")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("4.如果一个节点是红色，则它的子节点必须是黑色")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("5.从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。")])])])]),s._v(" "),a("p",[s._v("有几点需要注意的是：")]),s._v(" "),a("p",[s._v("1.特性3中指定红黑树的每个叶子节点都是空节点，但是在Java实现中红黑树将使用null代表空节点，因此遍历红黑树时看不到黑色的叶子节点，反而见到的叶子节点是红色的")]),s._v(" "),a("p",[s._v("2.特性4保证了从根节点到叶子节点的最长路径的长度不会超过任何其他路径的两倍，例如黑色高度为3的红黑树，其最短路径(路径指的是根节点到叶子节点)是2(黑节点-黑节点-黑节点)，其最长路径为4(黑节点-红节点-黑节点-红节点-黑节点)。")]),s._v(" "),a("h3",{attrs:{id:"实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[s._v("#")]),s._v(" 实践")]),s._v(" "),a("h4",{attrs:{id:"红黑树操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树操作"}},[s._v("#")]),s._v(" 红黑树操作")]),s._v(" "),a("h5",{attrs:{id:"插入操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入操作"}},[s._v("#")]),s._v(" 插入操作")]),s._v(" "),a("p",[s._v("首先红黑树在插入节点的时，我们设定插入节点的颜色为"),a("strong",[s._v("红色")]),s._v(",如果插入的是黑色节点，必然会违背特性5，即改变了红黑树的黑高度，如下插入红色结点又存在着几种情况：")]),s._v(" "),a("p",[s._v("1."),a("strong",[s._v("黑父")])]),s._v(" "),a("p",[s._v("如图所示，这种情况不会破坏红黑树的特性，即不需要任何处理")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-5c5b2c2111526b40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/317/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("2."),a("strong",[s._v("红父")])]),s._v(" "),a("p",[s._v("当其父亲为红色时又会存在以下的情况")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("红叔")])])]),s._v(" "),a("p",[s._v("红叔的情况，其实相对来说比较简单的，如下图所示，只需要通过修改父、叔的颜色为黑色，祖的颜色为红色，而且回去递归的检查祖节点即可")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-d03b6cc68cd297e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/582/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("黑叔")])])]),s._v(" "),a("p",[s._v("黑叔的情况有如下几种，这几种情况下是不能够通过修改颜色达到平衡的效果，因此会通过旋转的操作，红黑树种有两种旋转操作，左旋和右旋(现在存在的疑问，什么时候使用到左旋，什么时候使用到右旋)")]),s._v(" "),a("ul",[a("li",[s._v("Case 1:[先右旋，在改变颜色(根节点必须为黑色，其两个子节点为红色，叔节点不用改变)],如下图所示，注意省略黑哨兵节点")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-be4bb2dee4bffd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/870/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("Case 2:[先左旋变成Case1中的情况，再右旋，最后改变颜色(根节点必须为黑色，其两个子节点为红色，叔节点不用改变)],如下图所示，注意省略黑哨兵节点")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-7eed01cd63266976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("Case 3:[先左旋，最后改变颜色(根节点必须为黑色，其两个子节点为红色，叔节点不用改变)],如下图所示，注意省略黑哨兵节点")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-2885dd45740eb113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/831/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("Case 4:[先右旋变成Case 3的情况，再左旋，最后改变颜色(根节点必须为黑色，其两个子节点为红色，叔节点不用改变)],如下图所示，注意省略黑哨兵节点")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-db86cb65433a632e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/754/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("以上就是红黑树新增节点所有可能的操作，下面会介绍红黑树中的删除操作")]),s._v(" "),a("h5",{attrs:{id:"删除操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[s._v("#")]),s._v(" 删除操作")]),s._v(" "),a("p",[s._v("删除操作相比于插入操作情况更加复杂，删除一个节点可以大致分为三种情况：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.删除的节点没有孩子节点，即当前节点为叶子节点，这种可以直接删除")])]),s._v(" "),a("li",[a("p",[s._v("2.删除的节点有一个孩子节点，这种需要删除当前节点，并使用其孩子节点顶替上来")])]),s._v(" "),a("li",[a("p",[s._v("3.删除的节点有两个孩子节点，这种需要先找到其后继节点(树中大于节点的最小的元素);然后将其后继节点的内容复制到该节点上，其后继节点就相当于该节点的替身， 需要注意的是其后继节点一定不会有两个孩子节点(这点应该很好理解，如果后继节点有左孩子节点，那么当前的后继节点肯定不是最小的，说明后继节点只能存在没有孩子节点或者只有一个右孩子节点)，即这样就将问题转换成为1,2中的方式。")])])]),s._v(" "),a("p",[s._v("在讲述修复操作之前，首先需要明白几点，")]),s._v(" "),a("p",[s._v("1.对于红黑树而言，单支节点的情况只有如下图所示的一种情况，即为当前节点为黑色，其孩子节点为红色,(1.假设当前节点为红色，其两个孩子节点必须为黑色，2.若有孙子节点，则必为黑色，导致黑子数量不等，而红黑树不平衡)")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-f8b873df1b880922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/318/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("2.由于红黑树是特殊的二叉查找树，它的删除和二叉查找树类型，真正的删除点即为删除点A的中序遍历的后继(前继也可以)，通过红黑树的特性可知这个后继必然最多只能有一个孩子，其这个孩子节点必然是右孩子节点，从而为单支情况(即这个后继节点只能有一个红色孩子或没有孩子)")]),s._v(" "),a("p",[s._v("下面将详细介绍，在执行删除节点操作之后，将通过修复操作使得红黑树达到平衡的情况。")]),s._v(" "),a("ul",[a("li",[s._v("Case 1:被删除的节点为红色，则这节点必定为叶子节点(首先这里的被删除的节点指的是真正删除的节点，通过上文得知的真正删除的节点要么是节点本身，要么是其后继节点，若是节点本身则必须为叶子节点，不为叶子节点的话其会有左右孩子，则真正删除的是其右孩子树上的最小值，若是后继节点，也必须为叶子节点，若不是则其也会有左右孩子，从而和2中相违背)，这种情况下删除红色叶节点就可以了，不用进行其他的操作了。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-ff82fc5e72f98af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/431/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("Case 2:被删除的节点是黑色，其子节点是红色，将其子节点顶替上来并改变其颜色为黑色，如下图所示")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-66968f353c49fe50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/434/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Case 3:被删除的节点是黑色，其子节点也是黑色，将其子节点顶替上来，变成了双黑的问题，此时有以下情况")]),s._v(" "),a("ul",[a("li",[s._v("Case 1:新节点的兄弟节点为"),a("strong",[s._v("红色")]),s._v("，此时若新节点在左边则做左旋操作，否则做右旋操作，之后再将其父节点颜色改变为红色，兄弟节点")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-55eb7590905dbe38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/490/format/webp",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-75984ffc3773a040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/562/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("从图中可以看出，操作之后红黑树并未达到平衡状态，而是变成的"),a("strong",[s._v("黑兄")]),s._v("的情况")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Case 2:新节点的兄弟节点为"),a("strong",[s._v("黑色")]),s._v(",此时可能有如下情况")]),s._v(" "),a("ul",[a("li",[s._v("红父二黑侄：将父节点变成黑色，兄弟节点变成红色，新节点变成黑色即可,如下图所示")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-19ad02906c67ff6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-ed648a6bf4224a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/564/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("黑父二黑侄：将父节点变成新节点的颜色，新节点变成黑色，兄弟节点染成红色，还需要继续以父节点为判定点继续判断,如下图所示")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-85819fe812e784f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/603/format/webp",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-cc00764b1900a74e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/549/format/webp",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("红侄：")])]),s._v(" "),a("p",[s._v("情况一:新节点在右子树，红侄在兄弟节点左子树，此时的操作为右旋，并将兄弟节点变为父亲的颜色，父亲节点变为黑色，侄节点变为黑色，如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-62ecd431cc7a3e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/895/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("情况二:新节点在右子树，红侄在兄弟节点右子树，此时的操作为先左旋，后右旋并将侄节点变为父亲的颜色，父节点变为黑色，如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-b5e0ada3d870dcf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("情况三：新节点在左子树，红侄在兄弟节点左子树,此时的操作为先右旋在左旋并将侄节点变为父亲的颜色，父亲节点变为黑色，如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-bd3e2c1efdc7a147.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/885/format/webp",alt:""}})]),s._v(" "),a("p",[s._v("情况四：新节点在右子树，红侄在兄弟节点右子树,此时的操作为左旋，并将兄弟节点变为父节点的颜色，父亲节点变为黑色，侄节点变为黑色，如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4761309-9f34c34f7d02da29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"红黑树实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树实现"}},[s._v("#")]),s._v(" 红黑树实现")]),s._v(" "),a("p",[s._v("如下是使用JAVA代码实现红黑树的过程，主要包括了插入、删除、左旋、右旋、遍历等操作")]),s._v(" "),a("h5",{attrs:{id:"插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[s._v("#")]),s._v(" 插入")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/* 插入一个节点\n * @param node\n */\nprivate void insert(RBTreeNode<T> node){\n    int cmp;\n    RBTreeNode<T> root = this.rootNode;\n    RBTreeNode<T> parent = null;\n\n    //定位节点添加到哪个父节点下\n    while(null != root){\n        parent = root;\n        cmp = node.key.compareTo(root.key);\n        if (cmp < 0){\n            root = root.left;\n        } else {\n            root = root.right;\n        }\n    }\n\n    node.parent = parent;\n    //表示当前没一个节点，那么就当新增的节点为根节点\n    if (null == parent){\n        this.rootNode = node;\n    } else {\n        //找出在当前父节点下新增节点的位置\n        cmp = node.key.compareTo(parent.key);\n        if (cmp < 0){\n            parent.left = node;\n        } else {\n            parent.right = node;\n        }\n    }\n\n    //设置插入节点的颜色为红色\n    node.color = COLOR_RED;\n\n    //修正为红黑树\n    insertFixUp(node);\n}\n\n/**\n * 红黑树插入修正\n * @param node\n */\nprivate void insertFixUp(RBTreeNode<T> node){\n    RBTreeNode<T> parent,gparent;\n    //节点的父节点存在并且为红色\n    while( ((parent = getParent(node)) != null) && isRed(parent)){\n        gparent = getParent(parent);\n\n        //如果其祖父节点是空怎么处理\n        // 若父节点是祖父节点的左孩子\n        if(parent == gparent.left){\n            RBTreeNode<T> uncle = gparent.right;\n            if ((null != uncle) && isRed(uncle)){\n                setColorBlack(uncle);\n                setColorBlack(parent);\n                setColorRed(gparent);\n                node = gparent;\n                continue;\n            }\n\n            if (parent.right == node){\n                RBTreeNode<T> tmp;\n                leftRotate(parent);\n                tmp = parent;\n                parent = node;\n                node = tmp;\n            }\n\n            setColorBlack(parent);\n            setColorRed(gparent);\n            rightRotate(gparent);\n        } else {\n            RBTreeNode<T> uncle = gparent.left;\n            if ((null != uncle) && isRed(uncle)){\n                setColorBlack(uncle);\n                setColorBlack(parent);\n                setColorRed(gparent);\n                node = gparent;\n                continue;\n            }\n\n            if (parent.left == node){\n                RBTreeNode<T> tmp;\n                rightRotate(parent);\n                tmp = parent;\n                parent = node;\n                node = tmp;\n            }\n\n            setColorBlack(parent);\n            setColorRed(gparent);\n            leftRotate(gparent);\n        }\n    }\n    setColorBlack(this.rootNode);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br")])]),a("p",[s._v("插入节点的操作主要分为以下几步：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.定位：即遍历整理红黑树，确定添加的位置，如上代码中insert方法中就是在找到添加的位置")])]),s._v(" "),a("li",[a("p",[s._v("2.修复：这也就是前面介绍的，添加元素后可能会使得红黑树不在满足其特性，这时候需要通过变色、旋转来调整红黑树，也就是如上代码中insertFixUp方法")])])]),s._v(" "),a("h5",{attrs:{id:"删除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[s._v("#")]),s._v(" 删除节点")]),s._v(" "),a("p",[s._v("如下为删除节点的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("private void remove(RBTreeNode<T> node){\n    RBTreeNode<T> child,parent;\n    boolean color;\n    //被删除节点左右孩子都不为空的情况\n    if ((null != node.left) && (null != node.right)){\n\n        //获取到被删除节点的后继节点\n        RBTreeNode<T> replace = node;\n\n        replace = replace.right;\n        while(null != replace.left){\n            replace = replace.left;\n        }\n\n        //node节点不是根节点\n        if (null != getParent(node)){\n            //node是左节点\n            if (getParent(node).left == node){\n                getParent(node).left = replace;\n            } else {\n                getParent(node).right = replace;\n            }\n        } else {\n            this.rootNode = replace;\n        }\n\n        child = replace.right;\n        parent = getParent(replace);\n        color = getColor(replace);\n\n        if (parent == node){\n            parent = replace;\n        } else {\n            if (null != child){\n                setParent(child,parent);\n            }\n            parent.left = child;\n\n            replace.right = node.right;\n            setParent(node.right, replace);\n        }\n\n        replace.parent = node.parent;\n        replace.color = node.color;\n        replace.left = node.left;\n        node.left.parent = replace;\n        if (color == COLOR_BLACK){\n            removeFixUp(child,parent);\n        }\n\n        node = null;\n        return;\n    }\n\n    if (null != node.left){\n        child = node.left;\n    } else {\n        child = node.right;\n    }\n\n    parent = node.parent;\n    color = node.color;\n    if (null != child){\n        child.parent = parent;\n    }\n\n    if (null != parent){\n        if (parent.left == node){\n            parent.left = child;\n        } else {\n            parent.right = child;\n        }\n    } else {\n        this.rootNode = child;\n    }\n\n    if (color == COLOR_BLACK){\n        removeFixUp(child, parent);\n    }\n    node = null;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 删除修复\n * @param node\n * @param parent\n */\nprivate void removeFixUp(RBTreeNode<T> node, RBTreeNode<T> parent){\n    RBTreeNode<T> other;\n    //node不为空且为黑色，并且不为根节点\n    while ((null == node || isBlack(node)) && (node != this.rootNode) ){\n        //node是父节点的左孩子\n        if (node == parent.left){\n            //获取到其右孩子\n            other = parent.right;\n            //node节点的兄弟节点是红色\n            if (isRed(other)){\n                setColorBlack(other);\n                setColorRed(parent);\n                leftRotate(parent);\n                other = parent.right;\n            }\n\n            //node节点的兄弟节点是黑色，且兄弟节点的两个孩子节点也是黑色\n            if ((other.left == null || isBlack(other.left)) &&\n                    (other.right == null || isBlack(other.right))){\n                setColorRed(other);\n                node = parent;\n                parent = getParent(node);\n            } else {\n                //node节点的兄弟节点是黑色，且兄弟节点的右孩子是红色\n                if (null == other.right || isBlack(other.right)){\n                    setColorBlack(other.left);\n                    setColorRed(other);\n                    rightRotate(other);\n                    other = parent.right;\n                }\n                //node节点的兄弟节点是黑色，且兄弟节点的右孩子是红色，左孩子是任意颜色\n                setColor(other, getColor(parent));\n                setColorBlack(parent);\n                setColorBlack(other.right);\n                leftRotate(parent);\n                node = this.rootNode;\n                break;\n            }\n        } else {\n            other = parent.left;\n            if (isRed(other)){\n                setColorBlack(other);\n                setColorRed(parent);\n                rightRotate(parent);\n                other = parent.left;\n            }\n\n            if ((null == other.left || isBlack(other.left)) &&\n                    (null == other.right || isBlack(other.right))){\n                setColorRed(other);\n                node = parent;\n                parent = getParent(node);\n            } else {\n                if (null == other.left || isBlack(other.left)){\n                    setColorBlack(other.right);\n                    setColorRed(other);\n                    leftRotate(other);\n                    other = parent.left;\n                }\n\n                setColor(other,getColor(parent));\n                setColorBlack(parent);\n                setColorBlack(other.left);\n                rightRotate(parent);\n                node = this.rootNode;\n                break;\n            }\n        }\n    }\n    if (node!=null)\n        setColorBlack(node);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br")])]),a("p",[s._v("删除节点主要分为几种情况去做对应的处理：")]),s._v(" "),a("ul",[a("li",[s._v("1.删除节点,按照如下三种情况去删除节点\n"),a("ul",[a("li",[s._v("1.真正删除的节点没有子节点")]),s._v(" "),a("li",[s._v("2.真正删除的节点有一个子节点")]),s._v(" "),a("li",[s._v("3.正在删除的节点有两个子节点")])])]),s._v(" "),a("li",[s._v("2.修复红黑树的特性，如代码中调用removeFixUp方法修复红黑树的特性。")])]),s._v(" "),a("h3",{attrs:{id:"_3-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[s._v("#")]),s._v(" 3.总结")]),s._v(" "),a("p",[s._v("以上主要介绍了红黑树的一些特性，包括一些操作详细的解析了里面的过程，写的时间比较长，感觉确实比较难理清楚。后面会持续的理解更深入，若有存在问题的地方，请指正。")]),s._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.jianshu.com/?t=http://www.cnblogs.com/skywang12345/p/3624343.html/",target:"_blank",rel:"noopener noreferrer"}},[s._v("红黑树(五)之 Java的实现"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.jianshu.com/?t=https://www.ibm.com/developerworks/cn/java/j-lo-tree/index.html?ca=drs-",target:"_blank",rel:"noopener noreferrer"}},[s._v("通过分析 JDK 源代码研究 TreeMap 红黑树算法实现"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.jianshu.com/?t=http://blog.csdn.net/eric491179912/article/details/6179908",target:"_blank",rel:"noopener noreferrer"}},[s._v("红黑树"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.jianshu.com/?t=http://www.cnblogs.com/deliver/p/5392768.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("（图解）红黑树的插入和删除"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.jianshu.com/?t=https://zhuanlan.zhihu.com/p/24367771",target:"_blank",rel:"noopener noreferrer"}},[s._v("红黑树深入剖析及Java实现"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"微信公众号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[s._v("#")]),s._v(" 微信公众号")]),s._v(" "),a("h3",{attrs:{id:"java技术江湖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[s._v("#")]),s._v(" Java技术江湖")]),s._v(" "),a("p",[s._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),s._v(" "),a("p",[a("strong",[s._v("Java工程师必备学习资源:")]),s._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),a("strong",[s._v("“Java”")]),s._v(" 即可免费无套路获取。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),s._v(" "),a("h3",{attrs:{id:"个人公众号-黄小斜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[s._v("#")]),s._v(" 个人公众号：黄小斜")]),s._v(" "),a("p",[s._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),s._v(" "),a("p",[a("strong",[s._v("程序员3T技术学习资源：")]),s._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),a("strong",[s._v("“资料”")]),s._v(" 即可免费无套路获取。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})]),s._v(" "),a("p",[s._v("​")])])}),[],!1,null,null,null);n.default=t.exports}}]);