(window.webpackJsonp=window.webpackJsonp||[]).push([[1405],{1797:function(a,t,r){"use strict";r.r(t);var s=r(13),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"_1-面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-面试题"}},[a._v("#")]),a._v(" 1 面试题")]),a._v(" "),r("p",[a._v("Dubbo负载均衡策略和集群容错策略都有哪些？动态代理策略呢？")]),a._v(" "),r("h1",{attrs:{id:"_2-考点分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-考点分析"}},[a._v("#")]),a._v(" 2 考点分析")]),a._v(" "),r("p",[a._v("这些都是关于Dubbo必须知道，基本原理，序列化是什么协议，具体用dubbo的时候，如何负载均衡，如何高可用，如何动态代理等.")]),a._v(" "),r("p",[a._v("就是看你对Dubbo掌握程度")]),a._v(" "),r("ul",[r("li",[a._v("工作原理：服务注册，注册中心，消费者，代理通信，负载均衡")]),a._v(" "),r("li",[a._v("网络通信、序列化：dubbo协议，长连接，NIO，hessian序列化协议")]),a._v(" "),r("li",[a._v("负载均衡策略，集群容错策略，动态代理策略：dubbo跑起来的时候一些功能是如何运转的，怎么做负载均衡？怎么做集群容错？怎么生成动态代理？")]),a._v(" "),r("li",[a._v("dubbo SPI机制：你了解不了解dubbo的SPI机制？如何基于SPI机制对dubbo进行扩展？")])]),a._v(" "),r("h1",{attrs:{id:"_3-负载均衡策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-负载均衡策略"}},[a._v("#")]),a._v(" 3 负载均衡策略")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://ask.qcloudimg.com/http-save/1752328/nphpq0four.png",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"_3-1-random-loadbalance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-random-loadbalance"}},[a._v("#")]),a._v(" 3.1 random loadbalance")]),a._v(" "),r("p",[a._v("dubbo默认采用random load balance,即随机调用实现负载均衡，可以对provider不同实例设置不同的权重，会按照权重来负载均衡，权重越大分配流量越高，一般就用默认的即可.")]),a._v(" "),r("h2",{attrs:{id:"_3-2-roundrobin-loadbalance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-roundrobin-loadbalance"}},[a._v("#")]),a._v(" 3.2 roundrobin loadbalance")]),a._v(" "),r("p",[a._v("均匀地将流量打到各个机器上去，但如果各个机器的性能不一样，容易导致性能差的机器负载过高。所以此时需要调整权重，让性能差的机器承载权重小一些，流量少一些。")]),a._v(" "),r("h2",{attrs:{id:"_3-3-leastactive-loadbalance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-leastactive-loadbalance"}},[a._v("#")]),a._v(" 3.3  leastactive loadbalance")]),a._v(" "),r("p",[a._v("自动感知一下，如果某个机器性能越差，那么接收的请求越少，越不活跃，此时就会给不活跃的性能差的机器更少的请求")]),a._v(" "),r("h2",{attrs:{id:"_3-4-consistanthash-loadbalance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-consistanthash-loadbalance"}},[a._v("#")]),a._v(" 3.4 consistanthash loadbalance")]),a._v(" "),r("p",[a._v("一致性Hash算法，相同参数的请求一定分发到一个provider上去，provider挂掉的时候，会基于虚拟节点均匀分配剩余的流量，抖动不会太大")]),a._v(" "),r("p",[a._v("如果你需要的不是随机负载均衡，是要一类请求都到一个节点，那就走这个一致性hash策略。")]),a._v(" "),r("h1",{attrs:{id:"_4-集群容错策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群容错策略"}},[a._v("#")]),a._v(" 4 集群容错策略")]),a._v(" "),r("h2",{attrs:{id:"_4-1-failover-cluster模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-failover-cluster模式"}},[a._v("#")]),a._v(" 4.1 failover cluster模式")]),a._v(" "),r("p",[a._v("默认,失败自动切换，自动重试其他机器,常用于读操作")]),a._v(" "),r("h2",{attrs:{id:"_4-2-failfast-cluster模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-failfast-cluster模式"}},[a._v("#")]),a._v(" 4.2 failfast cluster模式")]),a._v(" "),r("p",[a._v("一次调用失败就立即失败，常用于写操作")]),a._v(" "),r("h2",{attrs:{id:"_4-3-failsafe-cluster模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-failsafe-cluster模式"}},[a._v("#")]),a._v(" 4.3 failsafe cluster模式")]),a._v(" "),r("p",[a._v("发生异常时忽略掉，常用于不重要的接口调用，如记录日志")]),a._v(" "),r("h2",{attrs:{id:"_4-4-failbackc-cluster模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-failbackc-cluster模式"}},[a._v("#")]),a._v(" 4.4 failbackc cluster模式")]),a._v(" "),r("p",[a._v("失败了后台自动记录请求，然后定时重发，适于写消息队列")]),a._v(" "),r("h2",{attrs:{id:"_4-5-forking-cluster"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-forking-cluster"}},[a._v("#")]),a._v(" 4.5 forking cluster")]),a._v(" "),r("p",[r("strong",[a._v("并行调用")]),a._v("多个provider，只要一个成功就立即返回")]),a._v(" "),r("h2",{attrs:{id:"_4-6-broadcacst-cluster"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-broadcacst-cluster"}},[a._v("#")]),a._v(" 4.6 broadcacst cluster")]),a._v(" "),r("p",[a._v("逐个调用所有的provider")]),a._v(" "),r("h1",{attrs:{id:"_5-动态代理策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-动态代理策略"}},[a._v("#")]),a._v(" 5 动态代理策略")]),a._v(" "),r("p",[a._v("默认使用javassist动态字节码生成，创建代理类")]),a._v(" "),r("p",[a._v("但是可以通过spi扩展机制配置自己的动态代理策略")]),a._v(" "),r("h1",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),r("p",[a._v("《Java工程师面试突击第1季-中华石杉老师》")]),a._v(" "),r("h1",{attrs:{id:"x-交流学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-交流学习"}},[a._v("#")]),a._v(" X 交流学习")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190504005601174.jpg",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"java交流群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java交流群"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://jq.qq.com/?_wv=1027&k=5UB4P1T",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java交流群"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"博客"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#博客"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://blog.csdn.net/qq_33589510",target:"_blank",rel:"noopener noreferrer"}},[a._v("博客"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"github"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://github.com/Wasabi1234",target:"_blank",rel:"noopener noreferrer"}},[a._v("Github"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);