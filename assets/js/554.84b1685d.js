(window.webpackJsonp=window.webpackJsonp||[]).push([[554],{944:function(t,a,n){"use strict";n.r(a);var e=n(13),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B"}},[t._v("Java中的线程")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E6%9C%BA"}},[t._v("Java线程状态机")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"}},[t._v("一个线程的生命周期")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98"}},[t._v("Java多线程实战")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[t._v("多线程的实现")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2"}},[t._v("线程状态转换")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#java-thread%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95"}},[t._v("Java Thread常用方法")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#threadyield%EF%BC%9A"}},[t._v("Thread#yield()：")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#threadinterrupt%EF%BC%9A"}},[t._v("Thread.interrupt()：")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#threadinterrupted%EF%BC%8C%E8%BF%94%E5%9B%9Etrue%E6%88%96%E8%80%85false%EF%BC%9A"}},[t._v("Thread#interrupted()，返回true或者false：")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#threadisinterrupted%EF%BC%8C%E8%BF%94%E5%9B%9Etrue%E6%88%96%E8%80%85false%EF%BC%9A"}},[t._v("Thread.isInterrupted()，返回true或者false：")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#threadjoin%EF%BC%8Cthreadjointime%EF%BC%9A"}},[t._v("Thread#join()，Thread#join(time)：")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B"}},[t._v("构造方法和守护线程")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8Cisalive%E6%96%B9%E6%B3%95"}},[t._v("启动线程的方式和isAlive方法")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7"}},[t._v("Java多线程优先级")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98"}},[t._v("Java多线程面试题")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[t._v("参考文章")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[t._v("微信公众号")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[t._v("Java技术江湖")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[t._v("个人公众号：黄小斜")])])])])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"title-夯实java基础系列17-一文搞懂java多线程使用方式、实现原理以及常见面试题date-2019-9-17-15-56-26-文章生成时间-一般不改categories-java技术江湖-java基础tags-多线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#title-夯实java基础系列17-一文搞懂java多线程使用方式、实现原理以及常见面试题date-2019-9-17-15-56-26-文章生成时间-一般不改categories-java技术江湖-java基础tags-多线程"}},[t._v("#")]),t._v(" title: 夯实Java基础系列17：一文搞懂Java多线程使用方式、实现原理以及常见面试题\ndate: 2019-9-17 15:56:26 # 文章生成时间，一般不改\ncategories:\n- Java技术江湖\n- Java基础\ntags:\n- 多线程")]),t._v(" "),n("p",[t._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),t._v(" "),n("blockquote",[n("p",[t._v("https://github.com/h2pl/Java-Tutorial")])]),t._v(" "),n("p",[t._v("喜欢的话麻烦点下Star哈")]),t._v(" "),n("p",[t._v("文章首发于我的个人博客：")]),t._v(" "),n("blockquote",[n("p",[t._v("www.how2playlife.com")])]),t._v(" "),n("p",[t._v("本文是微信公众号【Java技术江湖】的《夯实Java基础系列博文》其中一篇，本文部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。\n该系列博文会告诉你如何从入门到进阶，一步步地学习Java基础知识，并上手进行实战，接着了解每个Java知识点背后的实现原理，更完整地了解整个Java技术体系，形成自己的知识框架。为了更好地总结和检验你的学习成果，本系列文章也会提供每个知识点对应的面试题以及参考答案。")]),t._v(" "),n("p",[t._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。")]),t._v(" "),n("h2",{attrs:{id:"java中的线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java中的线程"}},[t._v("#")]),t._v(" Java中的线程")]),t._v(" "),n("p",[t._v("Java之父对线程的定义是：")]),t._v(" "),n("blockquote",[n("p",[t._v("线程是一个独立执行的调用序列，同一个进程的线程在同一时刻共享一些系统资源（比如文件句柄等）也能访问同一个进程所创建的对象资源（内存资源）。java.lang.Thread对象负责统计和控制这种行为。")])]),t._v(" "),n("blockquote",[n("p",[t._v("每个程序都至少拥有一个线程-即作为Java虚拟机(JVM)启动参数运行在主类main方法的线程。在Java虚拟机初始化过程中也可能启动其他的后台线程。这种线程的数目和种类因JVM的实现而异。然而所有用户级线程都是显式被构造并在主线程或者是其他用户线程中被启动。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("  本文主要讲了java中多线程的使用方法、线程同步、线程数据传递、线程状态及相应的一些线程函数用法、概述等。在这之前，首先让我们来了解下在操作系统中进程和线程的区别：\n\n　　进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）\n\n　　线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）\n\n　　线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。\n\n　　多进程是指操作系统能同时运行多个任务（程序）。\n\n　　多线程是指在同一程序中有多个顺序流在执行。\n\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用\n")])])]),n("h2",{attrs:{id:"java线程状态机"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java线程状态机"}},[t._v("#")]),t._v(" Java线程状态机")]),t._v(" "),n("p",[t._v("Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。")]),t._v(" "),n("p",[t._v("多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。")]),t._v(" "),n("p",[t._v("这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。")]),t._v(" "),n("p",[t._v("多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。")]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"一个线程的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个线程的生命周期"}},[t._v("#")]),t._v(" 一个线程的生命周期")]),t._v(" "),n("p",[t._v("线程是一个动态执行的过程，它也有一个从产生到死亡的过程。")]),t._v(" "),n("p",[t._v("下图显示了一个线程完整的生命周期。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg",alt:""}})]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("新建状态:")])]),t._v(" "),n("p",[t._v("使用 "),n("strong",[t._v("new")]),t._v(" 关键字和 "),n("strong",[t._v("Thread")]),t._v(" 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 "),n("strong",[t._v("start()")]),t._v(" 这个线程。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("就绪状态:")])]),t._v(" "),n("p",[t._v("当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("运行状态:")])]),t._v(" "),n("p",[t._v("如果就绪状态的线程获取 CPU 资源，就可以执行 "),n("strong",[t._v("run()")]),t._v("，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("阻塞状态:")])]),t._v(" "),n("p",[t._v("如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。")])]),t._v(" "),n("li",[n("p",[t._v("同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。")])]),t._v(" "),n("li",[n("p",[t._v("其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("死亡状态:")])]),t._v(" "),n("p",[t._v("一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。")])])]),t._v(" "),n("h2",{attrs:{id:"java多线程实战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java多线程实战"}},[t._v("#")]),t._v(" Java多线程实战")]),t._v(" "),n("h2",{attrs:{id:"多线程的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程的实现"}},[t._v("#")]),t._v(" 多线程的实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public class 多线程实例 {\n\n    //继承thread\n    @Test\n    public void test1() {\n        class A extends Thread {\n            @Override\n            public void run() {\n                System.out.println("A run");\n            }\n        }\n        A a = new A();\n        a.start();\n    }\n\n    //实现Runnable\n    @Test\n    public void test2() {\n        class B implements Runnable {\n\n            @Override\n            public void run() {\n                System.out.println("B run");\n            }\n        }\n        B b = new B();\n        //Runable实现类需要由Thread类包装后才能执行\n        new Thread(b).start();\n    }\n\n    //有返回值的线程\n    @Test\n    public void test3() {\n        Callable callable = new Callable() {\n            int sum = 0;\n            @Override\n            public Object call() throws Exception {\n                for (int i = 0;i < 5;i ++) {\n                    sum += i;\n                }\n                return sum;\n            }\n        };\n        //这里要用FutureTask，否则不能加入Thread构造方法\n        FutureTask futureTask = new FutureTask(callable);\n        new Thread(futureTask).start();\n        try {\n            System.out.println(futureTask.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n\n    //线程池实现\n    @Test\n    public void test4() {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        //execute直接执行线程\n        executorService.execute(new Thread());\n        executorService.execute(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println("runnable");\n            }\n        });\n        //submit提交有返回结果的任务，运行完后返回结果。\n        Future future = executorService.submit(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                return "a";\n            }\n        });\n        try {\n            System.out.println(future.get());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        ArrayList<String> list = new ArrayList<>();\n        //有返回值的线程组将返回值存进集合\n        for (int i = 0;i < 5;i ++ ) {\n            int finalI = i;\n            Future future1 = executorService.submit(new Callable<String>() {\n                @Override\n                public String call() throws Exception {\n                    return "res" + finalI;\n                }\n            });\n            try {\n                list.add((String) future1.get());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n        for (String s : list) {\n            System.out.println(s);\n        }\n    }\n}\n')])])]),n("h2",{attrs:{id:"线程状态转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程状态转换"}},[t._v("#")]),t._v(" 线程状态转换")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public class 线程的状态转换 {\n//一开始线程是init状态，结束时是terminated状态\nclass t implements Runnable {\n    private String name;\n    public t(String name) {\n        this.name = name;\n    }\n    @Override\n    public void run() {\n        System.out.println(name + "run");\n    }\n}\n\n//测试join，父线程在子线程运行时进入waiting状态\n@Test\npublic void test1() throws InterruptedException {\n    Thread dad = new Thread(new Runnable() {\n        Thread son = new Thread(new t("son"));\n        @Override\n        public void run() {\n            System.out.println("dad init");\n            son.start();\n            try {\n                //保证子线程运行完再运行父线程\n                son.join();\n                System.out.println("dad run");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    //调用start，线程进入runnable状态，等待系统调度\n    dad.start();\n    //在父线程中对子线程实例使用join，保证子线程在父线程之前执行完\n\n}\n\n//测试sleep\n@Test\npublic void test2(){\n    Thread t1 = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println("t1 run");\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n    //主线程休眠。进入time waiting状态\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    t1.start();\n\n}\n\n//线程2进入blocked状态。\npublic static void main(String[] args) {\n    test4();\n    Thread.yield();//进入runnable状态\n}\n\n//测试blocked状态\npublic static void test4() {\n    class A {\n        //线程1获得实例锁以后线程2无法获得实例锁，所以进入blocked状态\n        synchronized void run() {\n            while (true) {\n                System.out.println("run");\n            }\n        }\n    }\n    A a = new A();\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println("t1 get lock");\n            a.run();\n        }\n    }).start();\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println("t2 get lock");\n            a.run();\n        }\n    }).start();\n\n}\n\n//volatile保证线程可见性\nvolatile static int flag = 1;\n//object作为锁对象，用于线程使用wait和notify方法\nvolatile static Object o = new Object();\n//测试wait和notify\n//wait后进入waiting状态，被notify进入blocked（阻塞等待锁释放）或者runnable状态（获取到锁）\npublic void test5() {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            //wait和notify只能在同步代码块内使用\n            synchronized (o) {\n                while (true) {\n                    if (flag == 0) {\n                        try {\n                            Thread.sleep(2000);\n                            System.out.println("thread1 wait");\n                            //释放锁，线程挂起进入object的等待队列，后续代码运行\n                            o.wait();\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    System.out.println("thread1 run");\n                    System.out.println("notify t2");\n                    flag = 0;\n                    //通知等待队列的一个线程获取锁\n                    o.notify();\n                }\n            }\n        }\n    }).start();\n    //解释同上\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            while (true) {\n                synchronized (o) {\n                    if (flag == 1) {\n                        try {\n                            Thread.sleep(2000);\n                            System.out.println("thread2 wait");\n                            o.wait();\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    System.out.println("thread2 run");\n                    System.out.println("notify t1");\n                    flag = 1;\n                    o.notify();\n                }\n            }\n        }\n    }).start();\n}\n\n//输出结果是\n//    thread1 run\n//    notify t2\n//    thread1 wait\n//    thread2 run\n//    notify t1\n//    thread2 wait\n//    thread1 run\n//    notify t2\n//不断循环\n\n}\n')])])]),n("h2",{attrs:{id:"java-thread常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-thread常用方法"}},[t._v("#")]),t._v(" Java Thread常用方法")]),t._v(" "),n("h3",{attrs:{id:"thread-yield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-yield"}},[t._v("#")]),t._v(" Thread#yield()：")]),t._v(" "),n("p",[t._v("执行此方法会向系统线程调度器（Schelduler）发出一个暗示，告诉其当前JAVA线程打算放弃对CPU的使用，但该暗示，有可能被调度器忽略。使用该方法，可以防止线程对CPU的过度使用，提高系统性能。")]),t._v(" "),n("p",[t._v("Thread#sleep(time)或Thread.sleep(time, nanos)：")]),t._v(" "),n("p",[t._v("使当前线程进入休眠阶段，状态变为：TIME_WAITING")]),t._v(" "),n("h3",{attrs:{id:"thread-interrupt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-interrupt"}},[t._v("#")]),t._v(" Thread.interrupt()：")]),t._v(" "),n("p",[t._v("中断当前线程的执行，允许当前线程对自身进行中断，否则将会校验调用方线程是否有对该线程的权限。")]),t._v(" "),n("p",[t._v("如果当前线程因被调用Object#wait(),Object#wait(long, int), 或者线程本身的join(), join(long),sleep()处于阻塞状态中，此时调用interrupt方法会使抛出InterruptedException，而且线程的阻塞状态将会被清除。")]),t._v(" "),n("h3",{attrs:{id:"thread-interrupted-返回true或者false"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-interrupted-返回true或者false"}},[t._v("#")]),t._v(" Thread#interrupted()，返回true或者false：")]),t._v(" "),n("p",[t._v("查看当前线程是否处于中断状态，这个方法比较特殊之处在于，如果调用成功，会将当前线程的interrupt status清除。所以如果连续2次调用该方法，第二次将返回false。")]),t._v(" "),n("h3",{attrs:{id:"thread-isinterrupted-返回true或者false"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-isinterrupted-返回true或者false"}},[t._v("#")]),t._v(" Thread.isInterrupted()，返回true或者false：")]),t._v(" "),n("p",[t._v("与上面方法相同的地方在于，该方法返回当前线程的中断状态。不同的地方在于，它不会清除当前线程的interrupt status状态。")]),t._v(" "),n("h3",{attrs:{id:"thread-join-thread-join-time"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-join-thread-join-time"}},[t._v("#")]),t._v(" Thread#join()，Thread#join(time)：")]),t._v(" "),n("p",[t._v("A线程调用B线程的join()方法，将会使A等待B执行，直到B线程终止。如果传入time参数，将会使A等待B执行time的时间，如果time时间到达，将会切换进A线程，继续执行A线程。")]),t._v(" "),n("h2",{attrs:{id:"构造方法和守护线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造方法和守护线程"}},[t._v("#")]),t._v(" 构造方法和守护线程")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("构造方法\nThread类中不同的构造方法接受如下参数的不同组合：\n\n一个Runnable对象，这种情况下，Thread.start方法将会调用对应Runnable对象的run方法。如果没有提供Runnable对象，那么就会立即得到一个Thread.run的默认实现。\n\n一个作为线程标识名的String字符串，该标识在跟踪和调试过程中会非常有用，除此别无它用。\n\n线程组（ThreadGroup），用来放置新创建的线程，如果提供的ThreadGroup不允许被访问，那么就会抛出一个SecurityException 。\n\n\n\nThread对象拥有一个守护(daemon)标识属性，这个属性无法在构造方法中被赋值，但是可以在线程启动之前设置该属性(通过setDaemon方法)。\n\n当程序中所有的非守护线程都已经终止，调用setDaemon方法可能会导致虚拟机粗暴的终止线程并退出。\n\nisDaemon方法能够返回该属性的值。守护状态的作用非常有限，即使是后台线程在程序退出的时候也经常需要做一些清理工作。\n\n（daemon的发音为”day-mon”,这是系统编程传统的遗留，系统守护进程是一个持续运行的进程，比如打印机队列管理，它总是在系统中运行。）\n")])])]),n("h2",{attrs:{id:"启动线程的方式和isalive方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动线程的方式和isalive方法"}},[t._v("#")]),t._v(" 启动线程的方式和isAlive方法")]),t._v(" "),n("p",[t._v("启动线程\n调用start方法会触发Thread实例以一个新的线程启动其run方法。新线程不会持有调用线程的任何同步锁。")]),t._v(" "),n("p",[t._v("当一个线程正常地运行结束或者抛出某种未检测的异常（比如，运行时异常(RuntimeException)，错误(ERROR) 或者其子类）线程就会终止。")]),t._v(" "),n("p",[n("strong",[t._v("当线程终止之后，是不能被重新启动的。在同一个Thread上调用多次start方法会抛出InvalidThreadStateException异常。")])]),t._v(" "),n("p",[t._v("如果线程已经启动但是还没有终止，那么调用isAlive方法就会返回true.即使线程由于某些原因处于阻塞(Blocked)状态该方法依然返回true。")]),t._v(" "),n("p",[t._v("如果线程已经被取消(cancelled),那么调用其isAlive在什么时候返回false就因各Java虚拟机的实现而异了。没有方法可以得知一个处于非活动状态的线程是否已经被启动过了。")]),t._v(" "),n("h2",{attrs:{id:"java多线程优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java多线程优先级"}},[t._v("#")]),t._v(" Java多线程优先级")]),t._v(" "),n("p",[n("strong",[t._v("Java的线程实现基本上都是内核级线程的实现，所以Java线程的具体执行还取决于操作系统的特性。")])]),t._v(" "),n("p",[t._v("Java虚拟机为了实现跨平台(不同的硬件平台和各种操作系统)的特性，Java语言在线程调度与调度公平性上未作出任何的承诺，甚至都不会严格保证线程会被执行。但是Java线程却支持优先级的方法，这些方法会影响线程的调度：")]),t._v(" "),n("p",[t._v("每个线程都有一个优先级，分布在Thread.MIN_PRIORITY和Thread.MAX_PRIORITY之间（分别为1和10）\n默认情况下，新创建的线程都拥有和创建它的线程相同的优先级。main方法所关联的初始化线程拥有一个默认的优先级，这个优先级是Thread.NORM_PRIORITY (5).")]),t._v(" "),n("p",[t._v("线程的当前优先级可以通过getPriority方法获得。\n线程的优先级可以通过setPriority方法来动态的修改，一个线程的最高优先级由其所在的线程组限定。")]),t._v(" "),n("h2",{attrs:{id:"java多线程面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java多线程面试题"}},[t._v("#")]),t._v(" Java多线程面试题")]),t._v(" "),n("p",[t._v("这篇文章主要是对多线程的问题进行总结的，因此罗列了40个多线程的问题。")]),t._v(" "),n("p",[t._v("这些多线程的问题，有些来源于各大网站、有些来源于自己的思考。可能有些问题网上有、可能有些问题对应的答案也有、也可能有些各位网友也都看过，但是本文写作的重心就是所有的问题都会按照自己的理解回答一遍，不会去看网上的答案，因此可能有些问题讲的不对，能指正的希望大家不吝指教。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("1、多线程有什么用？")])])]),t._v(" "),n("p",[t._v('一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓"知其然知其所以然"，"会用"只是"知其然"，"为什么用"才是"知其所以然"，只有达到"知其然知其所以然"的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：')]),t._v(" "),n("p",[n("strong",[t._v("1）发挥多核CPU的优势")])]),t._v(" "),n("p",[t._v("随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。"),n("strong",[t._v('单核CPU上所谓的"多线程"那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程"同时"运行罢了')]),t._v("。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。")]),t._v(" "),n("p",[n("strong",[t._v("2）防止阻塞")])]),t._v(" "),n("p",[t._v("从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。")]),t._v(" "),n("p",[n("strong",[t._v("3）便于建模")])]),t._v(" "),n("p",[t._v("这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("2、创建线程的方式")])])]),t._v(" "),n("p",[t._v("比较常见的一个问题了，一般就是两种：")]),t._v(" "),n("p",[t._v("1）继承Thread类")]),t._v(" "),n("p",[t._v("2）实现Runnable接口")]),t._v(" "),n("p",[t._v("至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，"),n("strong",[t._v("面向接口编程")]),t._v("也是设计模式6大原则的核心。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("3、start()方法和run()方法的区别")])])]),t._v(" "),n("p",[t._v("只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("4、Runnable接口和Callable接口的区别")])])]),t._v(" "),n("p",[t._v("有点深的问题了，也看出一个Java程序员学习知识的广度。")]),t._v(" "),n("p",[t._v("Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。")]),t._v(" "),n("p",[t._v("这其实是很有用的一个特性，因为"),n("strong",[t._v("多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性")]),t._v("，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("5、CyclicBarrier和CountDownLatch的区别")])])]),t._v(" "),n("p",[t._v("两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：")]),t._v(" "),n("p",[t._v("1）CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行。")]),t._v(" "),n("p",[t._v("2）CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务。")]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了。")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("6、volatile关键字的作用")])])]),t._v(" "),n("p",[t._v("一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：")]),t._v(" "),n("p",[t._v("1）多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据。")]),t._v(" "),n("p",[t._v("2）代码底层执行不像我们看到的高级语言----Java程序这么简单，它的执行是"),n("strong",[t._v("Java代码--\x3e字节码--\x3e根据字节码执行对应的C/C++代码--\x3eC/C++代码被编译成汇编语言--\x3e和硬件电路交互")]),t._v("，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率。")]),t._v(" "),n("p",[t._v("从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger，更多详情请点击"),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247483916&idx=1&sn=89daf388da0d6fe40dc54e9a4018baeb&chksm=eb53873adc240e2cf55400f3261228d08fc943c4f196566e995681549c47630b70ac01b75031&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v("进行学习。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("7、什么是线程安全")])])]),t._v(" "),n("p",[t._v("又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的："),n("strong",[t._v("如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的")]),t._v("。")]),t._v(" "),n("p",[t._v("这个问题有值得一提的地方，就是线程安全也是有几个级别的：")]),t._v(" "),n("p",[n("strong",[t._v("1）不可变")])]),t._v(" "),n("p",[t._v("像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用")]),t._v(" "),n("p",[n("strong",[t._v("2）绝对线程安全")])]),t._v(" "),n("p",[t._v("不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet")]),t._v(" "),n("p",[n("strong",[t._v("3）相对线程安全")])]),t._v(" "),n("p",[t._v("相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是"),n("strong",[t._v("fail-fast机制")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("4）线程非安全")])]),t._v(" "),n("p",[t._v("这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类，点击"),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247486446&idx=2&sn=cb4f3aff0427c5ac3ffe5b61e150f506&chksm=eb538ed8dc2407ceb91fffe3c3bd559d9b15537446f84eb3bfb1a80e67f5efee176ca468a07b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v("了解为什么不安全。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("8、Java中如何获取到线程dump文件")])])]),t._v(" "),n("p",[t._v("死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：")]),t._v(" "),n("p",[t._v("1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java")]),t._v(" "),n("p",[t._v("2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid")]),t._v(" "),n("p",[t._v("另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("9、一个线程如果出现了运行时异常会怎么样")])])]),t._v(" "),n("p",[t._v("如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是："),n("strong",[t._v("如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("10、如何在两个线程之间共享数据")])])]),t._v(" "),n("p",[t._v("通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("11、sleep方法和wait方法有什么区别")])])]),t._v(" "),n("p",[t._v("这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("12、生产者消费者模型的作用是什么")])])]),t._v(" "),n("p",[t._v("这个问题很理论，但是很重要：")]),t._v(" "),n("p",[t._v("1）"),n("strong",[t._v("通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率")]),t._v("，这是生产者消费者模型最重要的作用")]),t._v(" "),n("p",[t._v("2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("13、ThreadLocal有什么用")])])]),t._v(" "),n("p",[t._v("简单说ThreadLocal就是一种以"),n("strong",[t._v("空间换时间")]),t._v("的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用")])])]),t._v(" "),n("p",[t._v("这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别")])])]),t._v(" "),n("p",[t._v("wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于："),n("strong",[t._v("wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("16、为什么要使用线程池")])])]),t._v(" "),n("p",[t._v("避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。点击"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247483824&idx=1&sn=7e34a3944a93d649d78d618cf04e0619&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v("学习线程池详解。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("17、怎么唤醒一个阻塞的线程")])])]),t._v(" "),n("p",[t._v("如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("18、不可变对象对多线程有什么帮助")])])]),t._v(" "),n("p",[t._v("前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("19、什么是多线程的上下文切换")])])]),t._v(" "),n("p",[t._v("多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("20、线程类的构造方法、静态块是被哪个线程调用的")])])]),t._v(" "),n("p",[t._v("这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。")]),t._v(" "),n("p",[t._v("如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：")]),t._v(" "),n("p",[t._v("1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的")]),t._v(" "),n("p",[t._v("2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("21、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？")])])]),t._v(" "),n("p",[t._v("这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：")]),t._v(" "),n("p",[t._v("1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换")]),t._v(" "),n("p",[t._v("2）并发不高、任务执行时间长的业务要区分开看：")]),t._v(" "),n("p",[t._v("a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务")]),t._v(" "),n("p",[t._v("b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换")]),t._v(" "),n("p",[t._v("c）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考其他有关线程池的文章。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。")]),t._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),n("p",[t._v("https://blog.csdn.net/zl1zl2zl3/article/details/81868173\nhttps://www.runoob.com/java/java-multithreading.html\nhttps://blog.csdn.net/qq_38038480/article/details/80584715\nhttps://blog.csdn.net/tongxuexie/article/details/80145663\nhttps://www.cnblogs.com/snow-flower/p/6114765.html")]),t._v(" "),n("h2",{attrs:{id:"微信公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[t._v("#")]),t._v(" 微信公众号")]),t._v(" "),n("h3",{attrs:{id:"java技术江湖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[t._v("#")]),t._v(" Java技术江湖")]),t._v(" "),n("p",[t._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),t._v(" "),n("p",[n("strong",[t._v("Java工程师必备学习资源:")]),t._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),n("strong",[t._v("“Java”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),t._v(" "),n("h3",{attrs:{id:"个人公众号-黄小斜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[t._v("#")]),t._v(" 个人公众号：黄小斜")]),t._v(" "),n("p",[t._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),t._v(" "),n("p",[n("strong",[t._v("程序员3T技术学习资源：")]),t._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),n("strong",[t._v("“资料”")]),t._v(" 即可免费无套路获取。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);