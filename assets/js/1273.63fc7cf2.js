(window.webpackJsonp=window.webpackJsonp||[]).push([[1273],{1672:function(s,a,t){"use strict";t.r(a);var e=t(13),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),t("p",[s._v("Redis，全名"),t("code",[s._v("RE")]),s._v("mote "),t("code",[s._v("DI")]),s._v("ctionary "),t("code",[s._v("S")]),s._v("erver，开源的高性能的KV内存数据库，支持数据持久化。\n开源的支持多种数据结构的基于键值的存储服务系统，高性能、功能丰富。")]),s._v(" "),t("p",[s._v("提供了Java , C/C++ , C# , PHP , JavaScript ,Perl, Object-C , Python , Ruby , Erlang等客户端")]),s._v(" "),t("ul",[t("li",[s._v("从2010年3月15日起, Redis的开发工作由VMware主持")]),s._v(" "),t("li",[s._v("从2013年5月开始, Redis的开发由Pivotal赞助")])]),s._v(" "),t("h1",{attrs:{id:"_1-高性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-高性能"}},[s._v("#")]),s._v(" 1 高性能")]),s._v(" "),t("ul",[t("li",[s._v("底层使用ANSI C语言编写，纯内存数据库，所以读取速度快")]),s._v(" "),t("li",[s._v("通讯采用epolI非阻塞I/O多路复用机制，减少了线程切换时上下文的切换和竞争")]),s._v(" "),t("li",[s._v("Redis采用单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争")]),s._v(" "),t("li",[s._v("Redis存储结构多样化，不同的数据结构对数据存储进行了优化加快读取的速度")]),s._v(" "),t("li",[s._v("Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。")])]),s._v(" "),t("p",[s._v("Redis能读的速度是11w次/s,写的速度是81000次/s。")]),s._v(" "),t("p",[s._v("官方bench-mark数据：测试完成了50个并发执行100000个请求。设置和获取的值是一个256字节字符串。\n结果：读的速度是10000次/s，写的速度是81000次/s。redis尽量少写多读，符合缓存的适用要求。单机redis支撑万级， 如果10万+可采用主从复制的模式。")]),s._v(" "),t("h1",{attrs:{id:"单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[s._v("#")]),s._v(" 单线程")]),s._v(" "),t("p",[s._v("Redis 作为一个进程，一直是多线程的。")]),s._v(" "),t("h2",{attrs:{id:"io线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io线程"}},[s._v("#")]),s._v(" IO线程")]),s._v(" "),t("ul",[t("li",[s._v("redis 6前（2020年5月），单线程")]),s._v(" "),t("li",[s._v("redis 6后，多线程，NIO模型 ==> 主要的性能提升点")])]),s._v(" "),t("h2",{attrs:{id:"内存处理线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存处理线程"}},[s._v("#")]),s._v(" 内存处理线程")]),s._v(" "),t("ul",[t("li",[s._v("单线程\n高性能的核心")])]),s._v(" "),t("h2",{attrs:{id:"原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[s._v("#")]),s._v(" 原因")]),s._v(" "),t("ul",[t("li",[s._v("无需各种锁的性能消耗")]),s._v(" "),t("li",[s._v("单线程多进程的集群方案")]),s._v(" "),t("li",[s._v("CPU 消耗")])]),s._v(" "),t("h2",{attrs:{id:"单进程单线程优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单进程单线程优势"}},[s._v("#")]),s._v(" 单进程单线程优势")]),s._v(" "),t("ul",[t("li",[s._v("代码更清晰，处理逻辑更简单")]),s._v(" "),t("li",[s._v("不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗")]),s._v(" "),t("li",[s._v("不存在多进程或者多线程导致的切换而消耗CPU")])]),s._v(" "),t("h3",{attrs:{id:"单进程单线程弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单进程单线程弊端"}},[s._v("#")]),s._v(" 单进程单线程弊端")]),s._v(" "),t("ul",[t("li",[s._v("无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善")])]),s._v(" "),t("h1",{attrs:{id:"_2-线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程安全"}},[s._v("#")]),s._v(" 2 线程安全")]),s._v(" "),t("p",[s._v("Redis 操作都是单线程，原子性的。多线程其实体现在数据解析和同步数据。底层内部的核心操作还是单线程的。")]),s._v(" "),t("h1",{attrs:{id:"_3-丰富的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-丰富的功能"}},[s._v("#")]),s._v(" 3 丰富的功能")]),s._v(" "),t("h2",{attrs:{id:"_3-1-数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数据结构"}},[s._v("#")]),s._v(" 3.1 数据结构")]),s._v(" "),t("p",[s._v("string、hash、list、set、sorted set，raw、int、ht、zipmap、linkedlist、ziplist、intset。")]),s._v(" "),t("h2",{attrs:{id:"_3-2-持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-持久化"}},[s._v("#")]),s._v(" 3.2  持久化")]),s._v(" "),t("ul",[t("li",[s._v("RDB持久化")]),s._v(" "),t("li",[s._v("AOF持久化")]),s._v(" "),t("li",[s._v("4.0 引入RDB- AOF混合持久化")])]),s._v(" "),t("h2",{attrs:{id:"_3-3-主从模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-主从模式"}},[s._v("#")]),s._v(" 3.3 主从模式")]),s._v(" "),t("h2",{attrs:{id:"_3-4-哨兵"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-哨兵"}},[s._v("#")]),s._v(" 3.4 哨兵")]),s._v(" "),t("h2",{attrs:{id:"集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[s._v("#")]),s._v(" 集群")]),s._v(" "),t("h2",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[s._v("#")]),s._v(" 模块化")]),s._v(" "),t("h1",{attrs:{id:"_4-适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-适用场景"}},[s._v("#")]),s._v(" 4 适用场景")]),s._v(" "),t("p",[s._v("缓存、分布式锁、队列、集合、GEO、BitMap、消息队列等。")]),s._v(" "),t("ul",[t("li",[s._v("主流互联网微服务架构下的 redis")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201221160230748.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70#pic_center",alt:""}})]),s._v(" "),t("h1",{attrs:{id:"常见缓存中间件对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见缓存中间件对比"}},[s._v("#")]),s._v(" 常见缓存中间件对比")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201221170911359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("h1",{attrs:{id:"发展史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发展史"}},[s._v("#")]),s._v(" 发展史")]),s._v(" "),t("h2",{attrs:{id:"redis2-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis2-6"}},[s._v("#")]),s._v(" Redis2.6")]),s._v(" "),t("p",[s._v("1)键的过期时间支持毫秒。\n2)从节点支持只读功能。")]),s._v(" "),t("h2",{attrs:{id:"redis2-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis2-8"}},[s._v("#")]),s._v(" Redis2.8")]),s._v(" "),t("p",[s._v("1)可以用bind命令绑定多个IP地址。\n2)发布订阅添加了pub/sub.\n3) Redis Sentinel第二版, 相比于Redis2.6的Redis Sentinel, 此版本已经变成生产可用。")]),s._v(" "),t("h2",{attrs:{id:"redis3-0-里程碑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis3-0-里程碑"}},[s._v("#")]),s._v(" Redis3.0 (里程碑)")]),s._v(" "),t("ol",[t("li",[s._v("Redis最大的改动就是添加Redis的分布式实现Redis Cluster。")])]),s._v(" "),t("h2",{attrs:{id:"redis3-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis3-2"}},[s._v("#")]),s._v(" Redis3.2")]),s._v(" "),t("p",[s._v("Redis3.2在2016年5月6日正式发布，相比于Redis3.0主要特征如下:\n1)添加GE0相并功能。\n2)新的List编码类型: quicklist.")]),s._v(" "),t("h2",{attrs:{id:"redis4-0-重大改版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis4-0-重大改版"}},[s._v("#")]),s._v(" Redis4.0 (重大改版)")]),s._v(" "),t("p",[s._v("1)提供了模块系统，方便第三方开发者拓展Redis的功能。\n2)提供了新的缓存剔除算法: LFU (Last Frequently Used)，并对已有算法进行了优化。\n3)提供了非阻塞del和flushall/flushdb功能,有效解决删除了bigkey可能造成的Redis阻塞。\n4)提供了RDB-AOF混合持久化格式，充分利用了'AOF和RDB各自优势。")]),s._v(" "),t("h2",{attrs:{id:"redis5-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis5-0"}},[s._v("#")]),s._v(" Redis5.0")]),s._v(" "),t("p",[s._v("1)新的Stream数据类型。\n2)客户经常连接和断开连接时性能更好。")]),s._v(" "),t("h2",{attrs:{id:"redis6-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis6-0"}},[s._v("#")]),s._v(" Redis6.0")]),s._v(" "),t("ol",[t("li",[s._v("多线程。多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。")])]),s._v(" "),t("h1",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),t("h2",{attrs:{id:"业务数据缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务数据缓存"}},[s._v("#")]),s._v(" 业务数据缓存")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("通用数据缓存\nstring，int，list，map")])]),s._v(" "),t("li",[t("p",[s._v("实时热数据，最新N条数据")])]),s._v(" "),t("li",[t("p",[s._v("会话缓存，token缓存")])])]),s._v(" "),t("h2",{attrs:{id:"业务数据处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务数据处理"}},[s._v("#")]),s._v(" 业务数据处理")]),s._v(" "),t("ul",[t("li",[s._v("非严格一致性要求的数据：评论，点击等")]),s._v(" "),t("li",[s._v("业务数据去重：订单处理的幂等校验等")]),s._v(" "),t("li",[s._v("业务数据排序：排名，排行榜等")])]),s._v(" "),t("h2",{attrs:{id:"全局一致计数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局一致计数"}},[s._v("#")]),s._v(" 全局一致计数")]),s._v(" "),t("ul",[t("li",[s._v("全局流控计数\n简单的限流组件")]),s._v(" "),t("li",[s._v("秒杀的库存计算")]),s._v(" "),t("li",[s._v("抢红包")]),s._v(" "),t("li",[s._v("全局ID生成")])]),s._v(" "),t("h2",{attrs:{id:"高效统计计数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高效统计计数"}},[s._v("#")]),s._v(" 高效统计计数")]),s._v(" "),t("ul",[t("li",[s._v("id去重\n记录访问ip等全局bitmap操作")]),s._v(" "),t("li",[s._v("UV、PV等访问量\n非严格一致性要求")])]),s._v(" "),t("h2",{attrs:{id:"发布订阅与stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅与stream"}},[s._v("#")]),s._v(" 发布订阅与Stream")]),s._v(" "),t("ul",[t("li",[s._v("Pub-Sub 模拟队列 subscribe comments publish comments java\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210205234355569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("li",[s._v("Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于MQ。可参考 https://www.runoob.com/redis/redis-stream.html"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210205234412361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),s._v(" "),t("h2",{attrs:{id:"分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[s._v("#")]),s._v(" 分布式锁")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("获取锁 原子性操作\n"),t("code",[s._v("SET dlock my_random_value NX PX 30000")])])]),s._v(" "),t("li",[t("p",[s._v("释放锁，lua脚本，保证原子性+单线程，从而具有事务性")])])]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"get"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ARGV"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" \n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"del"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" \n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("关键点：原子性、互斥、超时")]),s._v(" "),t("h1",{attrs:{id:"redis-lua"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-lua"}},[s._v("#")]),s._v(" Redis Lua")]),s._v(" "),t("p",[s._v("类似于数据库的存储过程，mongodb的js脚本。\nopen resty = nginx + lua jit。")]),s._v(" "),t("p",[s._v("直接执行")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return'hello java'\"")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('set',KEYS[1],ARGV[1])\"")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" lua-key lua-value\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("预编译\nscript load script脚本片段\n返回一个SHA-1签名 shastring")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("evalsha shastring keynum "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key1 key2 key3 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("param1 param2 param3 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);