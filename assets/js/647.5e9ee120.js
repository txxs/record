(window.webpackJsonp=window.webpackJsonp||[]).push([[647],{1038:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-当反射遇见重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-当反射遇见重载"}},[t._v("#")]),t._v(" 1 当反射遇见重载")]),t._v(" "),a("p",[t._v("重载"),a("strong",[t._v("level")]),t._v("方法，入参分别是"),a("strong",[t._v("int")]),t._v("和"),a("strong",[t._v("Integer")]),t._v("。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021063020523870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("若不使用反射，选用哪个重载方法很清晰，比如：")]),t._v(" "),a("ul",[a("li",[t._v("传入"),a("strong",[t._v("666")]),t._v("就走int参数重载")]),t._v(" "),a("li",[t._v("传入"),a("code",[t._v("Integer.valueOf(“666”)")]),t._v("走Integer重载")])]),t._v(" "),a("p",[t._v("那反射调用方法也是根据入参类型确定使用哪个重载方法吗？\n使用"),a("code",[t._v("getDeclaredMethod")]),t._v("获取 "),a("code",[t._v("grade")]),t._v("方法，然后传入"),a("code",[t._v("Integer.valueOf(“36”)")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210630205520594.png",alt:""}}),t._v("\n结果是：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210630205642767.png",alt:""}}),t._v("\n因为反射进行方法调用是通过")]),t._v(" "),a("h2",{attrs:{id:"方法签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法签名"}},[t._v("#")]),t._v(" 方法签名")]),t._v(" "),a("p",[t._v("来确定方法。本例的"),a("code",[t._v("getDeclaredMethod")]),t._v("传入的参数类型"),a("code",[t._v("Integer.TYPE")]),t._v("其实代表"),a("code",[t._v("int")]),t._v("。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021063020590337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n所以不管传包装类型还是基本类型，最终都是调用int入参重载方法。")]),t._v(" "),a("p",[t._v("将"),a("code",[t._v("Integer.TYPE")]),t._v("改为"),a("code",[t._v("Integer.class")]),t._v("，则实际执行的参数类型就是Integer了。且无论传包装类型还是基本类型，最终都调用Integer入参重载方法。")]),t._v(" "),a("p",[t._v("综上，反射调用方法，是以反射获取方法时传入的方法名和参数类型来确定调用的方法。")]),t._v(" "),a("h1",{attrs:{id:"_2-泛型的类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-泛型的类型擦除"}},[t._v("#")]),t._v(" 2 泛型的类型擦除")]),t._v(" "),a("p",[t._v("泛型允许SE使用类型参数替代精确类型，实例化时再指明具体类型。利于代码复用，将一套代码应用到多种数据类型。")]),t._v(" "),a("p",[t._v("泛型的类型检测，可以在编译时检查很多泛型编码错误。但由于历史兼容性而妥协的泛型类型擦除方案，在运行时还有很多坑。")]),t._v(" "),a("h2",{attrs:{id:"案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),a("p",[t._v("现在期望在类的字段内容变动时记录日志，于是SE想到定义一个泛型父类，并在父类中定义一个统一的日志记录方法，子类可继承该方法。上线后总有日志重复记录。")]),t._v(" "),a("ul",[a("li",[t._v("父类\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701102521658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("li",[t._v("子类1\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701102727240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("li",[t._v("通过反射调用子类方法：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701103212354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("p",[t._v("虽Base.value正确设置为了JavaEdge，但父类setValue调用了两次，计数器显示2\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701103441331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("两次调用Base.setValue，是因为getMethods找到了两个"),a("code",[t._v("setValue")]),t._v("：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701104024581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701103932953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"子类重写父类方法失败原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子类重写父类方法失败原因"}},[t._v("#")]),t._v(" 子类重写父类方法失败原因")]),t._v(" "),a("ul",[a("li",[t._v("子类未指定String泛型参数，父类的泛型方法"),a("code",[t._v("setValue(T value)")]),t._v("泛型擦除后是"),a("code",[t._v("setValue(Object value)")]),t._v("，于是子类入参String的"),a("code",[t._v("setValue")]),t._v("被当作新方法")]),t._v(" "),a("li",[t._v("子类的"),a("code",[t._v("setValue")]),t._v("未加"),a("code",[t._v("@Override")]),t._v("注解，编译器未能检测到重写失败\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701104847761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("p",[t._v("有的同学会认为是因为反射API使用错误导致而非重写失败：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("getMethods")]),t._v("\n得到"),a("strong",[t._v("当前类和父类")]),t._v("的所有"),a("code",[t._v("public")]),t._v("方法")]),t._v(" "),a("li",[a("code",[t._v("getDeclaredMethods")]),t._v("\n获得"),a("strong",[t._v("当前类")]),t._v("所有的public、protected、package和private方法")])]),t._v(" "),a("p",[t._v("于是用"),a("code",[t._v("getDeclaredMethods")]),t._v("替换"),a("code",[t._v("getMethods")]),t._v("：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701110017589.png",alt:""}}),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701110341844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n虽然这样做可以规避重复记录日志，但未解决子类重写父类方法失败的问题")]),t._v(" "),a("ul",[a("li",[t._v("使用Sub1时还是会发现有俩个"),a("code",[t._v("setValue")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701111541648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("p",[t._v("于是，终于明白还得重新实现"),a("strong",[t._v("Sub2")]),t._v("，继承Base时将"),a("strong",[t._v("String")]),t._v("作为泛型T类型，并使用 "),a("strong",[t._v("@Override")]),t._v(" 注解 "),a("strong",[t._v("setValue")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701131719235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("但还是出现重复日志\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701131952964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\nSub2的"),a("code",[t._v("setValue")]),t._v("竟然调用了两次，难道是JDK反射有Bug！"),a("code",[t._v("getDeclaredMethods")]),t._v("查找到的方法肯定来自"),a("code",[t._v("Sub2")]),t._v("；而且Sub2看起来也就一个setValue，怎么会重复？")])]),t._v(" "),a("p",[t._v("调试发现，Child2类其实有俩"),a("code",[t._v("setValue")]),t._v("：入参分别是String、Object。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701133219777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n这就是因为"),a("strong",[t._v("泛型类型擦除")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"反射下的泛型擦除-天坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射下的泛型擦除-天坑"}},[t._v("#")]),t._v(" 反射下的泛型擦除“天坑”")]),t._v(" "),a("p",[t._v("Java泛型类型在编译后被擦除为"),a("strong",[t._v("Object")]),t._v("。子类虽指定父类泛型T类型是"),a("strong",[t._v("String")]),t._v("，但编译后T会被擦除成为Object，所以父类"),a("code",[t._v("setValue")]),t._v("入参是"),a("strong",[t._v("Object")]),t._v("，value也是"),a("strong",[t._v("Object")]),t._v("。\n若"),a("strong",[t._v("Sub2.setValue")]),t._v("想重写父类，那入参也须为"),a("strong",[t._v("Object")]),t._v("。所以，编译器会为我们生成一个桥接方法。\nSub2类的class字节码：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("➜  genericandinheritance git:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ javap -c Sub2.class\nCompiled from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GenericAndInheritanceApplication.java"')]),t._v("\nclass com.javaedge.oop.genericandinheritance.Sub2 extends com.javaedge.oop.genericandinheritance.Base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("java.lang.String"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  com.javaedge.oop.genericandinheritance.Sub2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Code:\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": aload_0\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": invokespecial "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#1                  // Method com/javaedge/oop/genericandinheritance/Base."<init>":()V')]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v("\n\n  public void setValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("java.lang.String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Code:\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": getstatic     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#2                  // Field java/lang/System.out:Ljava/io/PrintStream;")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": ldc           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#3                  // String call Sub2.setValue")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(": invokevirtual "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(": aload_0\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(": aload_1\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": invokespecial "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#5                  // Method com/javaedge/oop/genericandinheritance/Base.setValue:(Ljava/lang/Object;)V")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v("\n\n  public void setValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("java.lang.Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Code:\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": aload_0\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": aload_1\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": checkcast     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#6                  // class java/lang/String")]),t._v("\n       // 入参为Object的setValue在内部调用了入参为String的setValue方法\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(": invokevirtual "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#7                  // Method setValue:(Ljava/lang/String;)V")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("p",[t._v("若编译器未帮我们实现该桥接方法，则Sub2重写的是父类泛型类型擦除后、入参是Object的setValue。这两个方法的参数，一个String一个Object，显然不符Java重写。")]),t._v(" "),a("p",[t._v("入参为Object的桥接方法上标记了"),a("code",[t._v("public synthetic bridge")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("synthetic代表由编译器生成的不可见代码")]),t._v(" "),a("li",[t._v("bridge代表这是泛型类型擦除后生成的桥接代码\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701135257552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("h2",{attrs:{id:"修正"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修正"}},[t._v("#")]),t._v(" 修正")]),t._v(" "),a("p",[t._v("知道了桥接方法的存在，现在就该知道如何修正代码了。")]),t._v(" "),a("ul",[a("li",[t._v("通过"),a("strong",[t._v("getDeclaredMethods")]),t._v("获取所有方法后，还得加上非isBridge这个过滤条件：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701143227136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("li",[t._v("结果\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210701143616524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("blockquote",[a("p",[t._v("参考")]),t._v(" "),a("ul",[a("li",[t._v("https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/index.html")]),t._v(" "),a("li",[t._v("https://docs.oracle.com/javase/tutorial/reflect/index.html")]),t._v(" "),a("li",[t._v("https://docs.oracle.com/javase/8/docs/technotes/guides/language/annotations.html")]),t._v(" "),a("li",[t._v("https://docs.oracle.com/javase/tutorial/java/annotations/index.html")]),t._v(" "),a("li",[t._v("https://docs.oracle.com/javase/8/docs/technotes/guides/language/generics.html")]),t._v(" "),a("li",[t._v("https://docs.oracle.com/javase/tutorial/java/generics/index.html")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);