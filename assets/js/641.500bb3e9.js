(window.webpackJsonp=window.webpackJsonp||[]).push([[641],{1048:function(t,a,s){"use strict";s.r(a);var n=s(13),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("主要用到的是这两个类")]),t._v(" "),s("ul",[s("li",[t._v("java.util.regex.Pattern")]),t._v(" "),s("li",[t._v("java.util.regex.Matcher。")])]),t._v(" "),s("p",[t._v("Pattern对应正则表达式，一个Pattern与一个String对象关联，生成一个Matcher，它对应Pattern在String中的一次匹配；\n调用Matcher对象的find()方法，Matcher对象就会更新为下一次匹配的匹配信息。示例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d{4}-\\\\d{2}-]]d{2}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2010-12-20 2011-02-14"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),t._v(" matcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("#Pattern\nPattern是Java语言中的正则表达式对象。\n要使用正则表达式，首先必须从字符串“编译”出Pattern对象，这需要用到"),s("code",[t._v("Pattern.compile(String regex)")]),t._v("\ne.g\n"),s("code",[t._v('Pattern pattern = Pattern.compile("a.b+");')])]),t._v(" "),s("p",[t._v("如果要指定匹配模式，可以在表达式中使用(?modifier)修饰符指定，也可以使用预定义常量。\n下面的两个Pattern对象的生成方法不同，结果却是等价的。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(?i)a.b+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.b+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CASE_INSENSITIVE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("如果要同时指定多种模式，可以连写模式修饰符，也可以直接用|运算符将预定义常量连接起来，以下两个Pattern对象也是等价的。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(?is)a.b+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.b+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CASE_INSENSITIVE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DOTALL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("##Pattern的主要方法\n"),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-2d16306314c523f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n可检验字符串"),s("code",[t._v("input")]),t._v("能否由正则表达式"),s("code",[t._v("regex")]),t._v("匹配\n因为是静态方法，所以不需要编译生成各个对象，方便随手使用。\n要注意的是，它检验的是“整个字符串能否由表达式匹配”，而不是“表达式能否在字符串中找到匹配”。\n可以认为"),s("code",[t._v("regex")]),t._v("的首尾自动加上了匹配字符串起始和结束位置的锚点 \\A和\\z 。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Pattern.matches("\\\\d{6}","a123456");   //false\nPattern.matches("\\\\d{6}","123456");     //true\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-1b2adbbaecc536c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),s("p",[t._v("通常，Pattern对象需要配合下面将要介绍的Matcher一起完成正则操作。如果只用正则表达式来切分字符串，只用Pattern的这个方法也可以。")]),t._v(" "),s("p",[t._v("这个方法接收的参数类型是"),s("code",[t._v("CharSequence")]),t._v("它可能有点陌生\n"),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-595ead2c2e84e926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n它是String的父类m因而可以应对常见的各种表示“字符串”的类。下面的代码仅以String为例：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String s = "2018-3-26";\nPattern pattern = Pattern.compile("\\\\s+");\nfor(String part : pattern.split(s)){\n    System.out.println(part);\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("这个方法与上面的方法很相似，只是多了一个参数limit，它用来限定返回的String数组的最大长度。\n也就是说，它规定了字符串至多只能“切”limit-1次。如果不需要对字符串比较大，进行尽可能多的切分，使用这个方法。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String s = " 2010-12-20  ";\nPattern pattern = Pattern.compile("\\\\s+");\nfor(String part : Pattern.split(s,2)){\n    System.out.println(part);\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("既然limit是一个int类型，那么它自然可以设定为各种值，下表总结了limit在各个取值区间对结果的影响（未指定limit时，最终返回包含n个元素的数组，实际能切分的次数是 n-1 ）：")]),t._v(" "),s("ul",[s("li",[t._v("limit < 0\n等于未设定limit时，保留末尾的空字符串")]),t._v(" "),s("li",[t._v("limit = 0\n等于未设定limit时，切分n-1次，忽略末尾的空字符串")]),t._v(" "),s("li",[t._v("0 < limit < n\n返回数组包含limit个元素，切分limit-1次，最后一个元素是第limit-1次切分后，右侧剩下的所有文本")]),t._v(" "),s("li",[t._v("limit >= n\n等于未指定limit时\n"),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-fa810753f0963f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n用来取消字符串text中所有转义字符的特殊含义，实质就是在字符串首尾添加 \\Q 和 \\E。\n通常，如果需要把某个字符串作为没有任何特殊意义的正则表达式（比如从外界读入的字符串，用在某个复杂的正则表达式中），就可以使用这个方法：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"aacb".matches("a*.b");            //true\n"a*.b".matches("a*.b");             //false\n"a*.b".matches("a*.b");             //false\n"a*.b".matches(Pattern.quote("a*.b"));        //true\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("#Matcher\nMatcher可以理解为“某次具体匹配的结果对象”\n把编译好的Pattern对象“应用”到某个String对象上，就获得了作为“本次匹配结果”的Matcher对象。\n之后，就可以通过它获得关于匹配的信息。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d{4}-\\\\d{2}-\\\\d{2}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),t._v(" matcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2010-12-20 2011-02-14"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("对编译好的Pattern对象调用matcher(String text)方法，传入要匹配的字符串text，就得到了Matcher对象，每次调用一次find()方法，如果返回true，就表示“找到一个匹配”，此时可以通过下面的若干方法获得关于本次匹配的信息。")]),t._v(" "),s("ol",[s("li",[t._v("String group(int n)")])]),t._v(" "),s("p",[t._v("返回当前匹配中第n对捕获括号捕获的文本，如果n为0，则取匹配的全部内容；如果n小于0或者大于最大分组编号数，则报错。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("String group()")])]),t._v(" "),s("p",[t._v("返回当前匹配的全部文本，相当于group(0)。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("int groupCount()")])]),t._v(" "),s("p",[t._v("返回此Matcher对应Pattern对象中包含的捕获分组数目，编号为0的默认分组不计在内。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("int start(n)")])]),t._v(" "),s("p",[t._v("返回当前匹配中第n对捕获括号匹配的文本在原字符串中的起始位置。")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("int start()")])]),t._v(" "),s("p",[t._v("返回当前匹配的文本在原字符串中的起始位置，相当于start(0)。")]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("int end(n)")])]),t._v(" "),s("p",[t._v("返回当前匹配中第n对捕获括号匹配的文本在原字符串中的结束位置。")]),t._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[t._v("int end()")])]),t._v(" "),s("p",[t._v("返回当前匹配的文本在原字符串中的结果位置，相当于end(0)。")]),t._v(" "),s("ol",{attrs:{start:"8"}},[s("li",[t._v("String replaceAll(String replacement)")])]),t._v(" "),s("p",[t._v("如果进行正则表达式替换，一般用到的是Matcher的replaceAll()方法，它会将原有文本中正则表达式能匹配的所有文本替换为replaceement字符串。")]),t._v(" "),s("p",[t._v("#String\n许多时候只需要临时使用某个正则表达式，而不需要重复使用，这时候每次都生成Pattern对象和Matcher对象再操作显得很烦琐。所以，Java的String类提供了正则表达式操作的静态成员方法，只需要String对象就可以执行正则表达式操作。\n"),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-0cf5b4ba1db44cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n这个方法判断当前的String对象能否由正则表达式"),s("code",[t._v("regex")]),t._v("匹配。\n请注意，这里的“匹配”指的并不是"),s("code",[t._v("regex")]),t._v("能否在"),s("code",[t._v("String")]),t._v("内找到匹配，而是指"),s("code",[t._v("regex")]),t._v("匹配整个"),s("code",[t._v("String")]),t._v("对象，因此非常适合用来做数据校验。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"123456".matches("\\\\d{6}");            //true\n"a123456".matches("\\\\d{6}");          //true\n2. String replaceFirst(String regex,String replacement)\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("用来替换正则表达式regex在字符串中第一次能匹配的文本，可以在replacement字符串中用$num引用regex中对应捕获分组匹配的文本。\n"),s("code",[t._v('"2010-12-20 2011-02-14".replaceFirst("(\\\\d{4})-(\\\\d{2})-(\\\\d{2})","$2/$3/$1");')]),t._v(" "),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-f1582726822b7e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),t._v("\n用来进行所有的替换，它的结果等同于Matcher类的"),s("code",[t._v("replaceAll()")]),t._v("，replacement字符串中也可以用$num的表示法引用regex中对应捕获分组匹配的文本。\n"),s("code",[t._v('"2010-12-20 2011-02-14".replaceAll("(\\\\d{4})-(\\\\d{2})-(\\\\d{2})","$2/$3/$1");')]),t._v(" "),s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4685968-5fd716b8e540d5e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}}),t._v("\n等价于Pattern中对应的split()方法")]),t._v(" "),s("h1",{attrs:{id:"java-string-split-用法小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-string-split-用法小结"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.cnblogs.com/mingforyou/p/3299569.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java String.split()用法小结"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在java.lang包中有String.split()方法,返回是一个数组")]),t._v(" "),s("p",[t._v("我在应用中用到一些,给大家总结一下,仅供大家参考:")]),t._v(" "),s("p",[t._v('1、如果用“.”作为分隔的话,必须是如下写法,String.split("\\."),这样才能正确的分隔开,不能用String.split(".");')]),t._v(" "),s("p",[t._v('2、如果用“|”作为分隔的话,必须是如下写法,String.split("\\|"),这样才能正确的分隔开,不能用String.split("|");')]),t._v(" "),s("p",[t._v('“.”和“|”都是转义字符,必须得加"\\";')]),t._v(" "),s("p",[t._v('3、如果在一个字符串中有多个分隔符,可以用“|”作为连字符,比如,“acount=? and uu =? or n=?”,把三个都分隔出来,可以用String.split("and|or");')]),t._v(" "),s("p",[t._v("使用String.split方法分隔字符串时,分隔符如果用到一些特殊字符,可能会得不到我们预期的结果。")]),t._v(" "),s("p",[t._v("我们看jdk doc中说明")]),t._v(" "),s("p",[t._v("public String[] split(String regex)")]),t._v(" "),s("p",[t._v("Splits this string around matches of the given regular expression.")]),t._v(" "),s("p",[t._v("参数regex是一个 regular-expression的匹配模式而不是一个简单的String,他对一些特殊的字符可能会出现你预想不到的结果,比如测试下面的代码用竖线 | 分隔字符串,你将得不到预期的结果")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String[] aa = "aaa|bbb|ccc".split("|");\n\n    //String[] aa = "aaa|bbb|ccc".split("\\\\|"); 这样才能得到正确的结果\n\n    for (int i = 0 ; i <aa.length ; i++ ) {\n\n      System.out.println("--"+aa[i]); \n\n    }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("用竖 * 分隔字符串运行将抛出java.util.regex.PatternSyntaxException异常,用加号 + 也是如此。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String[] aa = "aaa*bbb*ccc".split("*");\n\n    //String[] aa = "aaa|bbb|ccc".split("\\\\*"); 这样才能得到正确的结果    \n\n    for (int i = 0 ; i <aa.length ; i++ ) {\n\n      System.out.println("--"+aa[i]); \n\n    }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v('显然, + * 不是有效的模式匹配规则表达式,用"\\*" "\\+"转义后即可得到正确的结果。')]),t._v(" "),s("p",[t._v('"|" 分隔串时虽然能够执行,但是却不是预期的目的,"\\|"转义后即可得到正确的结果。')]),t._v(" "),s("p",[t._v('还有如果想在串中使用""字符,则也需要转义.首先要表达"aaaa\\bbbb"这个串就应该用"aaaa\\bbbb",如果要分隔就应该这样才能得到正确结果,\n'),s("code",[t._v('String[] aa = "aaa\\\\bbb\\\\bccc".split("\\\\\\\\");')])])])}),[],!1,null,null,null);a.default=e.exports}}]);