(window.webpackJsonp=window.webpackJsonp||[]).push([[598],{989:function(a,s,n){"use strict";n.r(s);var e=n(13),t=Object(e.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88"}},[a._v("设计模式是什么")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%AD%A6%E4%B9%A0jdk%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%A5%BD%E5%A4%84"}},[a._v("学习JDK中设计模式的好处")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB"}},[a._v("类间关系")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BB%8B%E7%BB%8D%E6%96%B9%E5%BC%8F"}},[a._v("介绍方式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BB%8F%E5%85%B8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9C%A8jdk%E4%B8%AD%E7%9A%84%E4%BD%93%E7%8E%B0"}},[a._v("经典设计模式在JDK中的体现")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82"}},[a._v("静态工厂")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95"}},[a._v("工厂方法")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F"}},[a._v("建造者模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B"}},[a._v("原型模型")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F"}},[a._v("适配器模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F"}},[a._v("桥接模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F"}},[a._v("组合模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F"}},[a._v("装饰者模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F"}},[a._v("外观模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F"}},[a._v("享元模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F"}},[a._v("代理模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F"}},[a._v("迭代器模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F"}},[a._v("观察者模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F"}},[a._v("模板方法模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F"}},[a._v("策略模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F"}},[a._v("责任链模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F"}},[a._v("命令模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F"}},[a._v("状态模式")])])])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F"}},[a._v("结构型模式")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1"}},[a._v("代理模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-1"}},[a._v("适配器模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F"}},[a._v("桥梁模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F"}},[a._v("装饰模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F"}},[a._v("门面模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F-1"}},[a._v("组合模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-1"}},[a._v("享元模式")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93"}},[a._v("结构型模式总结")])])])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7"}},[a._v("微信公众号")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java%E6%8A%80%E6%9C%AF%E6%B1%9F%E6%B9%96"}},[a._v("Java技术江湖")])]),a._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%BB%84%E5%B0%8F%E6%96%9C"}},[a._v("个人公众号：黄小斜")])])])])]),a._v(" "),n("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),n("blockquote",[n("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),n("p",[a._v("喜欢的话麻烦点下Star、fork哈")]),a._v(" "),n("p",[a._v("文章也将发表在我的个人博客，阅读体验更佳：")]),a._v(" "),n("blockquote",[n("p",[a._v("www.how2playlife.com")])]),a._v(" "),n("p",[a._v("本文主要是归纳了JDK中所包含的设计模式，包括作用和其设计类图。\n首先来个总结，具体的某个模式可以一个一个慢慢写，希望能对研究JDK和设计模式有所帮助。")]),a._v(" "),n("h2",{attrs:{id:"设计模式是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设计模式是什么"}},[a._v("#")]),a._v(" 设计模式是什么")]),a._v(" "),n("p",[a._v("（1）反复出现问题的解决方案\n（2）增强软件的灵活性\n（3）适应软件不断变化")]),a._v(" "),n("h2",{attrs:{id:"学习jdk中设计模式的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#学习jdk中设计模式的好处"}},[a._v("#")]),a._v(" 学习JDK中设计模式的好处")]),a._v(" "),n("p",[a._v("（1）借鉴优秀代码的设计，有助于提高代码设计能力\n（2）JDK的设计中体现了大多数设计模式，是学习设计模式的较好的方式\n（3）可以更加深入的了解JDK")]),a._v(" "),n("h2",{attrs:{id:"类间关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类间关系"}},[a._v("#")]),a._v(" 类间关系")]),a._v(" "),n("p",[a._v("继承、委托、依赖、聚合、组合\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058465rSf1.gif",alt:""}})]),a._v(" "),n("h2",{attrs:{id:"介绍方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍方式"}},[a._v("#")]),a._v(" 介绍方式")]),a._v(" "),n("p",[a._v("（1）作用：归纳某设计模式的基本要点\n（2）JDK中体现：某设计模式在JDK中是怎样体现出来的\n（3）类图：某设计模式在JDK中所对应的类图")]),a._v(" "),n("h2",{attrs:{id:"经典设计模式在jdk中的体现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#经典设计模式在jdk中的体现"}},[a._v("#")]),a._v(" 经典设计模式在JDK中的体现")]),a._v(" "),n("p",[n("strong",[a._v("1.Singleton（单例）")]),a._v(" \n作用：保证类只有一个实例；提供一个全局访问点\nJDK中体现：\n（1）Runtime\n（2）NumberFormat\n类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058629PD9z.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"静态工厂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态工厂"}},[a._v("#")]),a._v(" 静态工厂")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：\n（1）代替构造函数创建对象\n（2）方法名比构造函数清晰\nJDK中体现：\n（1）Integer.valueOf\n（2）Class.forName\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058705f0y7.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"工厂方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[a._v("#")]),a._v(" 工厂方法")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：子类决定哪一个类实例化\nJDK中体现：Collection.iterator方法\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_129405877799Eh.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"建造者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[a._v("#")]),a._v(" 建造者模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：\n（1）将构造逻辑提到单独的类中\n（2）分离类的构造逻辑和表现\nJDK中体现：DocumentBuilder(org.w3c.dom)\n")])])]),n("p",[a._v("类图：")]),a._v(" "),n("p",[n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058900z0nk.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"原型模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型模型"}},[a._v("#")]),a._v(" 原型模型")]),a._v(" "),n("p",[a._v("作用：\n（1）复制对象\n（2）浅复制、深复制\nJDK中体现：Object.clone；Cloneable\n类图：")]),a._v(" "),n("p",[n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058951u556.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"适配器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[a._v("#")]),a._v(" 适配器模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：使不兼容的接口相容\nJDK中体现：\n（1）java.io.InputStreamReader(InputStream)\n（2）java.io.OutputStreamWriter(OutputStream)\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294058999cvJS.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"桥接模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[a._v("#")]),a._v(" 桥接模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：将抽象部分与其实现部分分离，使它们都可以独立地变化\nJDK中体现：java.util.logging中的Handler和Formatter\n")])])]),n("p",[a._v("类图： \n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059065CHyJ.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"组合模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[a._v("#")]),a._v(" 组合模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：一致地对待组合对象和独立对象\n    JDK中体现：\n    （1）org.w3c.dom\n    （2）javax.swing.JComponent#add(Component)\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_12940591438tt5.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"装饰者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[a._v("#")]),a._v(" 装饰者模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：为类添加新的功能；防止类继承带来的爆炸式增长\nJDK中体现：\n（1）java.io包\n（2）java.util.Collections#synchronizedList(List)\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059189Z6z9.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"外观模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[a._v("#")]),a._v(" 外观模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：\n（1）封装一组交互类，一致地对外提供接口\n（2）封装子系统，简化子系统调用\nJDK中体现：java.util.logging包\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059242iBI6.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"享元模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[a._v("#")]),a._v(" 享元模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：共享对象，节省内存\nJDK中体现：\n（1）Integer.valueOf(int i)；Character.valueOf(char c)\n（2）String常量池\n")])])]),n("p",[a._v("类图：\n**"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059313R7gf.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"代理模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[a._v("#")]),a._v(" 代理模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：\n（1）透明调用被代理对象，无须知道复杂实现细节\n（2）增加被代理类的功能\nJDK中体现：动态代理；RMI\n")])])]),n("p",[a._v("类图：\n**"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059364KAKJ.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"迭代器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[a._v("#")]),a._v(" 迭代器模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：将集合的迭代和集合本身分离\nJDK中体现：Iterator、Enumeration接口\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059440PtTX.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"观察者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[a._v("#")]),a._v(" 观察者模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：通知对象状态改变\nJDK中体现：\n（1）java.util.Observer,Observable\n（2）Swing中的Listener\n")])])]),n("p",[a._v("类图：\n**"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_12940594862KCk.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"模板方法模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[a._v("#")]),a._v(" 模板方法模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：定义算法的结构，子类只实现不同的部分\nJDK中体现：ThreadPoolExecutor.Worker\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_129405958555W9.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"策略模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[a._v("#")]),a._v(" 策略模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：提供不同的算法\nJDK中的体现：ThreadPoolExecutor中的四种拒绝策略\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059635WZ13.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"责任链模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[a._v("#")]),a._v(" 责任链模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：请求会被链上的对象处理，但是客户端不知道请求会被哪些对象处理\nJDK中体现：\n（1）java.util.logging.Logger会将log委托给parent logger\n（2）ClassLoader的委托模型\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_12940596873g03.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"命令模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[a._v("#")]),a._v(" 命令模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：\n（1）封装操作，使接口一致\n（2）将调用者和接收者在空间和时间上解耦合\nJDK中体现：Runnable；Callable；ThreadPoolExecutor\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059739iKYQ.gif",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"状态模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[a._v("#")]),a._v(" 状态模式")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("作用：将主对象和其状态分离，状态对象负责主对象的状态转换，使主对象类功能减轻\nJDK中体现：未发现\n")])])]),n("p",[a._v("类图：\n"),n("img",{attrs:{src:"http://hi.csdn.net/attachment/201101/3/0_1294059912fL5S.gif",alt:""}})]),a._v(" "),n("p",[a._v("六、参考文献")]),a._v(" "),n("blockquote",[n("p",[a._v("1. Design Pattern（GoF）")])]),a._v(" "),n("blockquote",[n("p",[a._v("2. Software Architecture Design Patterns in Java")])]),a._v(" "),n("blockquote",[n("p",[a._v("3. JDK 5 Documentation")])]),a._v(" "),n("blockquote",[n("p",[a._v("4. http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns")])]),a._v(" "),n("blockquote",[n("p",[a._v("5. http://java.csdn.net/a/20101129/282644.html**")])]),a._v(" "),n("p",[a._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),a._v(" "),n("blockquote",[n("p",[a._v("https://github.com/h2pl/Java-Tutorial")])]),a._v(" "),n("p",[a._v("喜欢的话麻烦点下Star、fork哈")]),a._v(" "),n("p",[a._v("文章也将发表在我的个人博客，阅读体验更佳：")]),a._v(" "),n("blockquote",[n("p",[a._v("www.how2playlife.com")])]),a._v(" "),n("h2",{attrs:{id:"结构型模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[a._v("#")]),a._v(" 结构型模式")]),a._v(" "),n("p",[a._v("前面创建型模式介绍了创建对象的一些设计模式，这节介绍的结构型模式旨在通过改变代码结构来达到解耦的目的，使得我们的代码容易维护和扩展。")]),a._v(" "),n("h3",{attrs:{id:"代理模式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理模式-2"}},[a._v("#")]),a._v(" 代理模式")]),a._v(" "),n("p",[a._v("第一个要介绍的代理模式是最常使用的模式之一了，用一个代理来隐藏具体实现类的实现细节，通常还用于在真实的实现的前后添加一部分逻辑。")]),a._v(" "),n("p",[a._v("既然说是"),n("strong",[a._v("代理")]),a._v("，那就要对客户端隐藏真实实现，由代理来负责客户端的所有请求。当然，代理只是个代理，它不会完成实际的业务逻辑，而是一层皮而已，但是对于客户端来说，它必须表现得就是客户端需要的真实实现。")]),a._v(" "),n("blockquote",[n("p",[a._v("理解"),n("strong",[a._v("代理")]),a._v("这个词，这个模式其实就简单了。")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public interface FoodService {\n    Food makeChicken();\n    Food makeNoodle();\n}\n\npublic class FoodServiceImpl implements FoodService {\n    public Food makeChicken() {\n          Food f = new Chicken()\n        f.setChicken("1kg");\n          f.setSpicy("1g");\n          f.setSalt("3g");\n        return f;\n    }\n    public Food makeNoodle() {\n        Food f = new Noodle();\n        f.setNoodle("500g");\n        f.setSalt("5g");\n        return f;\n    }\n}\n\n// 代理要表现得“就像是”真实实现类，所以需要实现 FoodService\npublic class FoodServiceProxy implements FoodService {\n\n    // 内部一定要有一个真实的实现类，当然也可以通过构造方法注入\n    private FoodService foodService = new FoodServiceImpl();\n\n    public Food makeChicken() {\n        System.out.println("我们马上要开始制作鸡肉了");\n\n        // 如果我们定义这句为核心代码的话，那么，核心代码是真实实现类做的，\n        // 代理只是在核心代码前后做些“无足轻重”的事情\n        Food food = foodService.makeChicken();\n\n        System.out.println("鸡肉制作完成啦，加点胡椒粉"); // 增强\n          food.addCondiment("pepper");\n\n        return food;\n    }\n    public Food makeNoodle() {\n        System.out.println("准备制作拉面~");\n        Food food = foodService.makeNoodle();\n        System.out.println("制作完成啦")\n        return food;\n    }\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br")])]),n("p",[a._v("客户端调用，注意，我们要用代理来实例化接口：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 这里用代理类来实例化\nFoodService foodService = new FoodServiceProxy();\nfoodService.makeChicken();\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/proxy-1.png",alt:""}}),a._v("\n我们发现没有，代理模式说白了就是做 "),n("strong",[a._v("“方法包装”")]),a._v(" 或做 "),n("strong",[a._v("“方法增强”")]),a._v("。在面向切面编程中，算了还是不要吹捧这个名词了，在 AOP 中，其实就是动态代理的过程。比如 Spring 中，我们自己不定义代理类，但是 Spring 会帮我们动态来定义代理，然后把我们定义在 @Before、@After、@Around 中的代码逻辑动态添加到代理中。")]),a._v(" "),n("p",[a._v("说到动态代理，又可以展开说 …… Spring 中实现动态代理有两种，一种是如果我们的类定义了接口，如 UserService 接口和 UserServiceImpl 实现，那么采用 JDK 的动态代理，感兴趣的读者可以去看看 java.lang.reflect.Proxy 类的源码；另一种是我们自己没有定义接口的，Spring 会采用 CGLIB 进行动态代理，它是一个 jar 包，性能还不错。")]),a._v(" "),n("h3",{attrs:{id:"适配器模式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式-2"}},[a._v("#")]),a._v(" 适配器模式")]),a._v(" "),n("p",[a._v("说完代理模式，说适配器模式，是因为它们很相似，这里可以做个比较。")]),a._v(" "),n("p",[a._v("适配器模式做的就是，有一个接口需要实现，但是我们现成的对象都不满足，需要加一层适配器来进行适配。")]),a._v(" "),n("p",[a._v("适配器模式总体来说分三种：默认适配器模式、对象适配器模式、类适配器模式。先不急着分清楚这几个，先看看例子再说。")]),a._v(" "),n("p",[a._v("默认适配器模式")]),a._v(" "),n("p",[a._v("首先，我们先看看最简单的适配器模式**默认适配器模式(Default Adapter)**是怎么样的。")]),a._v(" "),n("p",[a._v("我们用 Appache commons-io 包中的 FileAlterationListener 做例子，此接口定义了很多的方法，用于对文件或文件夹进行监控，一旦发生了对应的操作，就会触发相应的方法。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public interface FileAlterationListener {\n    void onStart(final FileAlterationObserver observer);\n    void onDirectoryCreate(final File directory);\n    void onDirectoryChange(final File directory);\n    void onDirectoryDelete(final File directory);\n    void onFileCreate(final File file);\n    void onFileChange(final File file);\n    void onFileDelete(final File file);\n    void onStop(final FileAlterationObserver observer);\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("此接口的一大问题是抽象方法太多了，如果我们要用这个接口，意味着我们要实现每一个抽象方法，如果我们只是想要监控文件夹中的"),n("strong",[a._v("文件创建")]),a._v("和"),n("strong",[a._v("文件删除")]),a._v("事件，可是我们还是不得不实现所有的方法，很明显，这不是我们想要的。")]),a._v(" "),n("p",[a._v("所以，我们需要下面的一个"),n("strong",[a._v("适配器")]),a._v("，它用于实现上面的接口，但是"),n("strong",[a._v("所有的方法都是空方法")]),a._v("，这样，我们就可以转而定义自己的类来继承下面这个类即可。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FileAlterationListenerAdaptor implements FileAlterationListener {\n\n    public void onStart(final FileAlterationObserver observer) {\n    }\n\n    public void onDirectoryCreate(final File directory) {\n    }\n\n    public void onDirectoryChange(final File directory) {\n    }\n\n    public void onDirectoryDelete(final File directory) {\n    }\n\n    public void onFileCreate(final File file) {\n    }\n\n    public void onFileChange(final File file) {\n    }\n\n    public void onFileDelete(final File file) {\n    }\n\n    public void onStop(final FileAlterationObserver observer) {\n    }\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br")])]),n("p",[a._v("比如我们可以定义以下类，我们仅仅需要实现我们想实现的方法就可以了：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FileMonitor extends FileAlterationListenerAdaptor {\n    public void onFileCreate(final File file) {\n        // 文件创建\n        doSomething();\n    }\n\n    public void onFileDelete(final File file) {\n        // 文件删除\n        doSomething();\n    }\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])]),n("p",[a._v("当然，上面说的只是适配器模式的其中一种，也是最简单的一种，无需多言。下面，再介绍**“正统的”**适配器模式。")]),a._v(" "),n("p",[a._v("对象适配器模式")]),a._v(" "),n("p",[a._v("来看一个《Head First 设计模式》中的一个例子，我稍微修改了一下，看看怎么将鸡适配成鸭，这样鸡也能当鸭来用。因为，现在鸭这个接口，我们没有合适的实现类可以用，所以需要适配器。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public interface Duck {\n    public void quack(); // 鸭的呱呱叫\n      public void fly(); // 飞\n}\n\npublic interface Cock {\n    public void gobble(); // 鸡的咕咕叫\n      public void fly(); // 飞\n}\n\npublic class WildCock implements Cock {\n    public void gobble() {\n        System.out.println("咕咕叫");\n    }\n      public void fly() {\n        System.out.println("鸡也会飞哦");\n    }\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("p",[a._v("鸭接口有 fly() 和 quare() 两个方法，鸡 Cock 如果要冒充鸭，fly() 方法是现成的，但是鸡不会鸭的呱呱叫，没有 quack() 方法。这个时候就需要适配了：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 毫无疑问，首先，这个适配器肯定需要 implements Duck，这样才能当做鸭来用\npublic class CockAdapter implements Duck {\n\n    Cock cock;\n    // 构造方法中需要一个鸡的实例，此类就是将这只鸡适配成鸭来用\n      public CockAdapter(Cock cock) {\n        this.cock = cock;\n    }\n\n    // 实现鸭的呱呱叫方法\n      @Override\n      public void quack() {\n        // 内部其实是一只鸡的咕咕叫\n        cock.gobble();\n    }\n\n      @Override\n      public void fly() {\n        cock.fly();\n    }\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br")])]),n("p",[a._v("客户端调用很简单了：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public static void main(String[] args) {\n    // 有一只野鸡\n      Cock wildCock = new WildCock();\n      // 成功将野鸡适配成鸭\n      Duck duck = new CockAdapter(wildCock);\n      ...\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("到这里，大家也就知道了适配器模式是怎么回事了。无非是我们需要一只鸭，但是我们只有一只鸡，这个时候就需要定义一个适配器，由这个适配器来充当鸭，但是适配器里面的方法还是由鸡来实现的。")]),a._v(" "),n("p",[a._v("我们用一个图来简单说明下：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/adapter-1.png",alt:""}})]),a._v(" "),n("p",[a._v("上图应该还是很容易理解的，我就不做更多的解释了。下面，我们看看类适配模式怎么样的。")]),a._v(" "),n("p",[a._v("类适配器模式")]),a._v(" "),n("p",[a._v("废话少说，直接上图：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/adapter-2.png",alt:""}})]),a._v(" "),n("p",[a._v("看到这个图，大家应该很容易理解的吧，通过继承的方法，适配器自动获得了所需要的大部分方法。这个时候，客户端使用更加简单，直接 "),n("code",[a._v("Target t = new SomeAdapter();")]),a._v(" 就可以了。")]),a._v(" "),n("p",[a._v("适配器模式总结")]),a._v(" "),n("ol",[n("li",[n("p",[a._v("类适配和对象适配的异同")]),a._v(" "),n("blockquote",[n("p",[a._v("一个采用继承，一个采用组合；")]),a._v(" "),n("p",[a._v("类适配属于静态实现，对象适配属于组合的动态实现，对象适配需要多实例化一个对象。")]),a._v(" "),n("p",[a._v("总体来说，对象适配用得比较多。")])])]),a._v(" "),n("li",[n("p",[a._v("适配器模式和代理模式的异同")]),a._v(" "),n("p",[a._v("比较这两种模式，其实是比较对象适配器模式和代理模式，在代码结构上，它们很相似，都需要一个具体的实现类的实例。但是它们的目的不一样，代理模式做的是增强原方法的活；适配器做的是适配的活，为的是提供“把鸡包装成鸭，然后当做鸭来使用”，而鸡和鸭它们之间原本没有继承关系。")])])]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/adapter-5.png",alt:""}})]),a._v(" "),n("h3",{attrs:{id:"桥梁模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桥梁模式"}},[a._v("#")]),a._v(" 桥梁模式")]),a._v(" "),n("p",[a._v("理解桥梁模式，其实就是理解代码抽象和解耦。")]),a._v(" "),n("p",[a._v("我们首先需要一个桥梁，它是一个接口，定义提供的接口方法。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public interface DrawAPI {\n   public void draw(int radius, int x, int y);\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("然后是一系列实现类：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class RedPen implements DrawAPI {\n   @Override\n   public void draw(int radius, int x, int y) {\n      System.out.println("用红色笔画图，radius:" + radius + ", x:" + x + ", y:" + y);\n   }\n}\npublic class GreenPen implements DrawAPI {\n   @Override\n   public void draw(int radius, int x, int y) {\n      System.out.println("用绿色笔画图，radius:" + radius + ", x:" + x + ", y:" + y);\n   }\n}\npublic class BluePen implements DrawAPI {\n   @Override\n   public void draw(int radius, int x, int y) {\n      System.out.println("用蓝色笔画图，radius:" + radius + ", x:" + x + ", y:" + y);\n   }\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("p",[a._v("定义一个抽象类，此类的实现类都需要使用 DrawAPI：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public abstract class Shape {\n   protected DrawAPI drawAPI;\n\n   protected Shape(DrawAPI drawAPI){\n      this.drawAPI = drawAPI;\n   }\n   public abstract void draw();    \n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("定义抽象类的子类：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 圆形\npublic class Circle extends Shape {\n   private int radius;\n\n   public Circle(int radius, DrawAPI drawAPI) {\n      super(drawAPI);\n      this.radius = radius;\n   }\n\n   public void draw() {\n      drawAPI.draw(radius, 0, 0);\n   }\n}\n// 长方形\npublic class Rectangle extends Shape {\n    private int x;\n      private int y;\n\n      public Rectangle(int x, int y, DrawAPI drawAPI) {\n        super(drawAPI);\n          this.x = x;\n          this.y = y;\n    }\n      public void draw() {\n      drawAPI.draw(0, x, y);\n   }\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br")])]),n("p",[a._v("最后，我们来看客户端演示：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public static void main(String[] args) {\n    Shape greenCircle = new Circle(10, new GreenPen());\n      Shape redRectangle = new Rectangle(4, 8, new RedPen());\n\n      greenCircle.draw();\n      redRectangle.draw();\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("可能大家看上面一步步还不是特别清晰，我把所有的东西整合到一张图上：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/bridge-1.png",alt:""}})]),a._v(" "),n("p",[a._v("这回大家应该就知道抽象在哪里，怎么解耦了吧。桥梁模式的优点也是显而易见的，就是非常容易进行扩展。")]),a._v(" "),n("blockquote",[n("p",[a._v("本节引用了"),n("a",{attrs:{href:"https://www.tutorialspoint.com/design_pattern/bridge_pattern.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v("这里"),n("OutboundLink")],1),a._v("的例子，并对其进行了修改。")])]),a._v(" "),n("h3",{attrs:{id:"装饰模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰模式"}},[a._v("#")]),a._v(" 装饰模式")]),a._v(" "),n("p",[a._v("要把装饰模式说清楚明白，不是件容易的事情。也许读者知道 Java IO 中的几个类是典型的装饰模式的应用，但是读者不一定清楚其中的关系，也许看完就忘了，希望看完这节后，读者可以对其有更深的感悟。")]),a._v(" "),n("p",[a._v("首先，我们先看一个简单的图，看这个图的时候，了解下层次结构就可以了：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/decorator-1.png",alt:""}})]),a._v(" "),n("p",[a._v("我们来说说装饰模式的出发点，从图中可以看到，接口 "),n("code",[a._v("Component")]),a._v(" 其实已经有了 "),n("code",[a._v("ConcreteComponentA")]),a._v(" 和 "),n("code",[a._v("ConcreteComponentB")]),a._v(" 两个实现类了，但是，如果我们要"),n("strong",[a._v("增强")]),a._v("这两个实现类的话，我们就可以采用装饰模式，用具体的装饰器来"),n("strong",[a._v("装饰")]),a._v("实现类，以达到增强的目的。")]),a._v(" "),n("blockquote",[n("p",[a._v("从名字来简单解释下装饰器。既然说是装饰，那么往往就是"),n("strong",[a._v("添加小功能")]),a._v("这种，而且，我们要满足可以添加多个小功能。最简单的，代理模式就可以实现功能的增强，但是代理不容易实现多个功能的增强，当然你可以说用代理包装代理的方式，但是那样的话代码就复杂了。")])]),a._v(" "),n("p",[a._v("首先明白一些简单的概念，从图中我们看到，所有的具体装饰者们 ConcreteDecorator_ 都可以作为 Component 来使用，因为它们都实现了 Component 中的所有接口。它们和 Component 实现类 ConcreteComponent_ 的区别是，它们只是装饰者，起"),n("strong",[a._v("装饰")]),a._v("作用，也就是即使它们看上去牛逼轰轰，但是它们都只是在具体的实现中"),n("strong",[a._v("加了层皮来装饰")]),a._v("而已。")]),a._v(" "),n("blockquote",[n("p",[a._v("注意这段话中混杂在各个名词中的 Component 和 Decorator，别搞混了。")])]),a._v(" "),n("p",[a._v("下面来看看一个例子，先把装饰模式弄清楚，然后再介绍下 java io 中的装饰模式的应用。")]),a._v(" "),n("p",[a._v("最近大街上流行起来了“快乐柠檬”，我们把快乐柠檬的饮料分为三类：红茶、绿茶、咖啡，在这三大类的基础上，又增加了许多的口味，什么金桔柠檬红茶、金桔柠檬珍珠绿茶、芒果红茶、芒果绿茶、芒果珍珠红茶、烤珍珠红茶、烤珍珠芒果绿茶、椰香胚芽咖啡、焦糖可可咖啡等等，每家店都有很长的菜单，但是仔细看下，其实原料也没几样，但是可以搭配出很多组合，如果顾客需要，很多没出现在菜单中的饮料他们也是可以做的。")]),a._v(" "),n("p",[a._v("在这个例子中，红茶、绿茶、咖啡是最基础的饮料，其他的像金桔柠檬、芒果、珍珠、椰果、焦糖等都属于装饰用的。当然，在开发中，我们确实可以像门店一样，开发这些类：LemonBlackTea、LemonGreenTea、MangoBlackTea、MangoLemonGreenTea......但是，很快我们就发现，这样子干肯定是不行的，这会导致我们需要组合出所有的可能，而且如果客人需要在红茶中加双份柠檬怎么办？三份柠檬怎么办？万一有个变态要四份柠檬，所以这种做法是给自己找加班的。")]),a._v(" "),n("p",[a._v("不说废话了，上代码。")]),a._v(" "),n("p",[a._v("首先，定义饮料抽象基类：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public abstract class Beverage {\n      // 返回描述\n      public abstract String getDescription();\n      // 返回价格\n      public abstract double cost();\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("p",[a._v("然后是三个基础饮料实现类，红茶、绿茶和咖啡：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class BlackTea extends Beverage {\n      public String getDescription() {\n        return "红茶";\n    }\n      public double cost() {\n        return 10;\n    }\n}\npublic class GreenTea extends Beverage {\n    public String getDescription() {\n        return "绿茶";\n    }\n      public double cost() {\n        return 11;\n    }\n}\n...// 咖啡省略\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br")])]),n("p",[a._v("定义调料，也就是装饰者的基类，此类必须继承自 Beverage：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 调料\npublic abstract class Condiment extends Beverage {\n\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("然后我们来定义柠檬、芒果等具体的调料，它们属于装饰者，毫无疑问，这些调料肯定都需要继承 Condiment 类：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class Lemon extends Condiment {\n    private Beverage bevarage;\n      // 这里很关键，需要传入具体的饮料，如需要传入没有被装饰的红茶或绿茶，\n      // 当然也可以传入已经装饰好的芒果绿茶，这样可以做芒果柠檬绿茶\n      public Lemon(Beverage bevarage) {\n        this.bevarage = bevarage;\n    }\n      public String getDescription() {\n        // 装饰\n        return bevarage.getDescription() + ", 加柠檬";\n    }\n      public double cost() {\n          // 装饰\n        return beverage.cost() + 2; // 加柠檬需要 2 元\n    }\n}\npublic class Mango extends Condiment {\n    private Beverage bevarage;\n      public Mango(Beverage bevarage) {\n        this.bevarage = bevarage;\n    }\n      public String getDescription() {\n        return bevarage.getDescription() + ", 加芒果";\n    }\n      public double cost() {\n        return beverage.cost() + 3; // 加芒果需要 3 元\n    }\n}\n...// 给每一种调料都加一个类\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br")])]),n("p",[a._v("看客户端调用：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n      // 首先，我们需要一个基础饮料，红茶、绿茶或咖啡\n    Beverage beverage = new GreenTea();\n      // 开始装饰\n      beverage = new Lemon(beverage); // 先加一份柠檬\n      beverage = new Mongo(beverage); // 再加一份芒果\n\n      System.out.println(beverage.getDescription() + " 价格：￥" + beverage.cost());\n      //"绿茶, 加柠檬, 加芒果 价格：￥16"\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("如果我们需要芒果珍珠双份柠檬红茶：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Beverage beverage = new Mongo(new Pearl(new Lemon(new Lemon(new BlackTea()))));\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("是不是很变态？")]),a._v(" "),n("p",[a._v("看看下图可能会清晰一些：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/decorator-2.png",alt:""}})]),a._v(" "),n("p",[a._v("到这里，大家应该已经清楚装饰模式了吧。")]),a._v(" "),n("p",[a._v("下面，我们再来说说 java IO 中的装饰模式。看下图 InputStream 派生出来的部分类：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://javadoop.com/blogimages/design-pattern/decorator-3.png",alt:""}})]),a._v(" "),n("p",[a._v("我们知道 InputStream 代表了输入流，具体的输入来源可以是文件（FileInputStream）、管道（PipedInputStream）、数组（ByteArrayInputStream）等，这些就像前面奶茶的例子中的红茶、绿茶，属于基础输入流。")]),a._v(" "),n("p",[a._v("FilterInputStream 承接了装饰模式的关键节点，其实现类是一系列装饰器，比如 BufferedInputStream 代表用缓冲来装饰，也就使得输入流具有了缓冲的功能，LineNumberInputStream 代表用行号来装饰，在操作的时候就可以取得行号了，DataInputStream 的装饰，使得我们可以从输入流转换为 java 中的基本类型值。")]),a._v(" "),n("p",[a._v("当然，在 java IO 中，如果我们使用装饰器的话，就不太适合面向接口编程了，如：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('InputStream inputStream = new LineNumberInputStream(new BufferedInputStream(new FileInputStream("")));\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("这样的结果是，InputStream 还是不具有读取行号的功能，因为读取行号的方法定义在 LineNumberInputStream 类中。")]),a._v(" "),n("p",[a._v("我们应该像下面这样使用：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('DataInputStream is = new DataInputStream(\n                              new BufferedInputStream(\n                                  new FileInputStream("")));\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("blockquote",[n("p",[a._v("所以说嘛，要找到纯的严格符合设计模式的代码还是比较难的。")])]),a._v(" "),n("h3",{attrs:{id:"门面模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#门面模式"}},[a._v("#")]),a._v(" 门面模式")]),a._v(" "),n("p",[a._v("门面模式（也叫外观模式，Facade Pattern）在许多源码中有使用，比如 slf4j 就可以理解为是门面模式的应用。这是一个简单的设计模式，我们直接上代码再说吧。")]),a._v(" "),n("p",[a._v("首先，我们定义一个接口：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public interface Shape {\n   void draw();\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("定义几个实现类：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class Circle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println("Circle::draw()");\n   }\n}\n\npublic class Rectangle implements Shape {\n\n   @Override\n   public void draw() {\n      System.out.println("Rectangle::draw()");\n   }\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br")])]),n("p",[a._v("客户端调用：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public static void main(String[] args) {\n    // 画一个圆形\n      Shape circle = new Circle();\n      circle.draw();\n\n      // 画一个长方形\n      Shape rectangle = new Rectangle();\n      rectangle.draw();\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("p",[a._v("以上是我们常写的代码，我们需要画圆就要先实例化圆，画长方形就需要先实例化一个长方形，然后再调用相应的 draw() 方法。")]),a._v(" "),n("p",[a._v("下面，我们看看怎么用门面模式来让客户端调用更加友好一些。")]),a._v(" "),n("p",[a._v("我们先定义一个门面：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class ShapeMaker {\n   private Shape circle;\n   private Shape rectangle;\n   private Shape square;\n\n   public ShapeMaker() {\n      circle = new Circle();\n      rectangle = new Rectangle();\n      square = new Square();\n   }\n\n  /**\n   * 下面定义一堆方法，具体应该调用什么方法，由这个门面来决定\n   */\n\n   public void drawCircle(){\n      circle.draw();\n   }\n   public void drawRectangle(){\n      rectangle.draw();\n   }\n   public void drawSquare(){\n      square.draw();\n   }\n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br")])]),n("p",[a._v("看看现在客户端怎么调用：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public static void main(String[] args) {\n  ShapeMaker shapeMaker = new ShapeMaker();\n\n  // 客户端调用现在更加清晰了\n  shapeMaker.drawCircle();\n  shapeMaker.drawRectangle();\n  shapeMaker.drawSquare();        \n}\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("门面模式的优点显而易见，客户端不再需要关注实例化时应该使用哪个实现类，直接调用门面提供的方法就可以了，因为门面类提供的方法的方法名对于客户端来说已经很友好了。")]),a._v(" "),n("h3",{attrs:{id:"组合模式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合模式-2"}},[a._v("#")]),a._v(" 组合模式")]),a._v(" "),n("p",[a._v("组合模式用于表示具有层次结构的数据，使得我们对单个对象和组合对象的访问具有一致性。")]),a._v(" "),n("p",[a._v("直接看一个例子吧，每个员工都有姓名、部门、薪水这些属性，同时还有下属员工集合（虽然可能集合为空），而下属员工和自己的结构是一样的，也有姓名、部门这些属性，同时也有他们的下属员工集合。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class Employee {\n   private String name;\n   private String dept;\n   private int salary;\n   private List<Employee> subordinates; // 下属\n\n   public Employee(String name,String dept, int sal) {\n      this.name = name;\n      this.dept = dept;\n      this.salary = sal;\n      subordinates = new ArrayList<Employee>();\n   }\n\n   public void add(Employee e) {\n      subordinates.add(e);\n   }\n\n   public void remove(Employee e) {\n      subordinates.remove(e);\n   }\n\n   public List<Employee> getSubordinates(){\n     return subordinates;\n   }\n\n   public String toString(){\n      return ("Employee :[ Name : " + name + ", dept : " + dept + ", salary :" + salary+" ]");\n   }   \n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br")])]),n("p",[a._v("通常，这种类需要定义 add(node)、remove(node)、getChildren() 这些方法。")]),a._v(" "),n("p",[a._v("这说的其实就是组合模式，这种简单的模式我就不做过多介绍了，相信各位读者也不喜欢看我写废话。")]),a._v(" "),n("h3",{attrs:{id:"享元模式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-2"}},[a._v("#")]),a._v(" 享元模式")]),a._v(" "),n("p",[a._v("英文是 Flyweight Pattern，不知道是谁最先翻译的这个词，感觉这翻译真的不好理解，我们试着强行关联起来吧。Flyweight 是轻量级的意思，享元分开来说就是 共享 元器件，也就是复用已经生成的对象，这种做法当然也就是轻量级的了。")]),a._v(" "),n("p",[a._v("复用对象最简单的方式是，用一个 HashMap 来存放每次新生成的对象。每次需要一个对象的时候，先到 HashMap 中看看有没有，如果没有，再生成新的对象，然后将这个对象放入 HashMap 中。")]),a._v(" "),n("p",[a._v("这种简单的代码我就不演示了。")]),a._v(" "),n("h3",{attrs:{id:"结构型模式总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式总结"}},[a._v("#")]),a._v(" 结构型模式总结")]),a._v(" "),n("p",[a._v("前面，我们说了代理模式、适配器模式、桥梁模式、装饰模式、门面模式、组合模式和享元模式。读者是否可以分别把这几个模式说清楚了呢？在说到这些模式的时候，心中是否有一个清晰的图或处理流程在脑海里呢？")]),a._v(" "),n("p",[a._v("代理模式是做方法增强的，适配器模式是把鸡包装成鸭这种用来适配接口的，桥梁模式做到了很好的解耦，装饰模式从名字上就看得出来，适合于装饰类或者说是增强类的场景，门面模式的优点是客户端不需要关心实例化过程，只要调用需要的方法即可，组合模式用于描述具有层次结构的数据，享元模式是为了在特定的场景中缓存已经创建的对象，用于提高性能。")]),a._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),n("p",[a._v("转自https://javadoop.com/post/design-pattern")]),a._v(" "),n("h2",{attrs:{id:"微信公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信公众号"}},[a._v("#")]),a._v(" 微信公众号")]),a._v(" "),n("h3",{attrs:{id:"java技术江湖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java技术江湖"}},[a._v("#")]),a._v(" Java技术江湖")]),a._v(" "),n("p",[a._v("如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号【Java技术江湖】一位阿里 Java 工程师的技术小站，作者黄小斜，专注 Java 相关技术：SSM、SpringBoot、MySQL、分布式、中间件、集群、Linux、网络、多线程，偶尔讲点Docker、ELK，同时也分享技术干货和学习经验，致力于Java全栈开发！")]),a._v(" "),n("p",[n("strong",[a._v("Java工程师必备学习资源:")]),a._v(" 一些Java工程师常用学习资源，关注公众号后，后台回复关键字 "),n("strong",[a._v("“Java”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190805090108984.jpg",alt:"我的公众号"}})]),a._v(" "),n("h3",{attrs:{id:"个人公众号-黄小斜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人公众号-黄小斜"}},[a._v("#")]),a._v(" 个人公众号：黄小斜")]),a._v(" "),n("p",[a._v("作者是 985 硕士，蚂蚁金服 JAVA 工程师，专注于 JAVA 后端技术栈：SpringBoot、MySQL、分布式、中间件、微服务，同时也懂点投资理财，偶尔讲点算法和计算机理论基础，坚持学习和写作，相信终身学习的力量！")]),a._v(" "),n("p",[n("strong",[a._v("程序员3T技术学习资源：")]),a._v(" 一些程序员学习技术的资源大礼包，关注公众号后，后台回复关键字 "),n("strong",[a._v("“资料”")]),a._v(" 即可免费无套路获取。")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190829222750556.jpg",alt:""}})])])}),[],!1,null,null,null);s.default=t.exports}}]);