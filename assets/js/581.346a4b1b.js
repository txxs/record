(window.webpackJsonp=window.webpackJsonp||[]).push([[581],{977:function(n,s,a){"use strict";a.r(s);var e=a(13),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[n._v("#")]),n._v(" Table of Contents")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%89%8D%E8%A8%80"}},[n._v("前言")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#blockingqueue"}},[n._v("BlockingQueue")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#blockingqueue-%E5%AE%9E%E7%8E%B0%E4%B9%8B-arrayblockingqueue"}},[n._v("BlockingQueue 实现之 ArrayBlockingQueue")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#blockingqueue-%E5%AE%9E%E7%8E%B0%E4%B9%8B-linkedblockingqueue"}},[n._v("BlockingQueue 实现之 LinkedBlockingQueue")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#blockingqueue-%E5%AE%9E%E7%8E%B0%E4%B9%8B-synchronousqueue"}},[n._v("BlockingQueue 实现之 SynchronousQueue")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#blockingqueue-%E5%AE%9E%E7%8E%B0%E4%B9%8B-priorityblockingqueue"}},[n._v("BlockingQueue 实现之 PriorityBlockingQueue")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[n._v("总结")])])]),n._v(" "),a("p",[n._v("本文转自：https://www.javadoop.com/")]),n._v(" "),a("p",[a("strong",[n._v("本文转载自互联网，侵删")])]),n._v(" "),a("p",[n._v("本系列文章将整理到我在GitHub上的《Java面试指南》仓库，更多精彩内容请到我的仓库里查看")]),n._v(" "),a("blockquote",[a("p",[n._v("https://github.com/h2pl/Java-Tutorial")])]),n._v(" "),a("p",[n._v("喜欢的话麻烦点下Star哈")]),n._v(" "),a("p",[n._v("文章同步发于我的个人博客：")]),n._v(" "),a("blockquote",[a("p",[n._v("www.how2playlife.com")])]),n._v(" "),a("p",[n._v("本文是微信公众号【Java技术江湖】的《Java并发指南》其中一篇，本文大部分内容来源于网络，为了把本文主题讲得清晰透彻，也整合了很多我认为不错的技术博客内容，引用其中了一些比较好的博客文章，如有侵权，请联系作者。")]),n._v(" "),a("p",[n._v("该系列博文会告诉你如何全面深入地学习Java并发技术，从Java多线程基础，再到并发编程的基础知识，从Java并发包的入门和实战，再到JUC的源码剖析，一步步地学习Java并发编程，并上手进行实战，以便让你更完整地了解整个Java并发编程知识体系，形成自己的知识框架。")]),n._v(" "),a("p",[n._v("为了更好地总结和检验你的学习成果，本系列文章也会提供一些对应的面试题以及参考答案。")]),n._v(" "),a("p",[n._v("如果对本系列文章有什么建议，或者是有什么疑问的话，也可以关注公众号【Java技术江湖】联系作者，欢迎你参与本系列博文的创作和修订。\n")]),n._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("p",[n._v("最近得空，想写篇文章好好说说 java 线程池问题，我相信很多人都一知半解的，包括我自己在仔仔细细看源码之前，也有许多的不解，甚至有些地方我一直都没有理解到位。")]),n._v(" "),a("p",[n._v("说到线程池实现，那么就不得不涉及到各种 BlockingQueue 的实现，那么我想就 BlockingQueue 的问题和大家分享分享我了解的一些知识。")]),n._v(" "),a("p",[n._v("本文没有像之前分析 AQS 那样一行一行源码分析了，不过还是把其中最重要和最难理解的代码说了一遍，所以不免篇幅略长。本文涉及到比较多的 Doug Lea 对 BlockingQueue 的设计思想，希望有心的读者真的可以有一些收获，我觉得自己还是写了一些干货的。")]),n._v(" "),a("p",[n._v("本文直接参考 Doug Lea 写的 Java doc 和注释，这也是我们在学习 java 并发包时最好的材料了。希望大家能有所思、有所悟，学习 Doug Lea 的代码风格，并将其优雅、严谨的作风应用到我们写的每一行代码中。")]),n._v(" "),a("p",[a("strong",[n._v("目录：")])]),n._v(" "),a("h2",{attrs:{id:"blockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue"}},[n._v("#")]),n._v(" BlockingQueue")]),n._v(" "),a("blockquote",[a("p",[n._v("开篇先介绍下 BlockingQueue 这个接口的规则，后面再看其实现。")])]),n._v(" "),a("p",[n._v("首先，最基本的来说， BlockingQueue 是一个"),a("strong",[n._v("先进先出")]),n._v("的队列（Queue），为什么说是阻塞（Blocking）的呢？是因为 BlockingQueue 支持当获取队列元素但是队列为空时，会阻塞等待队列中有元素再返回；也支持添加元素时，如果队列已满，那么等到队列可以放入新元素时再放入。")]),n._v(" "),a("p",[n._v("BlockingQueue 是一个接口，继承自 Queue，所以其实现类也可以作为 Queue 的实现来使用，而 Queue 又继承自 Collection 接口。")]),n._v(" "),a("p",[n._v("BlockingQueue 对插入操作、移除操作、获取元素操作提供了四种不同的方法用于不同的场景中使用：1、抛出异常；2、返回特殊值（null 或 true/false，取决于具体的操作）；3、阻塞等待此操作，直到这个操作成功；4、阻塞等待此操作，直到成功或者超时指定时间。总结如下：")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th"),n._v(" "),a("th",[a("em",[n._v("Throws exception")])]),n._v(" "),a("th",[a("em",[n._v("Special value")])]),n._v(" "),a("th",[a("em",[n._v("Blocks")])]),n._v(" "),a("th",[a("em",[n._v("Times out")])])])]),n._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[n._v("Insert")])]),n._v(" "),a("td",[n._v("add(e)")]),n._v(" "),a("td",[n._v("offer(e)")]),n._v(" "),a("td",[a("strong",[n._v("put(e)")])]),n._v(" "),a("td",[n._v("offer(e, time, unit)")])]),n._v(" "),a("tr",[a("td",[a("strong",[n._v("Remove")])]),n._v(" "),a("td",[n._v("remove()")]),n._v(" "),a("td",[n._v("poll()")]),n._v(" "),a("td",[a("strong",[n._v("take()")])]),n._v(" "),a("td",[n._v("poll(time, unit)")])]),n._v(" "),a("tr",[a("td",[a("strong",[n._v("Examine")])]),n._v(" "),a("td",[n._v("element()")]),n._v(" "),a("td",[n._v("peek()")]),n._v(" "),a("td",[a("em",[n._v("not applicable")])]),n._v(" "),a("td",[a("em",[n._v("not applicable")])])])])]),n._v(" "),a("p",[n._v("BlockingQueue 的各个实现都遵循了这些规则，当然我们也不用死记这个表格，知道有这么回事，然后写代码的时候根据自己的需要去看方法的注释来选取合适的方法即可。")]),n._v(" "),a("blockquote",[a("p",[n._v("对于 BlockingQueue，我们的关注点应该在 put(e) 和 take() 这两个方法，因为这两个方法是带阻塞的。")])]),n._v(" "),a("p",[n._v("BlockingQueue 不接受 null 值的插入，相应的方法在碰到 null 的插入时会抛出 NullPointerException 异常。null 值在这里通常用于作为特殊值返回（表格中的第三列），代表 poll 失败。所以，如果允许插入 null 值的话，那获取的时候，就不能很好地用 null 来判断到底是代表失败，还是获取的值就是 null 值。")]),n._v(" "),a("p",[n._v("一个 BlockingQueue 可能是有界的，如果在插入的时候，发现队列满了，那么 put 操作将会阻塞。通常，在这里我们说的无界队列也不是说真正的无界，而是它的容量是 Integer.MAX_VALUE（21亿多）。")]),n._v(" "),a("p",[n._v("BlockingQueue 是设计用来实现生产者-消费者队列的，当然，你也可以将它当做普通的 Collection 来用，前面说了，它实现了 java.util.Collection 接口。例如，我们可以用 remove(x) 来删除任意一个元素，但是，这类操作通常并不高效，所以尽量只在少数的场合使用，比如一条消息已经入队，但是需要做取消操作的时候。")]),n._v(" "),a("p",[n._v("BlockingQueue 的实现都是线程安全的，但是批量的集合操作如 "),a("code",[n._v("addAll")]),n._v(", "),a("code",[n._v("containsAll")]),n._v(", "),a("code",[n._v("retainAll")]),n._v(" 和 "),a("code",[n._v("removeAll")]),n._v(" 不一定是原子操作。如 addAll(c) 有可能在添加了一些元素后中途抛出异常，此时 BlockingQueue 中已经添加了部分元素，这个是允许的，取决于具体的实现。")]),n._v(" "),a("p",[n._v("BlockingQueue 不支持 close 或 shutdown 等"),a("strong",[n._v("关闭")]),n._v("操作，因为开发者可能希望不会有新的元素添加进去，此特性取决于具体的实现，不做强制约束。")]),n._v(" "),a("p",[n._v("最后，BlockingQueue 在生产者-消费者的场景中，是支持多消费者和多生产者的，说的其实就是线程安全问题。")]),n._v(" "),a("p",[n._v("相信上面说的每一句都很清楚了，BlockingQueue 是一个比较简单的线程安全容器，下面我会分析其具体的在 JDK 中的实现，这里又到了 Doug Lea 表演时间了。")]),n._v(" "),a("h2",{attrs:{id:"blockingqueue-实现之-arrayblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue-实现之-arrayblockingqueue"}},[n._v("#")]),n._v(" BlockingQueue 实现之 ArrayBlockingQueue")]),n._v(" "),a("p",[n._v("ArrayBlockingQueue 是 BlockingQueue 接口的有界队列实现类，底层采用数组来实现。")]),n._v(" "),a("p",[n._v("其并发控制采用可重入锁来控制，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。")]),n._v(" "),a("p",[n._v("如果读者看过我之前写的《"),a("a",{attrs:{href:"https://www.javadoop.com/post/AbstractQueuedSynchronizer-2",target:"_blank",rel:"noopener noreferrer"}},[n._v("一行一行源码分析清楚 AbstractQueuedSynchronizer（二）"),a("OutboundLink")],1),n._v("》 的关于 Condition 的文章的话，那么你一定能很容易看懂 ArrayBlockingQueue 的源码，它采用一个 ReentrantLock 和相应的两个 Condition 来实现。")]),n._v(" "),a("p",[n._v("ArrayBlockingQueue 共有以下几个属性：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 用于存放元素的数组\nfinal Object[] items;\n// 下一次读取操作的位置\nint takeIndex;\n// 下一次写入操作的位置\nint putIndex;\n// 队列中的元素数量\nint count;\n\n// 以下几个就是控制并发用的同步器\nfinal ReentrantLock lock;\nprivate final Condition notEmpty;\nprivate final Condition notFull;\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("我们用个示意图来描述其同步机制：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/array-blocking-queue.png",alt:"array-blocking-queue"}})]),n._v(" "),a("p",[n._v("ArrayBlockingQueue 实现并发同步的原理就是，读操作和写操作都需要获取到 AQS 独占锁才能进行操作。如果队列为空，这个时候读操作的线程进入到"),a("strong",[n._v("读线程队列")]),n._v("排队，等待写线程写入新的元素，然后唤醒读线程队列的第一个等待线程。如果队列已满，这个时候写操作的线程进入到"),a("strong",[n._v("写线程队列")]),n._v("排队，等待读线程将队列元素移除腾出空间，然后唤醒写线程队列的第一个等待线程。")]),n._v(" "),a("p",[n._v("对于 ArrayBlockingQueue，我们可以在构造的时候指定以下三个参数：")]),n._v(" "),a("ol",[a("li",[n._v("队列容量，其限制了队列中最多允许的元素个数；")]),n._v(" "),a("li",[n._v("指定独占锁是公平锁还是非公平锁。非公平锁的吞吐量比较高，公平锁可以保证每次都是等待最久的线程获取到锁；")]),n._v(" "),a("li",[n._v("可以指定用一个集合来初始化，将此集合中的元素在构造方法期间就先添加到队列中。")])]),n._v(" "),a("p",[n._v("更具体的源码我就不进行分析了，因为它就是 AbstractQueuedSynchronizer 中 Condition 的使用，感兴趣的读者请看我写的《"),a("a",{attrs:{href:"https://www.javadoop.com/post/AbstractQueuedSynchronizer-2/",target:"_blank",rel:"noopener noreferrer"}},[n._v("一行一行源码分析清楚 AbstractQueuedSynchronizer（二）"),a("OutboundLink")],1),n._v("》，因为只要看懂了那篇文章，ArrayBlockingQueue 的代码就没有分析的必要了，当然，如果你完全不懂 Condition，那么基本上也就可以说看不懂 ArrayBlockingQueue 的源码了。")]),n._v(" "),a("h2",{attrs:{id:"blockingqueue-实现之-linkedblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue-实现之-linkedblockingqueue"}},[n._v("#")]),n._v(" BlockingQueue 实现之 LinkedBlockingQueue")]),n._v(" "),a("p",[n._v("底层基于单向链表实现的阻塞队列，可以当做无界队列也可以当做有界队列来使用。看构造方法：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 传说中的无界队列\npublic LinkedBlockingQueue() {\n    this(Integer.MAX_VALUE);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 传说中的有界队列\npublic LinkedBlockingQueue(int capacity) {\n    if (capacity <= 0) throw new IllegalArgumentException();\n    this.capacity = capacity;\n    last = head = new Node<E>(null);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("我们看看这个类有哪些属性：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 队列容量\nprivate final int capacity;\n\n// 队列中的元素数量\nprivate final AtomicInteger count = new AtomicInteger(0);\n\n// 队头\nprivate transient Node<E> head;\n\n// 队尾\nprivate transient Node<E> last;\n\n// take, poll, peek 等读操作的方法需要获取到这个锁\nprivate final ReentrantLock takeLock = new ReentrantLock();\n\n// 如果读操作的时候队列是空的，那么等待 notEmpty 条件\nprivate final Condition notEmpty = takeLock.newCondition();\n\n// put, offer 等写操作的方法需要获取到这个锁\nprivate final ReentrantLock putLock = new ReentrantLock();\n\n// 如果写操作的时候队列是满的，那么等待 notFull 条件\nprivate final Condition notFull = putLock.newCondition();\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[n._v("这里用了两个锁，两个 Condition，简单介绍如下：")]),n._v(" "),a("p",[n._v("**takeLock 和 notEmpty 怎么搭配：**如果要获取（take）一个元素，需要获取 takeLock 锁，但是获取了锁还不够，如果队列此时为空，还需要队列不为空（notEmpty）这个条件（Condition）。")]),n._v(" "),a("p",[n._v("**putLock 需要和 notFull 搭配：**如果要插入（put）一个元素，需要获取 putLock 锁，但是获取了锁还不够，如果队列此时已满，还需要队列不是满的（notFull）这个条件（Condition）。")]),n._v(" "),a("p",[n._v("首先，这里用一个示意图来看看 LinkedBlockingQueue 的并发读写控制，然后再开始分析源码：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/linked-blocking-queue.png",alt:"linked-blocking-queue"}})]),n._v(" "),a("p",[n._v("看懂这个示意图，源码也就简单了，读操作是排好队的，写操作也是排好队的，唯一的并发问题在于一个写操作和一个读操作同时进行，只要控制好这个就可以了。")]),n._v(" "),a("p",[n._v("先上构造方法：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public LinkedBlockingQueue(int capacity) {\n    if (capacity <= 0) throw new IllegalArgumentException();\n    this.capacity = capacity;\n    last = head = new Node<E>(null);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("注意，这里会初始化一个空的头结点，那么第一个元素入队的时候，队列中就会有两个元素。读取元素时，也总是获取头节点后面的一个节点。count 的计数值不包括这个头节点。")]),n._v(" "),a("p",[n._v("我们来看下 put 方法是怎么将元素插入到队尾的：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public void put(E e) throws InterruptedException {\n    if (e == null) throw new NullPointerException();\n    // 如果你纠结这里为什么是 -1，可以看看 offer 方法。这就是个标识成功、失败的标志而已。\n    int c = -1;\n    Node<E> node = new Node(e);\n    final ReentrantLock putLock = this.putLock;\n    final AtomicInteger count = this.count;\n    // 必须要获取到 putLock 才可以进行插入操作\n    putLock.lockInterruptibly();\n    try {\n        // 如果队列满，等待 notFull 的条件满足。\n        while (count.get() == capacity) {\n            notFull.await();\n        }\n        // 入队\n        enqueue(node);\n        // count 原子加 1，c 还是加 1 前的值\n        c = count.getAndIncrement();\n        // 如果这个元素入队后，还有至少一个槽可以使用，调用 notFull.signal() 唤醒等待线程。\n        // 哪些线程会等待在 notFull 这个 Condition 上呢？\n        if (c + 1 < capacity)\n            notFull.signal();\n    } finally {\n        // 入队后，释放掉 putLock\n        putLock.unlock();\n    }\n    // 如果 c == 0，那么代表队列在这个元素入队前是空的（不包括head空节点），\n    // 那么所有的读线程都在等待 notEmpty 这个条件，等待唤醒，这里做一次唤醒操作\n    if (c == 0)\n        signalNotEmpty();\n}\n\n// 入队的代码非常简单，就是将 last 属性指向这个新元素，并且让原队尾的 next 指向这个元素\n// 这里入队没有并发问题，因为只有获取到 putLock 独占锁以后，才可以进行此操作\nprivate void enqueue(Node<E> node) {\n    // assert putLock.isHeldByCurrentThread();\n    // assert last.next == null;\n    last = last.next = node;\n}\n\n// 元素入队后，如果需要，调用这个方法唤醒读线程来读\nprivate void signalNotEmpty() {\n    final ReentrantLock takeLock = this.takeLock;\n    takeLock.lock();\n    try {\n        notEmpty.signal();\n    } finally {\n        takeLock.unlock();\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br")])]),a("p",[n._v("我们再看看 take 方法：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public E take() throws InterruptedException {\n    E x;\n    int c = -1;\n    final AtomicInteger count = this.count;\n    final ReentrantLock takeLock = this.takeLock;\n    // 首先，需要获取到 takeLock 才能进行出队操作\n    takeLock.lockInterruptibly();\n    try {\n        // 如果队列为空，等待 notEmpty 这个条件满足再继续执行\n        while (count.get() == 0) {\n            notEmpty.await();\n        }\n        // 出队\n        x = dequeue();\n        // count 进行原子减 1\n        c = count.getAndDecrement();\n        // 如果这次出队后，队列中至少还有一个元素，那么调用 notEmpty.signal() 唤醒其他的读线程\n        if (c > 1)\n            notEmpty.signal();\n    } finally {\n        // 出队后释放掉 takeLock\n        takeLock.unlock();\n    }\n    // 如果 c == capacity，那么说明在这个 take 方法发生的时候，队列是满的\n    // 既然出队了一个，那么意味着队列不满了，唤醒写线程去写\n    if (c == capacity)\n        signalNotFull();\n    return x;\n}\n// 取队头，出队\nprivate E dequeue() {\n    // assert takeLock.isHeldByCurrentThread();\n    // assert head.item == null;\n    // 之前说了，头结点是空的\n    Node<E> h = head;\n    Node<E> first = h.next;\n    h.next = h; // help GC\n    // 设置这个为新的头结点\n    head = first;\n    E x = first.item;\n    first.item = null;\n    return x;\n}\n// 元素出队后，如果需要，调用这个方法唤醒写线程来写\nprivate void signalNotFull() {\n    final ReentrantLock putLock = this.putLock;\n    putLock.lock();\n    try {\n        notFull.signal();\n    } finally {\n        putLock.unlock();\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br")])]),a("p",[n._v("源码分析就到这里结束了吧，毕竟还是比较简单的源码，基本上只要读者认真点都看得懂。")]),n._v(" "),a("h2",{attrs:{id:"blockingqueue-实现之-synchronousqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue-实现之-synchronousqueue"}},[n._v("#")]),n._v(" BlockingQueue 实现之 SynchronousQueue")]),n._v(" "),a("p",[n._v("它是一个特殊的队列，它的名字其实就蕴含了它的特征 - - 同步的队列。为什么说是同步的呢？这里说的并不是多线程的并发问题，而是因为当一个线程往队列中写入一个元素时，写入操作不会立即返回，需要等待另一个线程来将这个元素拿走；同理，当一个读线程做读操作的时候，同样需要一个相匹配的写线程的写操作。这里的 Synchronous 指的就是读线程和写线程需要同步，一个读线程匹配一个写线程。")]),n._v(" "),a("p",[n._v("我们比较少使用到 SynchronousQueue 这个类，不过它在线程池的实现类 ThreadPoolExecutor 中得到了应用，感兴趣的读者可以在看完这个后去看看相应的使用。")]),n._v(" "),a("p",[n._v("虽然上面我说了队列，但是 SynchronousQueue 的队列其实是虚的，其不提供任何空间（一个都没有）来存储元素。数据必须从某个写线程交给某个读线程，而不是写到某个队列中等待被消费。")]),n._v(" "),a("p",[n._v("你不能在 SynchronousQueue 中使用 peek 方法（在这里这个方法直接返回 null），peek 方法的语义是只读取不移除，显然，这个方法的语义是不符合 SynchronousQueue 的特征的。SynchronousQueue 也不能被迭代，因为根本就没有元素可以拿来迭代的。虽然 SynchronousQueue 间接地实现了 Collection 接口，但是如果你将其当做 Collection 来用的话，那么集合是空的。当然，这个类也是不允许传递 null 值的（并发包中的容器类好像都不支持插入 null 值，因为 null 值往往用作其他用途，比如用于方法的返回值代表操作失败）。")]),n._v(" "),a("p",[n._v("接下来，我们来看看具体的源码实现吧，它的源码不是很简单的那种，我们需要先搞清楚它的设计思想。")]),n._v(" "),a("p",[n._v("源码加注释大概有 1200 行，我们先看大框架：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 构造时，我们可以指定公平模式还是非公平模式，区别之后再说\npublic SynchronousQueue(boolean fair) {\n    transferer = fair ? new TransferQueue() : new TransferStack();\n}\nabstract static class Transferer {\n    // 从方法名上大概就知道，这个方法用于转移元素，从生产者手上转到消费者手上\n    // 也可以被动地，消费者调用这个方法来从生产者手上取元素\n    // 第一个参数 e 如果不是 null，代表场景为：将元素从生产者转移给消费者\n    // 如果是 null，代表消费者等待生产者提供元素，然后返回值就是相应的生产者提供的元素\n    // 第二个参数代表是否设置超时，如果设置超时，超时时间是第三个参数的值\n    // 返回值如果是 null，代表超时，或者中断。具体是哪个，可以通过检测中断状态得到。\n    abstract Object transfer(Object e, boolean timed, long nanos);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("Transferer 有两个内部实现类，是因为构造 SynchronousQueue 的时候，我们可以指定公平策略。公平模式意味着，所有的读写线程都遵守先来后到，FIFO 嘛，对应 TransferQueue。而非公平模式则对应 TransferStack。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/synchronous-queue.png",alt:"synchronous-queue"}})]),n._v(" "),a("p",[n._v("我们先采用公平模式分析源码，然后再说说公平模式和非公平模式的区别。")]),n._v(" "),a("p",[n._v("接下来，我们看看 put 方法和 take 方法：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 写入值\npublic void put(E o) throws InterruptedException {\n    if (o == null) throw new NullPointerException();\n    if (transferer.transfer(o, false, 0) == null) { // 1\n        Thread.interrupted();\n        throw new InterruptedException();\n    }\n}\n// 读取值并移除\npublic E take() throws InterruptedException {\n    Object e = transferer.transfer(null, false, 0); // 2\n    if (e != null)\n        return (E)e;\n    Thread.interrupted();\n    throw new InterruptedException();\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("我们看到，写操作 put(E o) 和读操作 take() 都是调用 Transferer.transfer(…) 方法，区别在于第一个参数是否为 null 值。")]),n._v(" "),a("p",[n._v("我们来看看 transfer 的设计思路，其基本算法如下：")]),n._v(" "),a("ol",[a("li",[n._v("当调用这个方法时，如果队列是空的，或者队列中的节点和当前的线程操作类型一致（如当前操作是 put 操作，而队列中的元素也都是写线程）。这种情况下，将当前线程加入到等待队列即可。")]),n._v(" "),a("li",[n._v("如果队列中有等待节点，而且与当前操作可以匹配（如队列中都是读操作线程，当前线程是写操作线程，反之亦然）。这种情况下，匹配等待队列的队头，出队，返回相应数据。")])]),n._v(" "),a("p",[n._v("其实这里有个隐含的条件被满足了，队列如果不为空，肯定都是同种类型的节点，要么都是读操作，要么都是写操作。这个就要看到底是读线程积压了，还是写线程积压了。")]),n._v(" "),a("p",[n._v("我们可以假设出一个男女配对的场景：一个男的过来，如果一个人都没有，那么他需要等待；如果发现有一堆男的在等待，那么他需要排到队列后面；如果发现是一堆女的在排队，那么他直接牵走队头的那个女的。")]),n._v(" "),a("p",[n._v("既然这里说到了等待队列，我们先看看其实现，也就是 QNode:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("static final class QNode {\n    volatile QNode next;          // 可以看出来，等待队列是单向链表\n    volatile Object item;         // CAS'ed to or from null\n    volatile Thread waiter;       // 将线程对象保存在这里，用于挂起和唤醒\n    final boolean isData;         // 用于判断是写线程节点(isData == true)，还是读线程节点\n\n    QNode(Object item, boolean isData) {\n        this.item = item;\n        this.isData = isData;\n    }\n  ......\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("相信说了这么多以后，我们再来看 transfer 方法的代码就轻松多了。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/**\n * Puts or takes an item.\n */\nObject transfer(Object e, boolean timed, long nanos) {\n\n    QNode s = null; // constructed/reused as needed\n    boolean isData = (e != null);\n\n    for (;;) {\n        QNode t = tail;\n        QNode h = head;\n        if (t == null || h == null)         // saw uninitialized value\n            continue;                       // spin\n\n        // 队列空，或队列中节点类型和当前节点一致，\n        // 即我们说的第一种情况，将节点入队即可。读者要想着这块 if 里面方法其实就是入队\n        if (h == t || t.isData == isData) { // empty or same-mode\n            QNode tn = t.next;\n            // t != tail 说明刚刚有节点入队，continue 即可\n            if (t != tail)                  // inconsistent read\n                continue;\n            // 有其他节点入队，但是 tail 还是指向原来的，此时设置 tail 即可\n            if (tn != null) {               // lagging tail\n                // 这个方法就是：如果 tail 此时为 t 的话，设置为 tn\n                advanceTail(t, tn);\n                continue;\n            }\n            // \n            if (timed && nanos <= 0)        // can't wait\n                return null;\n            if (s == null)\n                s = new QNode(e, isData);\n            // 将当前节点，插入到 tail 的后面\n            if (!t.casNext(null, s))        // failed to link in\n                continue;\n\n            // 将当前节点设置为新的 tail\n            advanceTail(t, s);              // swing tail and wait\n            // 看到这里，请读者先往下滑到这个方法，看完了以后再回来这里，思路也就不会断了\n            Object x = awaitFulfill(s, e, timed, nanos);\n            // 到这里，说明之前入队的线程被唤醒了，准备往下执行\n            if (x == s) {                   // wait was cancelled\n                clean(t, s);\n                return null;\n            }\n\n            if (!s.isOffList()) {           // not already unlinked\n                advanceHead(t, s);          // unlink if head\n                if (x != null)              // and forget fields\n                    s.item = s;\n                s.waiter = null;\n            }\n            return (x != null) ? x : e;\n\n        // 这里的 else 分支就是上面说的第二种情况，有相应的读或写相匹配的情况\n        } else {                            // complementary-mode\n            QNode m = h.next;               // node to fulfill\n            if (t != tail || m == null || h != head)\n                continue;                   // inconsistent read\n\n            Object x = m.item;\n            if (isData == (x != null) ||    // m already fulfilled\n                x == m ||                   // m cancelled\n                !m.casItem(x, e)) {         // lost CAS\n                advanceHead(h, m);          // dequeue and retry\n                continue;\n            }\n\n            advanceHead(h, m);              // successfully fulfilled\n            LockSupport.unpark(m.waiter);\n            return (x != null) ? x : e;\n        }\n    }\n}\n\nvoid advanceTail(QNode t, QNode nt) {\n    if (tail == t)\n        UNSAFE.compareAndSwapObject(this, tailOffset, t, nt);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 自旋或阻塞，直到满足条件，这个方法返回\nObject awaitFulfill(QNode s, Object e, boolean timed, long nanos) {\n\n    long lastTime = timed ? System.nanoTime() : 0;\n    Thread w = Thread.currentThread();\n    // 判断需要自旋的次数，\n    int spins = ((head.next == s) ?\n                 (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n    for (;;) {\n        // 如果被中断了，那么取消这个节点\n        if (w.isInterrupted())\n            // 就是将当前节点 s 中的 item 属性设置为 this\n            s.tryCancel(e);\n        Object x = s.item;\n        // 这里是这个方法的唯一的出口\n        if (x != e)\n            return x;\n        // 如果需要，检测是否超时\n        if (timed) {\n            long now = System.nanoTime();\n            nanos -= now - lastTime;\n            lastTime = now;\n            if (nanos <= 0) {\n                s.tryCancel(e);\n                continue;\n            }\n        }\n        if (spins > 0)\n            --spins;\n        // 如果自旋达到了最大的次数，那么检测\n        else if (s.waiter == null)\n            s.waiter = w;\n        // 如果自旋到了最大的次数，那么线程挂起，等待唤醒\n        else if (!timed)\n            LockSupport.park(this);\n        // spinForTimeoutThreshold 这个之前讲 AQS 的时候其实也说过，剩余时间小于这个阈值的时候，就\n        // 不要进行挂起了，自旋的性能会比较好\n        else if (nanos > spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br")])]),a("p",[n._v("Doug Lea 的巧妙之处在于，将各个代码凑在了一起，使得代码非常简洁，当然也同时增加了我们的阅读负担，看代码的时候，还是得仔细想想各种可能的情况。")]),n._v(" "),a("p",[n._v("下面，再说说前面说的公平模式和非公平模式的区别。")]),n._v(" "),a("p",[n._v("相信大家心里面已经有了公平模式的工作流程的概念了，我就简单说说 TransferStack 的算法，就不分析源码了。")]),n._v(" "),a("ol",[a("li",[n._v("当调用这个方法时，如果队列是空的，或者队列中的节点和当前的线程操作类型一致（如当前操作是 put 操作，而栈中的元素也都是写线程）。这种情况下，将当前线程加入到等待栈中，等待配对。然后返回相应的元素，或者如果被取消了的话，返回 null。")]),n._v(" "),a("li",[n._v("如果栈中有等待节点，而且与当前操作可以匹配（如栈里面都是读操作线程，当前线程是写操作线程，反之亦然）。将当前节点压入栈顶，和栈中的节点进行匹配，然后将这两个节点出栈。配对和出栈的动作其实也不是必须的，因为下面的一条会执行同样的事情。")]),n._v(" "),a("li",[n._v("如果栈顶是进行匹配而入栈的节点，帮助其进行匹配并出栈，然后再继续操作。")])]),n._v(" "),a("p",[n._v("应该说，TransferStack 的源码要比 TransferQueue 的复杂一些，如果读者感兴趣，请自行进行源码阅读。")]),n._v(" "),a("h2",{attrs:{id:"blockingqueue-实现之-priorityblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue-实现之-priorityblockingqueue"}},[n._v("#")]),n._v(" BlockingQueue 实现之 PriorityBlockingQueue")]),n._v(" "),a("p",[n._v("带排序的 BlockingQueue 实现，其并发控制采用的是 ReentrantLock，队列为无界队列（ArrayBlockingQueue 是有界队列，LinkedBlockingQueue 也可以通过在构造函数中传入 capacity 指定队列最大的容量，但是 PriorityBlockingQueue 只能指定初始的队列大小，后面插入元素的时候，如果空间不够的话会自动扩容）。")]),n._v(" "),a("p",[n._v("简单地说，它就是 PriorityQueue 的线程安全版本。不可以插入 null 值，同时，插入队列的对象必须是可比较大小的（comparable），否则报 ClassCastException 异常。它的插入操作 put 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。")]),n._v(" "),a("p",[n._v("它的源码相对比较简单，本节将介绍其核心源码部分。")]),n._v(" "),a("p",[n._v("我们来看看它有哪些属性：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 构造方法中，如果不指定大小的话，默认大小为 11\nprivate static final int DEFAULT_INITIAL_CAPACITY = 11;\n// 数组的最大容量\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n// 这个就是存放数据的数组\nprivate transient Object[] queue;\n\n// 队列当前大小\nprivate transient int size;\n\n// 大小比较器，如果按照自然序排序，那么此属性可设置为 null\nprivate transient Comparator<? super E> comparator;\n\n// 并发控制所用的锁，所有的 public 且涉及到线程安全的方法，都必须先获取到这个锁\nprivate final ReentrantLock lock;\n\n// 这个很好理解，其实例由上面的 lock 属性创建\nprivate final Condition notEmpty;\n\n// 这个也是用于锁，用于数组扩容的时候，需要先获取到这个锁，才能进行扩容操作\n// 其使用 CAS 操作\nprivate transient volatile int allocationSpinLock;\n\n// 用于序列化和反序列化的时候用，对于 PriorityBlockingQueue 我们应该比较少使用到序列化\nprivate PriorityQueue q;\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("p",[n._v("此类实现了 Collection 和 Iterator 接口中的所有接口方法，对其对象进行迭代并遍历时，不能保证有序性。如果你想要实现有序遍历，建议采用 Arrays.sort(queue.toArray()) 进行处理。PriorityBlockingQueue 提供了 drainTo 方法用于将部分或全部元素有序地填充（准确说是转移，会删除原队列中的元素）到另一个集合中。还有一个需要说明的是，如果两个对象的优先级相同（compare 方法返回 0），此队列并不保证它们之间的顺序。")]),n._v(" "),a("p",[n._v("PriorityBlockingQueue 使用了基于数组的"),a("strong",[n._v("二叉堆")]),n._v("来存放元素，所有的 public 方法采用同一个 lock 进行并发控制。")]),n._v(" "),a("p",[n._v("二叉堆：一颗完全二叉树，它非常适合用数组进行存储，对于数组中的元素 "),a("code",[n._v("a[i]")]),n._v("，其左子节点为 "),a("code",[n._v("a[2*i+1]")]),n._v("，其右子节点为 "),a("code",[n._v("a[2*i + 2]")]),n._v("，其父节点为 "),a("code",[n._v("a[(i-1)/2]")]),n._v("，其堆序性质为，每个节点的值都小于其左右子节点的值。二叉堆中最小的值就是根节点，但是删除根节点是比较麻烦的，因为需要调整树。")]),n._v(" "),a("p",[n._v("简单用个图解释一下二叉堆，我就不说太多专业的严谨的术语了，这种数据结构的优点是一目了然的，最小的元素一定是根元素，它是一棵满的树，除了最后一层，最后一层的节点从左到右紧密排列。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/priority-blocking-queue-1.png",alt:"priority-blocking-queue-1"}})]),n._v(" "),a("p",[n._v("下面开始 PriorityBlockingQueue 的源码分析，首先我们来看看构造方法:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 默认构造方法，采用默认值(11)来进行初始化\npublic PriorityBlockingQueue() {\n    this(DEFAULT_INITIAL_CAPACITY, null);\n}\n// 指定数组的初始大小\npublic PriorityBlockingQueue(int initialCapacity) {\n    this(initialCapacity, null);\n}\n// 指定比较器\npublic PriorityBlockingQueue(int initialCapacity,\n                             Comparator<? super E> comparator) {\n    if (initialCapacity < 1)\n        throw new IllegalArgumentException();\n    this.lock = new ReentrantLock();\n    this.notEmpty = lock.newCondition();\n    this.comparator = comparator;\n    this.queue = new Object[initialCapacity];\n}\n// 在构造方法中就先填充指定的集合中的元素\npublic PriorityBlockingQueue(Collection<? extends E> c) {\n    this.lock = new ReentrantLock();\n    this.notEmpty = lock.newCondition();\n    // \n    boolean heapify = true; // true if not known to be in heap order\n    boolean screen = true;  // true if must screen for nulls\n    if (c instanceof SortedSet<?>) {\n        SortedSet<? extends E> ss = (SortedSet<? extends E>) c;\n        this.comparator = (Comparator<? super E>) ss.comparator();\n        heapify = false;\n    }\n    else if (c instanceof PriorityBlockingQueue<?>) {\n        PriorityBlockingQueue<? extends E> pq =\n            (PriorityBlockingQueue<? extends E>) c;\n        this.comparator = (Comparator<? super E>) pq.comparator();\n        screen = false;\n        if (pq.getClass() == PriorityBlockingQueue.class) // exact match\n            heapify = false;\n    }\n    Object[] a = c.toArray();\n    int n = a.length;\n    // If c.toArray incorrectly doesn't return Object[], copy it.\n    if (a.getClass() != Object[].class)\n        a = Arrays.copyOf(a, n, Object[].class);\n    if (screen && (n == 1 || this.comparator != null)) {\n        for (int i = 0; i < n; ++i)\n            if (a[i] == null)\n                throw new NullPointerException();\n    }\n    this.queue = a;\n    this.size = n;\n    if (heapify)\n        heapify();\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br")])]),a("p",[n._v("接下来，我们来看看其内部的自动扩容实现：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private void tryGrow(Object[] array, int oldCap) {\n    // 这边做了释放锁的操作\n    lock.unlock(); // must release and then re-acquire main lock\n    Object[] newArray = null;\n    // 用 CAS 操作将 allocationSpinLock 由 0 变为 1，也算是获取锁\n    if (allocationSpinLock == 0 &&\n        UNSAFE.compareAndSwapInt(this, allocationSpinLockOffset,\n                                 0, 1)) {\n        try {\n            // 如果节点个数小于 64，那么增加的 oldCap + 2 的容量\n            // 如果节点数大于等于 64，那么增加 oldCap 的一半\n            // 所以节点数较小时，增长得快一些\n            int newCap = oldCap + ((oldCap < 64) ?\n                                   (oldCap + 2) :\n                                   (oldCap >> 1));\n            // 这里有可能溢出\n            if (newCap - MAX_ARRAY_SIZE > 0) {    // possible overflow\n                int minCap = oldCap + 1;\n                if (minCap < 0 || minCap > MAX_ARRAY_SIZE)\n                    throw new OutOfMemoryError();\n                newCap = MAX_ARRAY_SIZE;\n            }\n            // 如果 queue != array，那么说明有其他线程给 queue 分配了其他的空间\n            if (newCap > oldCap && queue == array)\n                // 分配一个新的大数组\n                newArray = new Object[newCap];\n        } finally {\n            // 重置，也就是释放锁\n            allocationSpinLock = 0;\n        }\n    }\n    // 如果有其他的线程也在做扩容的操作\n    if (newArray == null) // back off if another thread is allocating\n        Thread.yield();\n    // 重新获取锁\n    lock.lock();\n    // 将原来数组中的元素复制到新分配的大数组中\n    if (newArray != null && queue == array) {\n        queue = newArray;\n        System.arraycopy(array, 0, newArray, 0, oldCap);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br")])]),a("p",[n._v("扩容方法对并发的控制也非常的巧妙，释放了原来的独占锁 lock，这样的话，扩容操作和读操作可以同时进行，提高吞吐量。")]),n._v(" "),a("p",[n._v("下面，我们来分析下写操作 put 方法和读操作 take 方法。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public void put(E e) {\n    // 直接调用 offer 方法，因为前面我们也说了，在这里，put 方法不会阻塞\n    offer(e); \n}\npublic boolean offer(E e) {\n    if (e == null)\n        throw new NullPointerException();\n    final ReentrantLock lock = this.lock;\n    // 首先获取到独占锁\n    lock.lock();\n    int n, cap;\n    Object[] array;\n    // 如果当前队列中的元素个数 >= 数组的大小，那么需要扩容了\n    while ((n = size) >= (cap = (array = queue).length))\n        tryGrow(array, cap);\n    try {\n        Comparator<? super E> cmp = comparator;\n        // 节点添加到二叉堆中\n        if (cmp == null)\n            siftUpComparable(n, e, array);\n        else\n            siftUpUsingComparator(n, e, array, cmp);\n        // 更新 size\n        size = n + 1;\n        // 唤醒等待的读线程\n        notEmpty.signal();\n    } finally {\n        lock.unlock();\n    }\n    return true;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br")])]),a("p",[n._v("对于二叉堆而言，插入一个节点是简单的，插入的节点如果比父节点小，交换它们，然后继续和父节点比较。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 这个方法就是将数据 x 插入到数组 array 的位置 k 处，然后再调整树\nprivate static <T> void siftUpComparable(int k, T x, Object[] array) {\n    Comparable<? super T> key = (Comparable<? super T>) x;\n    while (k > 0) {\n        // 二叉堆中 a[k] 节点的父节点位置\n        int parent = (k - 1) >>> 1;\n        Object e = array[parent];\n        if (key.compareTo((T) e) >= 0)\n            break;\n        array[k] = e;\n        k = parent;\n    }\n    array[k] = key;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("我们用图来示意一下，我们接下来要将 "),a("strong",[n._v("11")]),n._v(" 插入到队列中，看看 siftUp 是怎么操作的。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/priority-blocking-queue-2.png",alt:"priority-blocking-queue-2"}})]),n._v(" "),a("p",[n._v("我们再看看 take 方法：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public E take() throws InterruptedException {\n    final ReentrantLock lock = this.lock;\n    // 独占锁\n    lock.lockInterruptibly();\n    E result;\n    try {\n        // dequeue 出队\n        while ( (result = dequeue()) == null)\n            notEmpty.await();\n    } finally {\n        lock.unlock();\n    }\n    return result;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private E dequeue() {\n    int n = size - 1;\n    if (n < 0)\n        return null;\n    else {\n        Object[] array = queue;\n        // 队头，用于返回\n        E result = (E) array[0];\n        // 队尾元素先取出\n        E x = (E) array[n];\n        // 队尾置空\n        array[n] = null;\n        Comparator<? super E> cmp = comparator;\n        if (cmp == null)\n            siftDownComparable(0, x, array, n);\n        else\n            siftDownUsingComparator(0, x, array, n, cmp);\n        size = n;\n        return result;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("p",[n._v("dequeue 方法返回队头，并调整二叉堆的树，调用这个方法必须先获取独占锁。")]),n._v(" "),a("p",[n._v("废话不多说，出队是非常简单的，因为队头就是最小的元素，对应的是数组的第一个元素。难点是队头出队后，需要调整树。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private static <T> void siftDownComparable(int k, T x, Object[] array,\n                                           int n) {\n    if (n > 0) {\n        Comparable<? super T> key = (Comparable<? super T>)x;\n        // 这里得到的 half 肯定是非叶节点\n        // a[n] 是最后一个元素，其父节点是 a[(n-1)/2]。所以 n >>> 1 代表的节点肯定不是叶子节点\n        // 下面，我们结合图来一行行分析，这样比较直观简单\n        // 此时 k 为 0, x 为 17，n 为 9\n        int half = n >>> 1; // 得到 half = 4\n        while (k < half) {\n            // 先取左子节点\n            int child = (k << 1) + 1; // 得到 child = 1\n            Object c = array[child];  // c = 12\n            int right = child + 1;  // right = 2\n            // 如果右子节点存在，而且比左子节点小\n            // 此时 array[right] = 20，所以条件不满足\n            if (right < n &&\n                ((Comparable<? super T>) c).compareTo((T) array[right]) > 0)\n                c = array[child = right];\n            // key = 17, c = 12，所以条件不满足\n            if (key.compareTo((T) c) <= 0)\n                break;\n            // 把 12 填充到根节点\n            array[k] = c;\n            // k 赋值后为 1\n            k = child;\n            // 一轮过后，我们发现，12 左边的子树和刚刚的差不多，都是缺少根节点，接下来处理就简单了\n        }\n        array[k] = key;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/priority-blocking-queue-3.png",alt:"priority-blocking-queue-3"}})]),n._v(" "),a("p",[n._v("记住二叉堆是一棵完全二叉树，那么根节点 10 拿掉后，最后面的元素 17 必须找到合适的地方放置。首先，17 和 10 不能直接交换，那么先将根节点 10 的左右子节点中较小的节点往上滑，即 12 往上滑，然后原来 12 留下了一个空节点，然后再把这个空节点的较小的子节点往上滑，即 13 往上滑，最后，留出了位子，17 补上即可。")]),n._v(" "),a("p",[n._v("我稍微调整下这个树，以便读者能更明白：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/java-concurrent-queue/priority-blocking-queue-4.png",alt:"priority-blocking-queue-4"}})]),n._v(" "),a("p",[n._v("好了， PriorityBlockingQueue 我们也说完了。")]),n._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),a("p",[n._v("我知道本文过长，相信一字不漏看完的读者肯定是少数。")]),n._v(" "),a("p",[n._v("ArrayBlockingQueue 底层是数组，有界队列，如果我们要使用生产者-消费者模式，这是非常好的选择。")]),n._v(" "),a("p",[n._v("LinkedBlockingQueue 底层是链表，可以当做无界和有界队列来使用，所以大家不要以为它就是无界队列。")]),n._v(" "),a("p",[n._v("SynchronousQueue 本身不带有空间来存储任何元素，使用上可以选择公平模式和非公平模式。")]),n._v(" "),a("p",[n._v("PriorityBlockingQueue 是无界队列，基于数组，数据结构为二叉堆，数组第一个也是树的根节点总是最小值。")]),n._v(" "),a("p",[n._v("（全文完）")])])}),[],!1,null,null,null);s.default=t.exports}}]);