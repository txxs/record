(window.webpackJsonp=window.webpackJsonp||[]).push([[1016],{1412:function(r,t,e){"use strict";e.r(t);var a=e(13),n=Object(a.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("p",{attrs:{align:"center"}},[e("a",{attrs:{href:"https://programmercarl.com/other/kstar.html",target:"_blank"}},[e("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210924105952.png",width:"1000"}})])]),e("p",{attrs:{align:"center"}},[e("strong",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/tqCxrMEU-ajQumL1i8im9A"}},[r._v("参与本项目")]),r._v("，贡献其他语言版本的代码，拥抱开源，让更多学习算法的小伙伴们收益！")])]),r._v(" "),e("h1",{attrs:{id:"字符串-总结篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串-总结篇"}},[r._v("#")]),r._v(" 字符串：总结篇")]),r._v(" "),e("p",[r._v("其实我们已经学习了十天的字符串了，从字符串的定义到库函数的使用原则，从各种反转到KMP算法，相信大家应该对字符串有比较深刻的认识了。")]),r._v(" "),e("p",[r._v("那么这次我们来做一个总结。")]),r._v(" "),e("h1",{attrs:{id:"什么是字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是字符串"}},[r._v("#")]),r._v(" 什么是字符串")]),r._v(" "),e("p",[r._v("字符串是若干字符组成的有限序列，也可以理解为是一个字符数组，但是很多语言对字符串做了特殊的规定，接下来我来说一说C/C++中的字符串。")]),r._v(" "),e("p",[r._v("在C语言中，把一个字符串存入一个数组时，也把结束符 '\\0'存入数组，并以此作为该字符串是否结束的标志。")]),r._v(" "),e("p",[r._v("例如这段代码：")]),r._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("char a[5] = \"asd\";\nfor (int i = 0; a[i] != '\\0'; i++) {\n}\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br")])]),e("p",[r._v("在C++中，提供一个string类，string类会提供 size接口，可以用来判断string类字符串是否结束，就不用'\\0'来判断是否结束。")]),r._v(" "),e("p",[r._v("例如这段代码:")]),r._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('string a = "asd";\nfor (int i = 0; i < a.size(); i++) {\n}\n')])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br")])]),e("p",[r._v("那么vector< char > 和 string 又有什么区别呢？")]),r._v(" "),e("p",[r._v("其实在基本操作上没有区别，但是 string提供更多的字符串处理的相关接口，例如string 重载了+，而vector却没有。")]),r._v(" "),e("p",[r._v("所以想处理字符串，我们还是会定义一个string类型。")]),r._v(" "),e("h1",{attrs:{id:"要不要使用库函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#要不要使用库函数"}},[r._v("#")]),r._v(" 要不要使用库函数")]),r._v(" "),e("p",[r._v("在文章"),e("a",{attrs:{href:"https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("344.反转字符串"),e("OutboundLink")],1),r._v("中强调了"),e("strong",[r._v("打基础的时候，不要太迷恋于库函数。")])]),r._v(" "),e("p",[r._v("甚至一些同学习惯于调用substr，split，reverse之类的库函数，却不知道其实现原理，也不知道其时间复杂度，这样实现出来的代码，如果在面试现场，面试官问：“分析其时间复杂度”的话，一定会一脸懵逼！")]),r._v(" "),e("p",[r._v("所以建议"),e("strong",[r._v("如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。")])]),r._v(" "),e("p",[e("strong",[r._v("如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。")])]),r._v(" "),e("h1",{attrs:{id:"双指针法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双指针法"}},[r._v("#")]),r._v(" 双指针法")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("344.反转字符串"),e("OutboundLink")],1),r._v(" ，我们使用双指针法实现了反转字符串的操作，"),e("strong",[r._v("双指针法在数组，链表和字符串中很常用。")])]),r._v(" "),e("p",[r._v("接着在"),e("a",{attrs:{href:"https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("字符串：替换空格"),e("OutboundLink")],1),r._v("，同样还是使用双指针法在时间复杂度$O(n)$的情况下完成替换空格。")]),r._v(" "),e("p",[e("strong",[r._v("其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。")])]),r._v(" "),e("p",[r._v("那么针对数组删除操作的问题，其实在"),e("a",{attrs:{href:"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("27. 移除元素"),e("OutboundLink")],1),r._v("中就已经提到了使用双指针法进行移除操作。")]),r._v(" "),e("p",[r._v("同样的道理在"),e("a",{attrs:{href:"https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("151.翻转字符串里的单词"),e("OutboundLink")],1),r._v("中我们使用$O(n)$的时间复杂度，完成了删除冗余空格。")]),r._v(" "),e("p",[r._v("一些同学会使用for循环里调用库函数erase来移除元素，这其实是$O(n^2)$的操作，因为erase就是$O(n)$的操作，所以这也是典型的不知道库函数的时间复杂度，上来就用的案例了。")]),r._v(" "),e("h1",{attrs:{id:"反转系列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转系列"}},[r._v("#")]),r._v(" 反转系列")]),r._v(" "),e("p",[r._v("在反转上还可以在加一些玩法，其实考察的是对代码的掌控能力。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("541. 反转字符串II"),e("OutboundLink")],1),r._v("中，一些同学可能为了处理逻辑：每隔2k个字符的前k的字符，写了一堆逻辑代码或者再搞一个计数器，来统计2k，再统计前k个字符。")]),r._v(" "),e("p",[r._v("其实"),e("strong",[r._v("当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章")]),r._v("。")]),r._v(" "),e("p",[r._v("只要让 i += (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。")]),r._v(" "),e("p",[r._v("因为要找的也就是每2 * k 区间的起点，这样写程序会高效很多。")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("151.翻转字符串里的单词"),e("OutboundLink")],1),r._v("中要求翻转字符串里的单词，这道题目可以说是综合考察了字符串的多种操作。是考察字符串的好题。")]),r._v(" "),e("p",[r._v("这道题目通过 "),e("strong",[r._v("先整体反转再局部反转")]),r._v("，实现了反转字符串里的单词。")]),r._v(" "),e("p",[r._v("后来发现反转字符串还有一个牛逼的用处，就是达到左旋的效果。")]),r._v(" "),e("p",[r._v("在"),e("a",{attrs:{href:"https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("字符串：反转个字符串还有这个用处？"),e("OutboundLink")],1),r._v("中，我们通过"),e("strong",[r._v("先局部反转再整体反转")]),r._v("达到了左旋的效果。")]),r._v(" "),e("h1",{attrs:{id:"kmp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kmp"}},[r._v("#")]),r._v(" KMP")]),r._v(" "),e("p",[r._v("KMP的主要思想是"),e("strong",[r._v("当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。")])]),r._v(" "),e("p",[r._v("KMP的精髓所在就是前缀表，在"),e("a",{attrs:{href:"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("KMP精讲"),e("OutboundLink")],1),r._v("中提到了，什么是KMP，什么是前缀表，以及为什么要用前缀表。")]),r._v(" "),e("p",[r._v("前缀表：起始位置到下标i之前（包括i）的子串中，有多大长度的相同前缀后缀。")]),r._v(" "),e("p",[r._v("那么使用KMP可以解决两类经典问题：")]),r._v(" "),e("ol",[e("li",[r._v("匹配问题："),e("a",{attrs:{href:"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("28. 实现 strStr()"),e("OutboundLink")],1)]),r._v(" "),e("li",[r._v("重复子串问题："),e("a",{attrs:{href:"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("459.重复的子字符串"),e("OutboundLink")],1)])]),r._v(" "),e("p",[r._v("再一次强调了什么是前缀，什么是后缀，什么又是最长相等前后缀。")]),r._v(" "),e("p",[r._v("前缀：指不包含最后一个字符的所有以第一个字符开头的连续子串。")]),r._v(" "),e("p",[r._v("后缀：指不包含第一个字符的所有以最后一个字符结尾的连续子串。")]),r._v(" "),e("p",[r._v("然后"),e("strong",[r._v("针对前缀表到底要不要减一，这其实是不同KMP实现的方式")]),r._v("，我们在"),e("a",{attrs:{href:"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("KMP精讲"),e("OutboundLink")],1),r._v("中针对之前两个问题，分别给出了两个不同版本的的KMP实现。")]),r._v(" "),e("p",[r._v("其中主要"),e("strong",[r._v("理解j=next[x]这一步最为关键！")])]),r._v(" "),e("h1",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),e("p",[r._v("字符串类类型的题目，往往想法比较简单，但是实现起来并不容易，复杂的字符串题目非常考验对代码的掌控能力。")]),r._v(" "),e("p",[r._v("双指针法是字符串处理的常客。")]),r._v(" "),e("p",[r._v("KMP算法是字符串查找最重要的算法，但彻底理解KMP并不容易，我们已经写了五篇KMP的文章，不断总结和完善，最终才把KMP讲清楚。")]),r._v(" "),e("p",[r._v("好了字符串相关的算法知识就介绍到了这里了，明天开始新的征程，大家加油！")]),r._v(" "),e("hr"),r._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码一.jpg",width:"500"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);