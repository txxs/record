(window.webpackJsonp=window.webpackJsonp||[]).push([[636],{1029:function(t,s,a){"use strict";a.r(s);var _=a(13),e=Object(_.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("在丑陋的 Java I/O 编程方式诞生多年以后，Java终于简化了文件读写的基本操作。")])]),t._v(" "),a("p",[t._v("打开并读取文件对于大多数编程语言来是非常常用的，由于 I/O 糟糕的设计以至于很少有人能够在不依赖其他参考代码的情况下完成打开文件的操作。")]),t._v(" "),a("p",[t._v("在 Java7 中对此引入了巨大的改进。这些新元素被放在 "),a("strong",[t._v("java.nio.file")]),t._v(" 包下面，过去人们通常把 "),a("strong",[t._v("nio")]),t._v(" 中的 "),a("strong",[t._v("n")]),t._v(" 理解为 "),a("strong",[t._v("new")]),t._v(" 即新的 "),a("strong",[t._v("io")]),t._v("，现在更应该当成是 "),a("strong",[t._v("non-blocking")]),t._v(" 非阻塞 "),a("strong",[t._v("io")]),t._v("("),a("strong",[t._v("io")]),t._v("就是"),a("em",[t._v("input/output输入/输出")]),t._v(")。"),a("strong",[t._v("java.nio.file")]),t._v(" 库终于将 Java 文件操作带到与其他编程语言相同的水平。最重要的是 Java8 新增的 streams 与文件结合使得文件操作编程变得更加优雅。\n看一下文件操作的两个基本组件：")]),t._v(" "),a("ol",[a("li",[t._v("文件或者目录的路径；")]),t._v(" "),a("li",[t._v("文件本身。")])]),t._v(" "),a("h1",{attrs:{id:"文件和目录路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件和目录路径"}},[t._v("#")]),t._v(" 文件和目录路径")]),t._v(" "),a("p",[t._v("一个 "),a("strong",[t._v("Path")]),t._v(" 对象表示一个文件或者目录的路径，是一个跨操作系统（OS）和文件系统的抽象，目的是在构造路径时不必关注底层操作系统，代码可以在不进行修改的情况下运行在不同的操作系统上。"),a("strong",[t._v("java.nio.file.Paths")]),t._v(" 类包含一个重载方法 "),a("strong",[t._v("static get()")]),t._v("，该方法接受一系列 "),a("strong",[t._v("String")]),t._v(" 字符串或一个"),a("em",[t._v("统一资源标识符")]),t._v("(URI)作为参数，并且进行转换返回一个 "),a("strong",[t._v("Path")]),t._v(" 对象。")]),t._v(" "),a("p",[t._v("当 "),a("strong",[t._v("toString()")]),t._v(" 方法生成完整形式的路径， "),a("strong",[t._v("getFileName()")]),t._v(" 方法总是返回当前文件名。\n通过使用 "),a("strong",[t._v("Files")]),t._v(' 工具类，可以测试一个文件是否存在，测试是否是一个"普通"文件还是一个目录等等。"Nofile.txt"这个示例展示我们描述的文件可能并不在指定的位置；这样可以允许你创建一个新的路径。"PathInfo.java"存在于当前目录中，最初它只是没有路径的文件名，但它仍然被检测为"存在"。一旦我们将其转换为绝对路径，我们将会得到一个从"C:"盘(因为我们是在Windows机器下进行测试)开始的完整路径，现在它也拥有一个父路径。\n“真实”路径的定义在文档中有点模糊，因为它取决于具体的文件系统。例如，如果文件名不区分大小写，即使路径由于大小写的缘故而不是完全相同，也可能得到肯定的匹配结果。在这样的平台上，'),a("strong",[t._v("toRealPath()")]),t._v(" 将返回实际情况下的 "),a("strong",[t._v("Path")]),t._v("，并且还会删除任何冗余元素。")]),t._v(" "),a("p",[t._v("这里你会看到 "),a("strong",[t._v("URI")]),t._v(" 看起来只能用于描述文件，实际上 "),a("strong",[t._v("URI")]),t._v(" 可以用于描述更多的东西；通过 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),a("OutboundLink")],1),t._v(" 可以了解更多细节。现在我们成功地将 "),a("strong",[t._v("URI")]),t._v(" 转为一个 "),a("strong",[t._v("Path")]),t._v(" 对象。")]),t._v(" "),a("p",[a("strong",[t._v("Path")]),t._v(" 中看到一些有点欺骗的东西，这就是调用 "),a("strong",[t._v("toFile()")]),t._v(" 方法会生成一个 "),a("strong",[t._v("File")]),t._v(" 对象。听起来似乎可以得到一个类似文件的东西(毕竟被称为 "),a("strong",[t._v("File")]),t._v(' )，但是这个方法的存在仅仅是为了向后兼容。虽然看上去应该被称为"路径"，实际上却应该表示目录或者文件本身。这是个非常草率并且令人困惑的命名，但是由于 '),a("strong",[t._v("java.nio.file")]),t._v(" 的存在我们可以安全地忽略它的存在。")]),t._v(" "),a("h2",{attrs:{id:"选取路径部分片段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选取路径部分片段"}},[t._v("#")]),t._v(" 选取路径部分片段")]),t._v(" "),a("p",[a("strong",[t._v("Path")]),t._v(" 对象可以非常容易地生成路径的某一部分：")]),t._v(" "),a("p",[t._v("可以通过 "),a("strong",[t._v("getName()")]),t._v(" 来索引 "),a("strong",[t._v("Path")]),t._v(" 的各个部分，直到达到上限 "),a("strong",[t._v("getNameCount()")]),t._v("。"),a("strong",[t._v("Path")]),t._v(" 也实现了 "),a("strong",[t._v("Iterable")]),t._v(" 接口，因此我们也可以通过增强的 for-each 进行遍历。请注意，即使路径以 "),a("strong",[t._v(".java")]),t._v(" 结尾，使用 "),a("strong",[t._v("endsWith()")]),t._v(" 方法也会返回 "),a("strong",[t._v("false")]),t._v("。这是因为使用 "),a("strong",[t._v("endsWith()")]),t._v(" 比较的是整个路径部分，而不会包含文件路径的后缀。通过使用 "),a("strong",[t._v("startsWith()")]),t._v(" 和 "),a("strong",[t._v("endsWith()")]),t._v(" 也可以完成路径的遍历。但是我们可以看到，遍历 "),a("strong",[t._v("Path")]),t._v(" 对象并不包含根路径，只有使用 "),a("strong",[t._v("startsWith()")]),t._v(" 检测根路径时才会返回 "),a("strong",[t._v("true")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"路径分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径分析"}},[t._v("#")]),t._v(" 路径分析")]),t._v(" "),a("p",[a("strong",[t._v("Files")]),t._v(" 工具类包含一系列完整的方法用于获得 "),a("strong",[t._v("Path")]),t._v(" 相关的信息。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020061404121948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614041449822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n在调用最后一个测试方法 "),a("strong",[t._v("getPosixFilePermissions()")]),t._v(" 之前我们需要确认一下当前文件系统是否支持 "),a("strong",[t._v("Posix")]),t._v(" 接口，否则会抛出运行时异常。")]),t._v(" "),a("h2",{attrs:{id:"paths的增减修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paths的增减修改"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Paths")]),t._v("的增减修改")]),t._v(" "),a("p",[t._v("我们必须能通过对 "),a("strong",[t._v("Path")]),t._v(" 对象增加或者删除一部分来构造一个新的 "),a("strong",[t._v("Path")]),t._v(" 对象。我们使用 "),a("strong",[t._v("relativize()")]),t._v(" 移除 "),a("strong",[t._v("Path")]),t._v(" 的根路径，使用 "),a("strong",[t._v("resolve()")]),t._v(" 添加 "),a("strong",[t._v("Path")]),t._v(" 的尾路径(不一定是“可发现”的名称)。")]),t._v(" "),a("p",[t._v("对于下面代码中的示例，我使用 "),a("strong",[t._v("relativize()")]),t._v(" 方法从所有的输出中移除根路径，部分原因是为了示范，部分原因是为了简化输出结果，这说明你可以使用该方法将绝对路径转为相对路径。\n这个版本的代码中包含 "),a("strong",[t._v("id")]),t._v("，以便于跟踪输出结果：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/202006140422082.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614042152834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614042236314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h1",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("p",[a("strong",[t._v("Files")]),t._v(" 工具类包含大部分我们需要的目录操作和文件操作方法。出于某种原因，它们没有包含删除目录树相关的方法\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614042352714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n删除目录树的方法实现依赖于 "),a("strong",[t._v("Files.walkFileTree()")]),t._v('，"walking" 目录树意味着遍历每个子目录和文件。'),a("em",[t._v("Visitor")]),t._v(" 设计模式提供了一种标准机制来访问集合中的每个对象，然后你需要提供在每个对象上执行的操作。\n此操作的定义取决于实现的 "),a("strong",[t._v("FileVisitor")]),t._v(" 的四个抽象方法，包括：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("preVisitDirectory()")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200612112108661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("在访问目录中条目之前在目录上运行。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("visitFile()")]),t._v("：调用目录中的文件\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200612112146580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("visitFileFailed()")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200612112303196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("调用无法被访问的文件。如果该文件的属性不能被读取，该文件是无法打开一个目录，以及其他原因，该方法被调用。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("postVisitDirectory()")]),t._v("\n在访问目录中条目之后在目录上运行，包括所有的子目录。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200612112501522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n为了简化，"),a("strong",[t._v("java.nio.file.SimpleFileVisitor")]),t._v(" 提供了所有方法的默认实现\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200612112627631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])])]),t._v(" "),a("p",[t._v("在自己的匿名内部类中，只需要重写非标准行为的方法："),a("strong",[t._v("visitFile()")]),t._v(" 和 "),a("strong",[t._v("postVisitDirectory()")]),t._v(" 实现删除文件和删除目录。两者都应该返回标志位决定是否继续访问\n作为探索目录操作的一部分，现在我们可以有条件地删除已存在的目录。在以下例子中，"),a("strong",[t._v("makeVariant()")]),t._v(" 接受基本目录测试，并通过旋转部件列表生成不同的子目录路径。这些旋转与路径分隔符 "),a("strong",[t._v("sep")]),t._v(" 使用 "),a("strong",[t._v("String.join()")]),t._v(" 贴在一起，然后返回一个 "),a("strong",[t._v("Path")]),t._v(" 对象。")]),t._v(" "),a("p",[t._v("如果你对于已经存在的目录调用 "),a("strong",[t._v("createDirectory()")]),t._v(" 将会抛出异常。"),a("strong",[t._v("createFile()")]),t._v(" 使用参数 "),a("strong",[t._v("Path")]),t._v(" 创建一个空文件; "),a("strong",[t._v("resolve()")]),t._v(" 将文件名添加到 "),a("strong",[t._v("test Path")]),t._v(" 的末尾。")]),t._v(" "),a("p",[t._v("我们尝试使用 "),a("strong",[t._v("createDirectory()")]),t._v(" 来创建多级路径，但是这样会抛出异常，因为这个方法只能创建单级路径。我已经将 "),a("strong",[t._v("populateTestDir()")]),t._v(" 作为一个单独的方法，因为它将在后面的例子中被重用。对于每一个变量 "),a("strong",[t._v("variant")]),t._v("，我们都能使用 "),a("strong",[t._v("createDirectories()")]),t._v(" 创建完整的目录路径，然后使用此文件的副本以不同的目标名称填充该终端目录。然后我们使用 "),a("strong",[t._v("createTempFile()")]),t._v(" 生成一个临时文件。")]),t._v(" "),a("p",[t._v("在调用 "),a("strong",[t._v("populateTestDir()")]),t._v(" 之后，我们在 "),a("strong",[t._v("test")]),t._v(" 目录下面下面创建一个临时目录。请注意，"),a("strong",[t._v("createTempDirectory()")]),t._v(" 只有名称的前缀选项。与 "),a("strong",[t._v("createTempFile()")]),t._v(' 不同，我们再次使用它将临时文件放入新的临时目录中。你可以从输出中看到，如果未指定后缀，它将默认使用".tmp"作为后缀。')]),t._v(" "),a("p",[t._v("为了展示结果，我们首次使用看起来很有希望的 "),a("strong",[t._v("newDirectoryStream()")]),t._v("，但事实证明这个方法只是返回 "),a("strong",[t._v("test")]),t._v(" 目录内容的 Stream 流，并没有更多的内容。要获取目录树的全部内容的流，请使用 "),a("strong",[t._v("Files.walk()")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件系统"}},[t._v("#")]),t._v(" 文件系统")]),t._v(" "),a("p",[t._v("为了完整起见，我们需要一种方法查找文件系统相关的其他信息。在这里，我们使用静态的 "),a("strong",[t._v("FileSystems")]),t._v(' 工具类获取"默认"的文件系统，但也可以在 '),a("strong",[t._v("Path")]),t._v(" 对象上调用 "),a("strong",[t._v("getFileSystem()")]),t._v(" 以获取创建该 "),a("strong",[t._v("Path")]),t._v(" 的文件系统。\n可以获得给定 "),a("em",[t._v("URI")]),t._v(" 的文件系统，还可以构建新的文件系统(对于支持它的操作系统)。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614021747925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614020058345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h1",{attrs:{id:"路径监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径监听"}},[t._v("#")]),t._v(" 路径监听")]),t._v(" "),a("p",[t._v("通过 "),a("strong",[t._v("WatchService")]),t._v(" 可以设置一个进程对目录中的更改做出响应。")]),t._v(" "),a("p",[t._v("一旦我们从 "),a("strong",[t._v("FileSystem")]),t._v(" 中得到了 "),a("strong",[t._v("WatchService")]),t._v(" 对象，我们将其注册到 "),a("strong",[t._v("test")]),t._v(" 路径以及我们感兴趣的项目的变量参数列表中，可以选择\n"),a("strong",[t._v("ENTRY_CREATE")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020061403052653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("strong",[t._v("ENTRY_DELETE")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020061403054766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v(" "),a("strong",[t._v("ENTRY_MODIFY")]),t._v("(其中创建和删除不属于修改)。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614025256263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("接下来对 "),a("strong",[t._v("watcher.take()")]),t._v(" 的调用会在发生某些事情之前停止所有操作，所以我们希望 "),a("strong",[t._v("deltxtfiles()")]),t._v(" 能够并行运行以便生成我们感兴趣的事件。为了实现这个目的，通过调用 "),a("strong",[t._v("Executors.newSingleThreadScheduledExecutor()")]),t._v(" 产生一个 "),a("strong",[t._v("ScheduledExecutorService")]),t._v(" 对象，然后调用 "),a("strong",[t._v("schedule()")]),t._v(" 方法传递所需函数的方法引用，并且设置在运行之前应该等待的时间。")]),t._v(" "),a("p",[t._v("此时，"),a("strong",[t._v("watcher.take()")]),t._v(" 将等待并阻塞在这里。当目标事件发生时，会返回一个包含 "),a("strong",[t._v("WatchEvent")]),t._v(" 的 "),a("strong",[t._v("Watchkey")]),t._v(" 对象。")]),t._v(" "),a("p",[t._v('如果说"监视这个目录"，自然会包含整个目录和下面子目录，但实际上的：只会监视给定的目录，而不是下面的所有内容。如果需要监视整个树目录，必须在整个树的每个子目录上放置一个 '),a("strong",[t._v("Watchservice")]),t._v("。")]),t._v(" "),a("h1",{attrs:{id:"文件查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件查找"}},[t._v("#")]),t._v(" 文件查找")]),t._v(" "),a("p",[t._v("粗糙的方法，在 "),a("code",[t._v("path")]),t._v(" 上调用 "),a("code",[t._v("toString()")]),t._v("，然后使用 "),a("code",[t._v("string")]),t._v(" 操作查看结果。")]),t._v(" "),a("p",[a("code",[t._v("java.nio.file")]),t._v(" 有更好的解决方案：通过在 "),a("code",[t._v("FileSystem")]),t._v(" 对象上调用 "),a("code",[t._v("getPathMatcher()")]),t._v(" 获得一个 "),a("code",[t._v("PathMatcher")]),t._v("，然后传入感兴趣的模式。")]),t._v(" "),a("h2",{attrs:{id:"模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式"}},[t._v("#")]),t._v(" 模式")]),t._v(" "),a("h3",{attrs:{id:"glob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glob"}},[t._v("#")]),t._v(" "),a("code",[t._v("glob")])]),t._v(" "),a("p",[a("code",[t._v("glob")]),t._v(" 比较简单，实际上功能非常强大，因此可以使用 "),a("code",[t._v("glob")]),t._v(" 解决许多问题。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614034905302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("matcher")]),t._v(" 中，"),a("code",[t._v("glob")]),t._v(" 表达式开头的 "),a("code",[t._v("**/")]),t._v(" 表示“当前目录及所有子目录”，这在当你不仅仅要匹配当前目录下特定结尾的 "),a("code",[t._v("Path")]),t._v(" 时非常有用。\n单 "),a("code",[t._v("*")]),t._v(" 表示“任何东西”，然后是一个点，然后大括号表示一系列的可能性---我们正在寻找以 "),a("code",[t._v(".tmp")]),t._v(" 或 "),a("code",[t._v(".txt")]),t._v(" 结尾的东西")]),t._v(" "),a("h3",{attrs:{id:"regex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex"}},[t._v("#")]),t._v(" "),a("code",[t._v("regex")])]),t._v(" "),a("p",[t._v("如果问题更复杂，可以使用 "),a("code",[t._v("regex")])]),t._v(" "),a("h1",{attrs:{id:"文件读写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件读写"}},[t._v("#")]),t._v(" 文件读写")]),t._v(" "),a("p",[t._v("如果一个文件很“小”，即“它运行得足够快且占用内存小”，那 "),a("code",[t._v("java.nio.file.Files")]),t._v(" 类中的实用程序将帮助你轻松读写文本和二进制文件。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Files.readAllLines()")]),t._v(" 一次读取整个文件（因此，“小”文件很有必要），产生一个"),a("code",[t._v("List<String>")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614035132756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("只需将 "),a("code",[t._v("Path")]),t._v(" 传递给 "),a("code",[t._v("readAllLines()")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614035343174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("li",[a("p",[a("code",[t._v("readAllLines()")]),t._v(" 有一个重载版本，包含一个 "),a("code",[t._v("Charset")]),t._v(" 参数来存储文件的 Unicode 编码\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020061403544248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Files.write()")]),t._v(" 被重载以写入 "),a("code",[t._v("byte")]),t._v(" 数组或任何 "),a("code",[t._v("Iterable")]),t._v(" 对象（它也有 "),a("code",[t._v("Charset")]),t._v(" 选项）：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614035815598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}})])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassReader")]),t._v(" cr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com/javaedge/asm/TestAsm"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassWriter")]),t._v(" cw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("COMPUTE_MAXS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassVisitor")]),t._v(" cv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassVisitor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SKIP_DEBUG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toByteArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Paths")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/main/java/com/javaedge/asm/out.class"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"generate success!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("如果文件大小有问题怎么办？ 比如说：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("文件太大，如果你一次性读完整个文件，你可能会耗尽内存。")])]),t._v(" "),a("li",[a("p",[t._v("您只需要在文件的中途工作以获得所需的结果，因此读取整个文件会浪费时间。")])])]),t._v(" "),a("p",[a("code",[t._v("Files.lines()")]),t._v(" 方便地将文件转换为行的 "),a("code",[t._v("Stream")]),t._v("：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020061404061469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n流式处理，跳过 13 行，然后选择下一行并将其打印出来。")]),t._v(" "),a("p",[a("code",[t._v("Files.lines()")]),t._v(" 对于把文件处理行的传入流时非常有用，但是如果你想在 "),a("code",[t._v("Stream")]),t._v(" 中读取，处理或写入怎么办？这就需要稍微复杂的代码：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200614040718517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("\n因为我们在同一个块中执行所有操作，所以这两个文件都可以在相同的 try-with-resources 语句中打开。\n"),a("code",[t._v("PrintWriter")]),t._v(" 是一个旧式的 "),a("code",[t._v("java.io")]),t._v(" 类，允许你“打印”到一个文件，所以它是这个应用的理想选择")]),t._v(" "),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("虽然本章对文件和目录操作做了相当全面的介绍，但是仍然有没被介绍的类库中的功能——一定要研究 "),a("code",[t._v("java.nio.file")]),t._v(" 的 Javadocs，尤其是 "),a("code",[t._v("java.nio.file.Files")]),t._v(" 这个类。")]),t._v(" "),a("p",[t._v("Java 7 和 8 对于处理文件和目录的类库做了大量改进。如果您刚刚开始使用 Java，那么您很幸运。在过去，它令人非常不愉快，Java 设计者以前对于文件操作不够重视才没做简化。对于初学者来说这是一件很棒的事，对于教学者来说也一样。我不明白为什么花了这么长时间来解决这个明显的问题，但不管怎么说它被解决了，我很高兴。使用文件现在很简单，甚至很有趣，这是你以前永远想不到的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);