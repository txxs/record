(window.webpackJsonp=window.webpackJsonp||[]).push([[722],{1113:function(t,a,e){"use strict";e.r(a);var s=e(13),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e62f4154c7c?w=998&h=690&f=png&s=1582218",alt:"",title:"图片标题"}})]),t._v(" "),e("blockquote",[e("p",[t._v("最聪明的人是最不愿浪费时间的人。\n——但丁")])]),t._v(" "),e("h1",{attrs:{id:"_0-前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-前言"}},[t._v("#")]),t._v(" 0 前言")]),t._v(" "),e("p",[t._v("由数组支持的有界阻塞队列。此队列对元素按 FIFO（先进先出）进行排序。队首是已在队列中最长时间的元素。队尾是最短时间出现在队列中的元素。新元素插入到队列的尾部，并且队列检索操作在队列的开头获取元素。\n这是经典的“有界缓冲区”，其中固定大小的数组包含由生产者插入并由消费者提取的元素。一旦创建，容量将无法更改。试图将一个元素放入一个完整的队列将导致操作阻塞；从空队列中取出一个元素的尝试也会类似地阻塞。")]),t._v(" "),e("p",[t._v("此类支持可选的公平性策略，用于排序正在等待的生产者和使用者线程。默认情况下，不保证此排序。但是，将公平性设置为true构造的队列将按FIFO顺序授予线程访问权限。公平通常会降低吞吐量，但会减少可变性并避免饥饿。")]),t._v(" "),e("p",[t._v("此类及其迭代器实现了Collection和Iterator接口的所有可选方法。")]),t._v(" "),e("p",[t._v("此类是Java Collections Framework的成员。")]),t._v(" "),e("h1",{attrs:{id:"_1-继承体系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承体系"}},[t._v("#")]),t._v(" 1 继承体系")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e62f8c9ecc4?w=3182&h=436&f=png&s=169197",alt:"",title:"图片标题"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63099ec3f9?w=980&h=796&f=png&s=53926",alt:"",title:"图片标题"}})]),t._v(" "),e("ul",[e("li",[t._v("Java中的阻塞队列接口BlockingQueue继承自Queue接口。")])]),t._v(" "),e("h1",{attrs:{id:"_2-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-属性"}},[t._v("#")]),t._v(" 2 属性")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("存储队列元素的数组，是个循环数组\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63508bf515?w=1366&h=330&f=png&s=38372",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("下次take, poll, peek or remove 时的数据索引\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63513c3512?w=1028&h=332&f=png&s=30668",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("下次 put, offer, or add 时的数据索引\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e638c78e2d1?w=970&h=320&f=png&s=27625",alt:"",title:"图片标题"}})])])]),t._v(" "),e("p",[t._v("有了上面两个关键字段，在存数据和取数据时，无需计算，就能知道应该新增到什么位置，应该从什么位置取数据。")]),t._v(" "),e("ul",[e("li",[t._v("队列中的元素数\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e639c4bd07e?w=854&h=292&f=png&s=23214",alt:"",title:"图片标题"}})])]),t._v(" "),e("h2",{attrs:{id:"并发控制采用经典的双条件-notempty-notfull-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发控制采用经典的双条件-notempty-notfull-算法"}},[t._v("#")]),t._v(" 并发控制采用经典的双条件（notEmpty + notFull）算法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Lock 锁\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e638cc82954?w=1598&h=332&f=png&s=44939",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("等待take的条件,在 put 成功时使用\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63e73d8679?w=1972&h=330&f=png&s=59297",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("等待put的条件,在 take 成功时使用\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63ec36708b?w=1922&h=328&f=png&s=56379",alt:"",title:"图片标题"}})])])]),t._v(" "),e("p",[e("em",[t._v("ArrayBlockingQueue is a State-Dependent class")]),t._v("，该类只有一些先决条件才能执行操作.")]),t._v(" "),e("p",[t._v("如果前提条件（notFull）为 false ，写线程将只能等待.\n如果队列满，写需要等待.\n原子式释放锁，并等待信号(读线程发起的 "),e("em",[t._v("notFull.signal()")]),t._v(")\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e63e0d14864?w=2800&h=732&f=png&s=119381",alt:"",title:"图片标题"}})]),t._v(" "),e("p",[t._v("对于读，概念是相同的，但使用 notEmpty 条件:\n如果队列为空，则读线程需要等待.\n原子地释放锁，并等待信号(由写线程触发的 "),e("em",[t._v("notEmpty.signal()")]),t._v(")\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e641e4fec4e?w=2800&h=732&f=png&s=121706",alt:"",title:"图片标题"}})]),t._v(" "),e("p",[t._v("当一个线程被唤醒，那么你需要做2件主要的事情：")]),t._v(" "),e("ol",[e("li",[t._v("获取锁")]),t._v(" "),e("li",[t._v("重测条件")])]),t._v(" "),e("p",[t._v("这种设计，它支持只唤醒对刚刚发生的事情感兴趣的线程.\n例如，一个试图从空队列中取数据的线程，只对队列是否为空(有一些数据要取出)感兴趣，而并不关心队列是否满。确实经典的设计！")]),t._v(" "),e("h1",{attrs:{id:"_3-构造方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-构造方法"}},[t._v("#")]),t._v(" 3  构造方法")]),t._v(" "),e("h2",{attrs:{id:"_3-1-无参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-无参"}},[t._v("#")]),t._v(" 3.1 无参")]),t._v(" "),e("p",[t._v("注意这是没有无参构造方法的哦!必须设置容量!")]),t._v(" "),e("h2",{attrs:{id:"_3-2-有参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-有参"}},[t._v("#")]),t._v(" 3.2 有参")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建具有给定（固定）容量和默认访问策略(非公平)的ArrayBlockingQueue\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e64608b4245?w=2372&h=414&f=png&s=110699",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("创建具有给定（固定）容量和指定访问策略的ArrayBlockingQueue\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e6418d91a35?w=3052&h=1086&f=png&s=293400",alt:"",title:"图片标题"}})])]),t._v(" "),e("li",[e("p",[t._v("创建一个具有给定（固定）容量，指定访问策略并最初包含给定集合的元素的ArrayBlockingQueue，该元素以集合的迭代器的遍历顺序添加.\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e642038dee6?w=2720&h=2604&f=png&s=420673",alt:"",title:"图片标题"}})])])]),t._v(" "),e("h3",{attrs:{id:"fair-参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fair-参数"}},[t._v("#")]),t._v(" fair 参数")]),t._v(" "),e("p",[t._v("指定读写锁是否公平")]),t._v(" "),e("ul",[e("li",[t._v("公平锁，锁竞争按先来先到顺序")]),t._v(" "),e("li",[t._v("非公平锁，锁竞争随机")])]),t._v(" "),e("h1",{attrs:{id:"_3-新增数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-新增数据"}},[t._v("#")]),t._v(" 3 新增数据")]),t._v(" "),e("p",[t._v("ArrayBlockingQueue有不同的几个数据添加方法，add、offer、put方法,数据都会按照 putIndex 的位置新增.")]),t._v(" "),e("h2",{attrs:{id:"_3-1-add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-add"}},[t._v("#")]),t._v(" 3.1 add")]),t._v(" "),e("ul",[e("li",[t._v("如果可以在不超过队列容量的情况下立即将指定元素插入此队列的尾部，则在成功插入时返回true，如果此队列已满则抛出IllegalStateException.\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e64c4b23236?w=1618&h=434&f=png&s=79648",alt:"",title:"图片标题"}}),t._v("\n调用的是抽象父类 AbstractQueue的 add 方法\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e648c83edaf?w=3032&h=848&f=png&s=170809",alt:"",title:"图片标题"}})])]),t._v(" "),e("h3",{attrs:{id:"offer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#offer"}},[t._v("#")]),t._v(" offer")]),t._v(" "),e("ul",[e("li",[t._v("之后又是调用的自身实现的 offer 方法.\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e6530cde717?w=2720&h=2588&f=png&s=373860",alt:"",title:"图片标题"}})])]),t._v(" "),e("h3",{attrs:{id:"enqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enqueue"}},[t._v("#")]),t._v(" enqueue")]),t._v(" "),e("p",[t._v("在当前放置位置插入元素,更新并发出信号.\n仅在持有锁时可以调用")]),t._v(" "),e("ul",[e("li",[t._v("内部继续调用入队方法\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e64d535aea6?w=2060&h=1824&f=png&s=346941",alt:"",title:"图片标题"}})])]),t._v(" "),e("p",[t._v("类似的看 put 方法.")]),t._v(" "),e("h2",{attrs:{id:"_3-2-put"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-put"}},[t._v("#")]),t._v(" 3.2 put")]),t._v(" "),e("ul",[e("li",[t._v("将指定的元素插入此队列的末尾，如果队列已满，则等待空间变为可用.\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e651c50ded0?w=2436&h=1728&f=png&s=291757",alt:"",title:"图片标题"}}),t._v("\n实现类似 add,不再赘述.")])]),t._v(" "),e("h1",{attrs:{id:"_4-取数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-取数据"}},[t._v("#")]),t._v(" 4 取数据")]),t._v(" "),e("p",[t._v("从队首取数据,我们以 poll 为例看源码.")]),t._v(" "),e("h2",{attrs:{id:"_4-1-poll"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-poll"}},[t._v("#")]),t._v(" 4.1 poll")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e651d4af1ff?w=2348&h=1524&f=png&s=223031",alt:"",title:"图片标题"}})]),t._v(" "),e("h3",{attrs:{id:"dequeue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dequeue"}},[t._v("#")]),t._v(" dequeue")]),t._v(" "),e("ul",[e("li",[t._v("提取当前位置的元素，更新并发出信号.仅在持有锁时可调用.\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e6564306374?w=1964&h=2336&f=png&s=436581",alt:"",title:"图片标题"}})])]),t._v(" "),e("h1",{attrs:{id:"_5-删除数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-删除数据"}},[t._v("#")]),t._v(" 5 删除数据")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/23/171a6e6574553879?w=2364&h=4680&f=png&s=798516",alt:"",title:"图片标题"}})]),t._v(" "),e("p",[t._v("从源码可以看出删除有两种情景：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("删除位置等于takeIndex,直接将该位元素置 null ,并重新计算 takeIndex")])]),t._v(" "),e("li",[e("p",[t._v("找到要删除元素的下一个，计算删除元素和 putIndex 的关系,若下一个元素")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("是 putIndex，将 putIndex 的值修改成删除位")])]),t._v(" "),e("li",[e("p",[t._v("非 putIndex，将下一个元素往前移动一位")])])])])]),t._v(" "),e("h1",{attrs:{id:"_6-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[t._v("#")]),t._v(" 6 总结")]),t._v(" "),e("p",[t._v("ArrayBlockingQueue 是一种循环队列，通过维护队首、队尾的指针，来优化插入、删除，从而使时间复杂度为O(1).")])])}),[],!1,null,null,null);a.default=r.exports}}]);