(window.webpackJsonp=window.webpackJsonp||[]).push([[1410],{1806:function(t,s,n){"use strict";n.r(s);var e=n(13),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_1-面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-面试题"}},[t._v("#")]),t._v(" 1 面试题")]),t._v(" "),n("p",[t._v("一般实现分布式锁都有哪些方式？使用redis如何设计分布式锁？使用zk来设计分布式锁可以吗？这两种分布式锁的实现方式哪种效率比较高？")]),t._v(" "),n("h1",{attrs:{id:"_2-考点分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-考点分析"}},[t._v("#")]),t._v(" 2 考点分析")]),t._v(" "),n("p",[t._v("一般先问问你zk，然后过渡到zk关联的一些问题，比如分布式锁.")]),t._v(" "),n("p",[t._v("因为在分布式系统开发中，分布式锁的使用场景还是很常见的~")]),t._v(" "),n("h1",{attrs:{id:"_3-redis分布式锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis分布式锁"}},[t._v("#")]),t._v(" 3 Redis分布式锁")]),t._v(" "),n("p",[t._v("官方叫做RedLock算法，是Redis官方支持的分布式锁算法.")]),t._v(" "),n("p",[t._v("这个分布式锁有3个重要的考量点")]),t._v(" "),n("ul",[n("li",[t._v("互斥（只能有一个客户端获取锁）")]),t._v(" "),n("li",[t._v("不能死锁")]),t._v(" "),n("li",[t._v("容错（大部分Redis节点或者这个锁就可以加可以释放）")])]),t._v(" "),n("h2",{attrs:{id:"_3-1-最普通的实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-最普通的实现方式"}},[t._v("#")]),t._v(" 3.1 最普通的实现方式")]),t._v(" "),n("p",[t._v("创建一个key")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("SET my:lock 随机值 NX PX 30000\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("ul",[n("li",[t._v("NX : 只有key不存在的时候才会设置成功")]),t._v(" "),n("li",[t._v("PX 30000 : 30秒后锁自动释放。别人创建的时候如果发现已经有了就不能加锁了.")])]),t._v(" "),n("p",[t._v("释放锁就是删除key，但是一般可以用lua脚本删除，判断value一样才删除:")]),t._v(" "),n("blockquote",[n("p",[t._v("关于redis如何执行lua脚本，自行百度")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('if redis.call("get",KEYS[1]) == ARGV[1] then\nreturn redis.call("del",KEYS[1])\nelse\n    return 0\nend\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("为啥用随机值呢？")]),t._v(" "),n("p",[t._v("因为如果某客户端获取锁，但阻塞了很长时间才执行完，此时可能已经超时释放锁了，可能别的客户端已经获取到了锁，要是此时你直接删除key会有问题，所以得用随机值加上面的lua脚本来释放锁.")]),t._v(" "),n("p",[t._v("但是这样是肯定不行的")]),t._v(" "),n("ul",[n("li",[t._v("如果是普通的Redis单实例，那就是单点故障")]),t._v(" "),n("li",[t._v("是Redis普通主从，那Redis主从异步复制，如果主节点挂了，key还没同步到从节点，此时从节点切换为主节点，别人就会拿到锁.")]),t._v(" "),n("li",[t._v("Redis最普通的分布式锁的实现原理\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190710192527101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_SmF2YUVkZ2U=,size_1,color_FFFFFF,t_70",alt:""}})])]),t._v(" "),n("h2",{attrs:{id:"_3-2-redlock算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-redlock算法"}},[t._v("#")]),t._v(" 3.2 RedLock算法")]),t._v(" "),n("p",[t._v("假设有一个redis cluster，有5个redis master实例.")]),t._v(" "),n("p",[t._v("执行如下步骤获取锁：")]),t._v(" "),n("ol",[n("li",[t._v("获取当前时间戳(ms)")]),t._v(" "),n("li",[t._v("尝试轮流在每个master节点创建锁，过期时间较短(几十ms)")]),t._v(" "),n("li",[t._v("尝试在大多数节点建立一个锁，比如5个节点就要求是3个节点（n / 2 +1）")]),t._v(" "),n("li",[t._v("客户端计算建立锁的时间，如果建立锁的时间小于超时时间，即建立成功")]),t._v(" "),n("li",[t._v("如果锁建立失败，那么就依次删除这个锁")]),t._v(" "),n("li",[t._v("只要别人建立了一把分布式锁，就得不断轮询去尝试获取锁")])]),t._v(" "),n("ul",[n("li",[t._v("RedLock算法"),n("img",{attrs:{src:"https://ask.qcloudimg.com/http-save/1752328/2jcxo2yx5u.png",alt:""}})])]),t._v(" "),n("h1",{attrs:{id:"_4-zookeeper分布式锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-zookeeper分布式锁"}},[t._v("#")]),t._v(" 4 ZooKeeper分布式锁")]),t._v(" "),n("h2",{attrs:{id:"_4-1-方案一"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-方案一"}},[t._v("#")]),t._v(" 4.1 方案一")]),t._v(" "),n("p",[t._v("可以做的比较简单，就是某个节点尝试创建znode，创建成功了就获取了这个锁")]),t._v(" "),n("p",[t._v("这个时候别的客户端创建锁会失败，只能注册监听器监听这个锁")]),t._v(" "),n("p",[t._v("释放锁就是删除这个znode，一旦释放掉就会通知客户端，然后有一个等待着的客户端就可以重新加锁。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * ZooKeeperSession\n * \n * @author JavaEdge\n *\n */\npublic class ZooKeeperSession {\n\t\n\tprivate static CountDownLatch connectedSemaphore = new CountDownLatch(1);\n\t\n\tprivate ZooKeeper zookeeper;\n\tprivate CountDownLatch latch;\n\n\tpublic ZooKeeperSession() {\n\t\ttry {\n\t\t\tthis.zookeeper = new ZooKeeper(\n\t\t\t\t\t"192.168.31.187:2181,\n\t\t\t\t\t192.168.31.19:2181,\n\t\t\t\t\t192.168.31.227:2181", \n\t\t\t\t\t50000, \n\t\t\t\t\tnew ZooKeeperWatcher());\t\t\t\n\t\t\ttry {\n\t\t\t\tconnectedSemaphore.await();\n\t\t\t} catch(InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println("ZooKeeper session established......");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\t/**\n\t * 获取分布式锁\n\t * @param productId\n\t */\n\tpublic Boolean acquireDistributedLock(Long productId) {\n\t\tString path = "/product-lock-" + productId;\n\t\n\t\ttry {\n\t\t\tzookeeper.create(path, "".getBytes(), \n\t\t\t\t\t\t  \t Ids.OPEN_ACL_UNSAFE, \n\t\t\t\t\t\t  \t CreateMode.EPHEMERAL);\n\t\t \treturn true;\n\t\t} catch (Exception e) {\n\t\t\twhile(true) {\n\t\t\t\ttry {\n\t\t\t\t\t// 相当于是给node注册一个监听器，去看看这个监听器是否存在\n\t\t\t\t\tStat stat = zk.exists(path, true); \n\t\t\t\t\t\n\t\t\t\t\tif(stat != null) {\n\t\t\t\t\t\tthis.latch = new CountDownLatch(1);\n\t\t\t\t\t\tthis.latch.await(waitTime, TimeUnit.MILLISECONDS);\n\t\t\t\t\t\tthis.latch = null;\n\t\t\t\t\t}\n\t\t\t\t\tzookeeper.create(path, "".getBytes(), \n\t\t\t\t\t\t\t\t\t Ids.OPEN_ACL_UNSAFE, \n\t\t\t\t\t\t\t\t\t CreateMode.EPHEMERAL);\n\t\t\t\t\treturn true;\n\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 很不优雅，我呢就是给大家来演示这么一个思路\n\t\t\t\t// 比较通用的，我们公司里我们自己封装的基于zookeeper的分布式锁，我们基于zookeeper的临时顺序节点去实现的，比较优雅的\n\t\t\t}\n\t\t\treturn true;\n\t}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\t/**\n\t * 释放掉一个分布式锁\n\t * \n\t * @param productId\n\t */\n\tpublic void releaseDistributedLock(Long productId) {\n\t\tString path = "/product-lock-" + productId;\n\t\ttry {\n\t\t\tzookeeper.delete(path, -1); \n\t\t\tSystem.out.println("release the lock for product[id=" + productId + "]......");  \n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\t/**\n\t * 建立zk session的watcher\n\t * \n\t * @author JavaEdge\n\t *\n\t */\n\tprivate class ZooKeeperWatcher implements Watcher {\n\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tSystem.out.println("Receive watched event: " + event.getState());\n\n\t\t\tif(KeeperState.SyncConnected == event.getState()) {\n\t\t\t\tconnectedSemaphore.countDown();\n\t\t\t} \n\n\t\t\tif(this.latch != null) {  \n\t\t\t\tthis.latch.countDown();  \n\t\t\t}\n\t\t}\n\t}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\t/**\n\t * 封装单例的静态内部类\n\t * \n\t * @author JavaEdge\n\t *\n\t */\n\tprivate static class Singleton {\n\t\t\n\t\tprivate static ZooKeeperSession instance;\n\t\t\n\t\tstatic {\n\t\t\tinstance = new ZooKeeperSession();\n\t\t}\n\t\t\n\t\tpublic static ZooKeeperSession getInstance() {\n\t\t\treturn instance;\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * 获取单例\n\t * @return\n\t */\n\tpublic static ZooKeeperSession getInstance() {\n\t\treturn Singleton.getInstance();\n\t}\n\t\n\t/**\n\t * 初始化单例的便捷方法\n\t */\n\tpublic static void init() {\n\t\tgetInstance();\n\t}\n\t\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br")])]),n("h2",{attrs:{id:"_4-2-方案二"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-方案二"}},[t._v("#")]),t._v(" 4.2 方案二")]),t._v(" "),n("p",[t._v("也可以采用另一种方式，创建临时顺序节点")]),t._v(" "),n("p",[t._v("如果有一把锁，被多个人给竞争，此时多个人会排队，第一个拿到锁的人会执行，然后释放锁")]),t._v(" "),n("p",[t._v("后面的每个人都会去监听排在自己前面的那个人创建的 node 上，一旦某个人释放了锁，排在自己后面的人就会被 zookeeper 给通知，一旦被通知了之后，就 ok 了，自己就获取到了锁，就可以执行代码了")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class ZooKeeperDistributedLock implements Watcher {\n\n    private ZooKeeper zk;\n    private String locksRoot = "/locks";\n    private String productId;\n    private String waitNode;\n    private String lockNode;\n    private CountDownLatch latch;\n    private CountDownLatch connectedLatch = new CountDownLatch(1);\n    private int sessionTimeout = 30000;\n\n    public ZooKeeperDistributedLock(String productId) {\n        this.productId = productId;\n        try {\n            String address = "192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181";\n            zk = new ZooKeeper(address, sessionTimeout, this);\n            connectedLatch.await();\n        } catch (IOException e) {\n            throw new LockException(e);\n        } catch (KeeperException e) {\n            throw new LockException(e);\n        } catch (InterruptedException e) {\n            throw new LockException(e);\n        }\n    }\n\n    public void process(WatchedEvent event) {\n        if (event.getState() == KeeperState.SyncConnected) {\n            connectedLatch.countDown();\n            return;\n        }\n\n        if (this.latch != null) {\n            this.latch.countDown();\n        }\n    }\n\n    public void acquireDistributedLock() {\n        try {\n            if (this.tryLock()) {\n                return;\n            } else {\n                waitForLock(waitNode, sessionTimeout);\n            }\n        } catch (KeeperException e) {\n            throw new LockException(e);\n        } catch (InterruptedException e) {\n            throw new LockException(e);\n        }\n    }\n\n    public boolean tryLock() {\n        try {\n \t\t    // 传入进去的locksRoot + “/” + productId\n\t\t    // 假设productId代表了一个商品id，比如说1\n\t\t    // locksRoot = locks\n\t\t    // /locks/10000000000，/locks/10000000001，/locks/10000000002\n            lockNode = zk.create(locksRoot + "/" + productId, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n   \n            // 看看刚创建的节点是不是最小的节点\n\t \t    // locks：10000000000，10000000001，10000000002\n            List<String> locks = zk.getChildren(locksRoot, false);\n            Collections.sort(locks);\n\t\n            if(lockNode.equals(locksRoot+"/"+ locks.get(0))){\n                //如果是最小的节点,则表示取得锁\n                return true;\n            }\n\t\n            //如果不是最小的节点，找到比自己小1的节点\n\t  int previousLockIndex = -1;\n            for(int i = 0; i < locks.size(); i++) {\n\t\tif(lockNode.equals(locksRoot + “/” + locks.get(i))) {\n\t         \t    previousLockIndex = i - 1;\n\t\t    break;\n\t\t}\n\t   }\n\t   \n\t   this.waitNode = locks.get(previousLockIndex);\n        } catch (KeeperException e) {\n            throw new LockException(e);\n        } catch (InterruptedException e) {\n            throw new LockException(e);\n        }\n        return false;\n    }\n\n    private boolean waitForLock(String waitNode, long waitTime) throws InterruptedException, KeeperException {\n        Stat stat = zk.exists(locksRoot + "/" + waitNode, true);\n        if (stat != null) {\n            this.latch = new CountDownLatch(1);\n            this.latch.await(waitTime, TimeUnit.MILLISECONDS);\n            this.latch = null;\n        }\n        return true;\n    }\n\n    public void unlock() {\n        try {\n            // 删除/locks/10000000000节点\n            // 删除/locks/10000000001节点\n            System.out.println("unlock " + lockNode);\n            zk.delete(lockNode, -1);\n            lockNode = null;\n            zk.close();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (KeeperException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public class LockException extends RuntimeException {\n        private static final long serialVersionUID = 1L;\n\n        public LockException(String e) {\n            super(e);\n        }\n\n        public LockException(Exception e) {\n            super(e);\n        }\n    }\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br"),n("span",{staticClass:"line-number"},[t._v("121")]),n("br"),n("span",{staticClass:"line-number"},[t._v("122")]),n("br"),n("span",{staticClass:"line-number"},[t._v("123")]),n("br"),n("span",{staticClass:"line-number"},[t._v("124")]),n("br")])]),n("ul",[n("li",[t._v("ZooKeeper的分布式锁原理")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://ask.qcloudimg.com/http-save/1752328/00kqnkibdb.png",alt:""}})]),t._v(" "),n("h1",{attrs:{id:"_5-redis-zookeeper分布式锁实现的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis-zookeeper分布式锁实现的对比"}},[t._v("#")]),t._v(" 5 Redis & ZooKeeper分布式锁实现的对比")]),t._v(" "),n("ul",[n("li",[t._v("Redis分布式锁，需要自己不断去尝试获取锁，比较消耗性能")]),t._v(" "),n("li",[t._v("ZooKeeper分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小")])]),t._v(" "),n("p",[t._v("另外一点就是")]),t._v(" "),n("ul",[n("li",[t._v("如果Redis获取锁的那个客户端挂了，那么只能等待超时时间之后才能释放锁")]),t._v(" "),n("li",[t._v("而对于ZooKeeper，因为创建的是临时znode，只要客户端挂了，znode就没了，此时就自动释放锁")])]),t._v(" "),n("p",[t._v("Redis分布式锁大家没发现好麻烦吗？")]),t._v(" "),n("p",[t._v("遍历上锁，计算时间等等")]),t._v(" "),n("p",[t._v("ZooKeeper的分布式锁语义清晰实现简单")]),t._v(" "),n("p",[t._v("所以先不分析太多的东西，就说这两点，个人实践认为ZooKeeper的分布式锁比Redis的分布式锁牢靠、而且模型简单易用")]),t._v(" "),n("h1",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("ul",[n("li",[t._v("《Java工程师面试突击第1季-中华石杉老师》")])]),t._v(" "),n("h1",{attrs:{id:"x-交流学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#x-交流学习"}},[t._v("#")]),t._v(" X 交流学习")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190504005601174.jpg",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"java交流群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java交流群"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://jq.qq.com/?_wv=1027&k=5UB4P1T",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java交流群"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"博客"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#博客"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://blog.csdn.net/qq_33589510",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"github"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://github.com/Wasabi1234",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);